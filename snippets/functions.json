{
	"useClk()": {
		"scope": "source.e2",
		"prefix": "useClk",
		"description": "(1 OPS) function entity useClk()",
		"body": "useClk()"
	},
	"ioGetInputQuaternion(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputQuaternion",
		"description": "(5 OPS) function quaternion ioGetInputQuaternion()",
		"body": "ioGetInputQuaternion()"
	},
	"pushTracedata(r:xtd)": {
		"scope": "source.e2",
		"prefix": "pushTracedata",
		"description": "(7 OPS) function tracedata pushTracedata()",
		"body": "pushTracedata()"
	},
	"writeArraySimple(xwl:nr)": {
		"scope": "source.e2",
		"prefix": "writeArraySimple",
		"description": "(20 OPS) function normal writeArraySimple(Address, Data)",
		"body": "writeArraySimple(${1:Address}, ${2:Data})"
	},
	"op:idx(m=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"setMass(b:n)": {
		"scope": "source.e2",
		"prefix": "setMass",
		"description": "(1 OPS) function void setMass(Mass)",
		"body": "setMass(${1:Mass})"
	},
	"quat(n)": {
		"scope": "source.e2",
		"prefix": "quat",
		"description": "(1 OPS) function quaternion quat(Real)",
		"body": "quat(${1:Real})"
	},
	"unshiftBone(r:b)": {
		"scope": "source.e2",
		"prefix": "unshiftBone",
		"description": "(7 OPS) function bone unshiftBone()",
		"body": "unshiftBone()"
	},
	"op:ass(m)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(5 OPS) function matrix op:ass()",
		"body": "op:ass()"
	},
	"rangerReset()": {
		"scope": "source.e2",
		"prefix": "rangerReset",
		"description": "(1 OPS) function void rangerReset()",
		"body": "rangerReset()"
	},
	"op:cnt()": {
		"scope": "source.e2",
		"prefix": "op:cnt",
		"description": "(2 OPS) function void op:cnt()",
		"body": "op:cnt()"
	},
	"ioGetInputVector(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputVector",
		"description": "(5 OPS) function vector ioGetInputVector()",
		"body": "ioGetInputVector()"
	},
	"op:fea(nxefr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"tsShapeCreate(n)": {
		"scope": "source.e2",
		"prefix": "tsShapeCreate",
		"description": "(20 OPS) function string tsShapeCreate(Index)",
		"body": "tsShapeCreate(${1:Index})"
	},
	"inrange(aaa)": {
		"scope": "source.e2",
		"prefix": "inrange",
		"description": "(5 OPS) function normal inrange(Rv1, Rv2, Rv3)",
		"body": "inrange(${1:Rv1}, ${2:Rv2}, ${3:Rv3})"
	},
	"op:div(vv)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function vector op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"toLocal(e:a)": {
		"scope": "source.e2",
		"prefix": "toLocal",
		"description": "(15 OPS) function angle toLocal(Worldangle)",
		"body": "toLocal(${1:Worldangle})"
	},
	"popMatrix4(r:)": {
		"scope": "source.e2",
		"prefix": "popMatrix4",
		"description": "(7 OPS) function matrix4 popMatrix4()",
		"body": "popMatrix4()"
	},
	"findPlayerByName(s)": {
		"scope": "source.e2",
		"prefix": "findPlayerByName",
		"description": "(30 OPS) function entity findPlayerByName(Name)",
		"body": "findPlayerByName(${1:Name})"
	},
	"round(vn)": {
		"scope": "source.e2",
		"prefix": "round",
		"description": "(6 OPS) function vector round(Rv1, Decimals)",
		"body": "round(${1:Rv1}, ${2:Decimals})"
	},
	"holoAlpha(nn)": {
		"scope": "source.e2",
		"prefix": "holoAlpha",
		"description": "(15 OPS) function void holoAlpha(Index, Alpha)",
		"body": "holoAlpha(${1:Index}, ${2:Alpha})"
	},
	"changed(xv4)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"sechr(n)": {
		"scope": "source.e2",
		"prefix": "sechr",
		"description": "(2 OPS) function normal sechr()",
		"body": "sechr()"
	},
	"getPowerID(xsc:)": {
		"scope": "source.e2",
		"prefix": "getPowerID",
		"description": "(3 OPS) function vector2 getPowerID(This)",
		"body": "getPowerID(${1:This})"
	},
	"noCollideAll(en)": {
		"scope": "source.e2",
		"prefix": "noCollideAll",
		"description": "(30 OPS) function void noCollideAll(Ent, State)",
		"body": "noCollideAll(${1:Ent}, ${2:State})"
	},
	"mod(xv2n)": {
		"scope": "source.e2",
		"prefix": "mod",
		"description": "(4 OPS) function vector2 mod()",
		"body": "mod()"
	},
	"ammoCount(e:s)": {
		"scope": "source.e2",
		"prefix": "ammoCount",
		"description": "(2 OPS) function normal ammoCount(Ammo_type)",
		"body": "ammoCount(${1:Ammo_type})"
	},
	"op:neg(xm4)": {
		"scope": "source.e2",
		"prefix": "op:neg",
		"description": "(5 OPS) function matrix4 op:neg(Rv1)",
		"body": "op:neg(${1:Rv1})"
	},
	"op:sub(nc)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(2 OPS) function complex op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"pushString(r:s)": {
		"scope": "source.e2",
		"prefix": "pushString",
		"description": "(7 OPS) function string pushString()",
		"body": "pushString()"
	},
	"up(a:)": {
		"scope": "source.e2",
		"prefix": "up",
		"description": "(5 OPS) function vector up(This)",
		"body": "up(${1:This})"
	},
	"dsGetStcontrol()": {
		"scope": "source.e2",
		"prefix": "dsGetStcontrol",
		"description": "(5 OPS) function stcontrol dsGetStcontrol()",
		"body": "dsGetStcontrol()"
	},
	"remEntHitOnly(xft:e)": {
		"scope": "source.e2",
		"prefix": "remEntHitOnly",
		"description": "(3 OPS) function ftrace remEntHitOnly(Ve)",
		"body": "remEntHitOnly(${1:Ve})"
	},
	"findClipFromName(s)": {
		"scope": "source.e2",
		"prefix": "findClipFromName",
		"description": "(5 OPS) function normal findClipFromName(Name)",
		"body": "findClipFromName(${1:Name})"
	},
	"getConstraints(e:)": {
		"scope": "source.e2",
		"prefix": "getConstraints",
		"description": "(20 OPS) function array getConstraints(This)",
		"body": "getConstraints(${1:This})"
	},
	"rowMatrix4(xv4xv4xv4xv4)": {
		"scope": "source.e2",
		"prefix": "rowMatrix4",
		"description": "(5 OPS) function matrix4 rowMatrix4(Rv1, Rv2, Rv3, Rv4)",
		"body": "rowMatrix4(${1:Rv1}, ${2:Rv2}, ${3:Rv3}, ${4:Rv4})"
	},
	"smpLocal(xft:ev)": {
		"scope": "source.e2",
		"prefix": "smpLocal",
		"description": "(12 OPS) function ftrace smpLocal(Ve, Vp)",
		"body": "smpLocal(${1:Ve}, ${2:Vp})"
	},
	"right(q:)": {
		"scope": "source.e2",
		"prefix": "right",
		"description": "(7 OPS) function vector right(This)",
		"body": "right(${1:This})"
	},
	"holoAmount()": {
		"scope": "source.e2",
		"prefix": "holoAmount",
		"description": "(2 OPS) function normal holoAmount()",
		"body": "holoAmount()"
	},
	"dsSend(ssxft)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"changed(a)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(1 OPS) function normal changed(Value)",
		"body": "changed(${1:Value})"
	},
	"op:idx(n=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"clip1(e:)": {
		"scope": "source.e2",
		"prefix": "clip1",
		"description": "(2 OPS) function normal clip1(This)",
		"body": "clip1(${1:This})"
	},
	"runOnList(n)": {
		"scope": "source.e2",
		"prefix": "runOnList",
		"description": "(5 OPS) function void runOnList(Active)",
		"body": "runOnList(${1:Active})"
	},
	"count(t:)": {
		"scope": "source.e2",
		"prefix": "count",
		"description": "(1 OPS) function normal count(This)",
		"body": "count(${1:This})"
	},
	"string(xwl:s)": {
		"scope": "source.e2",
		"prefix": "string",
		"description": "(5 OPS) function string string()",
		"body": "string()"
	},
	"round(v)": {
		"scope": "source.e2",
		"prefix": "round",
		"description": "(6 OPS) function vector round(Rv1)",
		"body": "round(${1:Rv1})"
	},
	"fractionLeftSolid(xrd:)": {
		"scope": "source.e2",
		"prefix": "fractionLeftSolid",
		"description": "(2 OPS) function normal fractionLeftSolid(This)",
		"body": "fractionLeftSolid(${1:This})"
	},
	"id(r:)": {
		"scope": "source.e2",
		"prefix": "id",
		"description": "(1 OPS) function string id(This)",
		"body": "id(${1:This})"
	},
	"tuneOverCHRLR(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "tuneOverCHRLR",
		"description": "(7 OPS) function stcontrol tuneOverCHRLR(Nk, Nt, Nl)",
		"body": "tuneOverCHRLR(${1:Nk}, ${2:Nt}, ${3:Nl})"
	},
	"pushVector2(r:xv2)": {
		"scope": "source.e2",
		"prefix": "pushVector2",
		"description": "(7 OPS) function vector2 pushVector2()",
		"body": "pushVector2()"
	},
	"op:idx(xsc=xwlsxsc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"fileLoadingList()": {
		"scope": "source.e2",
		"prefix": "fileLoadingList",
		"description": "(5 OPS) function normal fileLoadingList()",
		"body": "fileLoadingList()"
	},
	"egpParent(xwl:ne)": {
		"scope": "source.e2",
		"prefix": "egpParent",
		"description": "(10 OPS) function void egpParent(Index, Parent)",
		"body": "egpParent(${1:Index}, ${2:Parent})"
	},
	"round(an)": {
		"scope": "source.e2",
		"prefix": "round",
		"description": "(5 OPS) function angle round(Rv1, Decimals)",
		"body": "round(${1:Rv1}, ${2:Decimals})"
	},
	"unshiftComplex(r:c)": {
		"scope": "source.e2",
		"prefix": "unshiftComplex",
		"description": "(7 OPS) function complex unshiftComplex()",
		"body": "unshiftComplex()"
	},
	"writeString(xwl:snnn)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y, Textcolor)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor})"
	},
	"setFTrace(e:)": {
		"scope": "source.e2",
		"prefix": "setFTrace",
		"description": "(20 OPS) function ftrace setFTrace(This)",
		"body": "setFTrace(${1:This})"
	},
	"getCopy(xft:evv)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Ee, Vp, Vd)",
		"body": "getCopy(${1:Ee}, ${2:Vp}, ${3:Vd})"
	},
	"httpUrlDecode(s)": {
		"scope": "source.e2",
		"prefix": "httpUrlDecode",
		"description": "(5 OPS) function string httpUrlDecode(Data)",
		"body": "httpUrlDecode(${1:Data})"
	},
	"minVec(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "minVec",
		"description": "(13 OPS) function vector4 minVec()",
		"body": "minVec()"
	},
	"op:bor(nn)": {
		"scope": "source.e2",
		"prefix": "op:bor",
		"description": "(2 OPS) function normal op:bor(A, B)",
		"body": "op:bor(${1:A}, ${2:B})"
	},
	"maxVec(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "maxVec",
		"description": "(4 OPS) function vector2 maxVec()",
		"body": "maxVec()"
	},
	"egpColor(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpColor",
		"description": "(5 OPS) function vector egpColor(Index)",
		"body": "egpColor(${1:Index})"
	},
	"shift(xv2)": {
		"scope": "source.e2",
		"prefix": "shift",
		"description": "(2 OPS) function vector2 shift()",
		"body": "shift()"
	},
	"setGainID(xsc:xv2)": {
		"scope": "source.e2",
		"prefix": "setGainID",
		"description": "(7 OPS) function stcontrol setGainID(Vv)",
		"body": "setGainID(${1:Vv})"
	},
	"getControl(xsc:)": {
		"scope": "source.e2",
		"prefix": "getControl",
		"description": "(3 OPS) function normal getControl(This)",
		"body": "getControl(${1:This})"
	},
	"find(s:s)": {
		"scope": "source.e2",
		"prefix": "find",
		"description": "(20 OPS) function normal find(Needle)",
		"body": "find(${1:Needle})"
	},
	"op:idx(q=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"removeFtrace(r:n)": {
		"scope": "source.e2",
		"prefix": "removeFtrace",
		"description": "(7 OPS) function ftrace removeFtrace()",
		"body": "removeFtrace()"
	},
	"readArray(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "readArray",
		"description": "(5 OPS) function array readArray(Start, Size)",
		"body": "readArray(${1:Start}, ${2:Size})"
	},
	"vec()": {
		"scope": "source.e2",
		"prefix": "vec",
		"description": "(1 OPS) function vector vec()",
		"body": "vec()"
	},
	"op:mul(nc)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function complex op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"dot(xv4:xv4)": {
		"scope": "source.e2",
		"prefix": "dot",
		"description": "(7 OPS) function normal dot()",
		"body": "dot()"
	},
	"soundVolume(nn)": {
		"scope": "source.e2",
		"prefix": "soundVolume",
		"description": "(5 OPS) function void soundVolume(Index, Volume)",
		"body": "soundVolume(${1:Index}, ${2:Volume})"
	},
	"isOnGround(e:)": {
		"scope": "source.e2",
		"prefix": "isOnGround",
		"description": "(10 OPS) function normal isOnGround(This)",
		"body": "isOnGround(${1:This})"
	},
	"egpClear(xwl:)": {
		"scope": "source.e2",
		"prefix": "egpClear",
		"description": "(10 OPS) function void egpClear(This)",
		"body": "egpClear(${1:This})"
	},
	"chatClk(e)": {
		"scope": "source.e2",
		"prefix": "chatClk",
		"description": "(3 OPS) function normal chatClk(Ply)",
		"body": "chatClk(${1:Ply})"
	},
	"entity(b:)": {
		"scope": "source.e2",
		"prefix": "entity",
		"description": "(1 OPS) function entity entity(This)",
		"body": "entity(${1:This})"
	},
	"concmd(s)": {
		"scope": "source.e2",
		"prefix": "concmd",
		"description": "(5 OPS) function normal concmd(Command)",
		"body": "concmd(${1:Command})"
	},
	"op:mul(aa)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function angle op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"remBase(xft:)": {
		"scope": "source.e2",
		"prefix": "remBase",
		"description": "(3 OPS) function ftrace remBase(This)",
		"body": "remBase(${1:This})"
	},
	"egpObjectContainsPoint(xwl:nxv2)": {
		"scope": "source.e2",
		"prefix": "egpObjectContainsPoint",
		"description": "(15 OPS) function normal egpObjectContainsPoint(Index, Point)",
		"body": "egpObjectContainsPoint(${1:Index}, ${2:Point})"
	},
	"findDisallowPlayerProps(s)": {
		"scope": "source.e2",
		"prefix": "findDisallowPlayerProps",
		"description": "(10 OPS) function void findDisallowPlayerProps(Name)",
		"body": "findDisallowPlayerProps(${1:Name})"
	},
	"randvec()": {
		"scope": "source.e2",
		"prefix": "randvec",
		"description": "(10 OPS) function vector randvec()",
		"body": "randvec()"
	},
	"setSurfaceProp(xef:n)": {
		"scope": "source.e2",
		"prefix": "setSurfaceProp",
		"description": "(1 OPS) function effect setSurfaceProp(Prop)",
		"body": "setSurfaceProp(${1:Prop})"
	},
	"signalClk(ss)": {
		"scope": "source.e2",
		"prefix": "signalClk",
		"description": "(1 OPS) function normal signalClk(Group, Name)",
		"body": "signalClk(${1:Group}, ${2:Name})"
	},
	"z(m:)": {
		"scope": "source.e2",
		"prefix": "z",
		"description": "(5 OPS) function vector z(This)",
		"body": "z(${1:This})"
	},
	"keyClk()": {
		"scope": "source.e2",
		"prefix": "keyClk",
		"description": "(1 OPS) function entity keyClk()",
		"body": "keyClk()"
	},
	"op:exp(cn)": {
		"scope": "source.e2",
		"prefix": "op:exp",
		"description": "(2 OPS) function complex op:exp(Lhs, Rhs)",
		"body": "op:exp(${1:Lhs}, ${2:Rhs})"
	},
	"isConstrainedTo(e:n)": {
		"scope": "source.e2",
		"prefix": "isConstrainedTo",
		"description": "(5 OPS) function entity isConstrainedTo(Index)",
		"body": "isConstrainedTo(${1:Index})"
	},
	"op:eq(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(2 OPS) function normal op:eq()",
		"body": "op:eq()"
	},
	"findExcludePlayer(s)": {
		"scope": "source.e2",
		"prefix": "findExcludePlayer",
		"description": "(10 OPS) function void findExcludePlayer(Name)",
		"body": "findExcludePlayer(${1:Name})"
	},
	"number(r:n)": {
		"scope": "source.e2",
		"prefix": "number",
		"description": "(5 OPS) function normal number()",
		"body": "number()"
	},
	"selfDestruct()": {
		"scope": "source.e2",
		"prefix": "selfDestruct",
		"description": "(5 OPS) function void selfDestruct()",
		"body": "selfDestruct()"
	},
	"propSetElasticity(e:n)": {
		"scope": "source.e2",
		"prefix": "propSetElasticity",
		"description": "(10 OPS) function void propSetElasticity(Elasticity)",
		"body": "propSetElasticity(${1:Elasticity})"
	},
	"enableConstraintUndo(n)": {
		"scope": "source.e2",
		"prefix": "enableConstraintUndo",
		"description": "(1 OPS) function void enableConstraintUndo(State)",
		"body": "enableConstraintUndo(${1:State})"
	},
	"ioGetInputEffect(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputEffect",
		"description": "(5 OPS) function effect ioGetInputEffect()",
		"body": "ioGetInputEffect()"
	},
	"array(xwl:s)": {
		"scope": "source.e2",
		"prefix": "array",
		"description": "(5 OPS) function array array()",
		"body": "array()"
	},
	"identity()": {
		"scope": "source.e2",
		"prefix": "identity",
		"description": "(5 OPS) function matrix identity()",
		"body": "identity()"
	},
	"op:idx(e=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"ioSetOutput(se)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function entity ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"lightCreate(nv)": {
		"scope": "source.e2",
		"prefix": "lightCreate",
		"description": "(25 OPS) function void lightCreate(Index, Position)",
		"body": "lightCreate(${1:Index}, ${2:Position})"
	},
	"mix(vvn)": {
		"scope": "source.e2",
		"prefix": "mix",
		"description": "(10 OPS) function vector mix(Vec1, Vec2, Ratio)",
		"body": "mix(${1:Vec1}, ${2:Vec2}, ${3:Ratio})"
	},
	"csc(c)": {
		"scope": "source.e2",
		"prefix": "csc",
		"description": "(3 OPS) function complex csc(Z)",
		"body": "csc(${1:Z})"
	},
	"op:idx(t=xgtnt)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function table op:idx()",
		"body": "op:idx()"
	},
	"setPowerPI(xsc:xv2)": {
		"scope": "source.e2",
		"prefix": "setPowerPI",
		"description": "(8 OPS) function stcontrol setPowerPI(Vv)",
		"body": "setPowerPI(${1:Vv})"
	},
	"getDir(xft:)": {
		"scope": "source.e2",
		"prefix": "getDir",
		"description": "(3 OPS) function vector getDir(This)",
		"body": "getDir(${1:This})"
	},
	"shiftStcontrol(r:)": {
		"scope": "source.e2",
		"prefix": "shiftStcontrol",
		"description": "(7 OPS) function stcontrol shiftStcontrol()",
		"body": "shiftStcontrol()"
	},
	"keys(t:)": {
		"scope": "source.e2",
		"prefix": "keys",
		"description": "(5 OPS) function array keys(This)",
		"body": "keys(${1:This})"
	},
	"findToTable()": {
		"scope": "source.e2",
		"prefix": "findToTable",
		"description": "(20 OPS) function table findToTable()",
		"body": "findToTable()"
	},
	"deathClk()": {
		"scope": "source.e2",
		"prefix": "deathClk",
		"description": "(5 OPS) function normal deathClk()",
		"body": "deathClk()"
	},
	"airDensity()": {
		"scope": "source.e2",
		"prefix": "airDensity",
		"description": "(1 OPS) function normal airDensity()",
		"body": "airDensity()"
	},
	"removeEntity(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeEntity",
		"description": "(5 OPS) function entity removeEntity()",
		"body": "removeEntity()"
	},
	"setColumn(m:nv)": {
		"scope": "source.e2",
		"prefix": "setColumn",
		"description": "(5 OPS) function matrix setColumn(Rv2, Rv3)",
		"body": "setColumn(${1:Rv2}, ${2:Rv3})"
	},
	"vec(nnn)": {
		"scope": "source.e2",
		"prefix": "vec",
		"description": "(2 OPS) function vector vec(X, Y, Z)",
		"body": "vec(${1:X}, ${2:Y}, ${3:Z})"
	},
	"lastDeathAttacker(e)": {
		"scope": "source.e2",
		"prefix": "lastDeathAttacker",
		"description": "(5 OPS) function entity lastDeathAttacker(Ply)",
		"body": "lastDeathAttacker(${1:Ply})"
	},
	"round(xv4n)": {
		"scope": "source.e2",
		"prefix": "round",
		"description": "(8 OPS) function vector4 round(Rv1, Decimals)",
		"body": "round(${1:Rv1}, ${2:Decimals})"
	},
	"ioGetInputTable(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputTable",
		"description": "(5 OPS) function table ioGetInputTable()",
		"body": "ioGetInputTable()"
	},
	"setIsManual(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setIsManual",
		"description": "(3 OPS) function stcontrol setIsManual(Nn)",
		"body": "setIsManual(${1:Nn})"
	},
	"op:idx(qnn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(4 OPS) function normal op:idx(Index, Value)",
		"body": "op:idx(${1:Index}, ${2:Value})"
	},
	"toString(v)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(5 OPS) function string toString(V)",
		"body": "toString(${1:V})"
	},
	"setLen(xft:n)": {
		"scope": "source.e2",
		"prefix": "setLen",
		"description": "(3 OPS) function ftrace setLen(Nl)",
		"body": "setLen(${1:Nl})"
	},
	"setGain(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "setGain",
		"description": "(7 OPS) function stcontrol setGain(Np, Ni, Nd)",
		"body": "setGain(${1:Np}, ${2:Ni}, ${3:Nd})"
	},
	"gRemoveAllVectors()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllVectors",
		"description": "(5 OPS) function void gRemoveAllVectors()",
		"body": "gRemoveAllVectors()"
	},
	"setEntIndex(xef:n)": {
		"scope": "source.e2",
		"prefix": "setEntIndex",
		"description": "(1 OPS) function effect setEntIndex(Index)",
		"body": "setEntIndex(${1:Index})"
	},
	"propDelete(r:)": {
		"scope": "source.e2",
		"prefix": "propDelete",
		"description": "(30 OPS) function normal propDelete(This)",
		"body": "propDelete(${1:This})"
	},
	"holoBoneScale(nsv)": {
		"scope": "source.e2",
		"prefix": "holoBoneScale",
		"description": "(15 OPS) function void holoBoneScale(Index, Bone, Scale)",
		"body": "holoBoneScale(${1:Index}, ${2:Bone}, ${3:Scale})"
	},
	"fileMaxSize()": {
		"scope": "source.e2",
		"prefix": "fileMaxSize",
		"description": "(5 OPS) function normal fileMaxSize()",
		"body": "fileMaxSize()"
	},
	"rangerFlags(s)": {
		"scope": "source.e2",
		"prefix": "rangerFlags",
		"description": "(1 OPS) function void rangerFlags(Flags)",
		"body": "rangerFlags(${1:Flags})"
	},
	"holoModelAny()": {
		"scope": "source.e2",
		"prefix": "holoModelAny",
		"description": "(1 OPS) function normal holoModelAny()",
		"body": "holoModelAny()"
	},
	"egpSize(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpSize",
		"description": "(5 OPS) function vector2 egpSize(Index)",
		"body": "egpSize(${1:Index})"
	},
	"op:sub(mm)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(5 OPS) function matrix op:sub(Rv1, Rv2)",
		"body": "op:sub(${1:Rv1}, ${2:Rv2})"
	},
	"npcRelationshipByOwner(e:esn)": {
		"scope": "source.e2",
		"prefix": "npcRelationshipByOwner",
		"description": "(5 OPS) function normal npcRelationshipByOwner(Rv2, Rv3, Rv4)",
		"body": "npcRelationshipByOwner(${1:Rv2}, ${2:Rv3}, ${3:Rv4})"
	},
	"propGetFriction(e:)": {
		"scope": "source.e2",
		"prefix": "propGetFriction",
		"description": "(10 OPS) function normal propGetFriction(This)",
		"body": "propGetFriction(${1:This})"
	},
	"world()": {
		"scope": "source.e2",
		"prefix": "world",
		"description": "(5 OPS) function entity world()",
		"body": "world()"
	},
	"clamp(nnn)": {
		"scope": "source.e2",
		"prefix": "clamp",
		"description": "(2 OPS) function normal clamp()",
		"body": "clamp()"
	},
	"matrix(q)": {
		"scope": "source.e2",
		"prefix": "matrix",
		"description": "(15 OPS) function matrix matrix(Q)",
		"body": "matrix(${1:Q})"
	},
	"frictionSnapshot(e:)": {
		"scope": "source.e2",
		"prefix": "frictionSnapshot",
		"description": "(10 OPS) function table frictionSnapshot(This)",
		"body": "frictionSnapshot(${1:This})"
	},
	"npcGetTarget(e:)": {
		"scope": "source.e2",
		"prefix": "npcGetTarget",
		"description": "(5 OPS) function entity npcGetTarget(This)",
		"body": "npcGetTarget(${1:This})"
	},
	"rangerOffset(nvv)": {
		"scope": "source.e2",
		"prefix": "rangerOffset",
		"description": "(20 OPS) function ranger rangerOffset(Distance, From, Direction)",
		"body": "rangerOffset(${1:Distance}, ${2:From}, ${3:Direction})"
	},
	"getWireOutputs(e:)": {
		"scope": "source.e2",
		"prefix": "getWireOutputs",
		"description": "(10 OPS) function array getWireOutputs(This)",
		"body": "getWireOutputs(${1:This})"
	},
	"op:add(nc)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(2 OPS) function complex op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"changed(q)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"op:is(s)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(3 OPS) function normal op:is()",
		"body": "op:is()"
	},
	"signalSendToPlayer(se)": {
		"scope": "source.e2",
		"prefix": "signalSendToPlayer",
		"description": "(20 OPS) function void signalSendToPlayer(Name, Player)",
		"body": "signalSendToPlayer(${1:Name}, ${2:Player})"
	},
	"findByName(s)": {
		"scope": "source.e2",
		"prefix": "findByName",
		"description": "(30 OPS) function normal findByName(Name)",
		"body": "findByName(${1:Name})"
	},
	"invert(t)": {
		"scope": "source.e2",
		"prefix": "invert",
		"description": "(5 OPS) function table invert(Tbl)",
		"body": "invert(${1:Tbl})"
	},
	"op:idx(b=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"log(nc)": {
		"scope": "source.e2",
		"prefix": "log",
		"description": "(2 OPS) function complex log(Base, Z)",
		"body": "log(${1:Base}, ${2:Z})"
	},
	"matrix(nnnnnnnnn)": {
		"scope": "source.e2",
		"prefix": "matrix",
		"description": "(5 OPS) function matrix matrix(Rv1, Rv2, Rv3, Rv4, Rv5, Rv6, Rv7, Rv8, Rv9)",
		"body": "matrix(${1:Rv1}, ${2:Rv2}, ${3:Rv3}, ${4:Rv4}, ${5:Rv5}, ${6:Rv6}, ${7:Rv7}, ${8:Rv8}, ${9:Rv9})"
	},
	"op:fea(nat)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"egpFont(xwl:nsn)": {
		"scope": "source.e2",
		"prefix": "egpFont",
		"description": "(10 OPS) function void egpFont(Index, Font, Size)",
		"body": "egpFont(${1:Index}, ${2:Font}, ${3:Size})"
	},
	"soundDuration(s)": {
		"scope": "source.e2",
		"prefix": "soundDuration",
		"description": "(5 OPS) function normal soundDuration(Sound)",
		"body": "soundDuration(${1:Sound})"
	},
	"mod(an)": {
		"scope": "source.e2",
		"prefix": "mod",
		"description": "(5 OPS) function angle mod(Rv1, Rv2)",
		"body": "mod(${1:Rv1}, ${2:Rv2})"
	},
	"tanhr(n)": {
		"scope": "source.e2",
		"prefix": "tanhr",
		"description": "(2 OPS) function normal tanhr()",
		"body": "tanhr()"
	},
	"rowMatrix2(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "rowMatrix2",
		"description": "(5 OPS) function matrix2 rowMatrix2(Rv1, Rv2)",
		"body": "rowMatrix2(${1:Rv1}, ${2:Rv2})"
	},
	"setFtrace(xwl:sxft)": {
		"scope": "source.e2",
		"prefix": "setFtrace",
		"description": "(5 OPS) function ftrace setFtrace()",
		"body": "setFtrace()"
	},
	"smpWorld(xft:)": {
		"scope": "source.e2",
		"prefix": "smpWorld",
		"description": "(12 OPS) function ftrace smpWorld(This)",
		"body": "smpWorld(${1:This})"
	},
	"httpRequestUrl()": {
		"scope": "source.e2",
		"prefix": "httpRequestUrl",
		"description": "(5 OPS) function string httpRequestUrl()",
		"body": "httpRequestUrl()"
	},
	"toWorldPosAng(vava)": {
		"scope": "source.e2",
		"prefix": "toWorldPosAng",
		"description": "(15 OPS) function array toWorldPosAng(Localpos, Localang, Worldpos, Worldang)",
		"body": "toWorldPosAng(${1:Localpos}, ${2:Localang}, ${3:Worldpos}, ${4:Worldang})"
	},
	"op:idx(n=esn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"csqrt(n)": {
		"scope": "source.e2",
		"prefix": "csqrt",
		"description": "(2 OPS) function complex csqrt(N)",
		"body": "csqrt(${1:N})"
	},
	"pushMatrix(t:m)": {
		"scope": "source.e2",
		"prefix": "pushMatrix",
		"description": "(10 OPS) function void pushMatrix()",
		"body": "pushMatrix()"
	},
	"writeString(xwl:snnnv)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y, Textcolor, Bgcolor)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor})"
	},
	"rangerAngleHull(nnnvv)": {
		"scope": "source.e2",
		"prefix": "rangerAngleHull",
		"description": "(20 OPS) function ranger rangerAngleHull(Distance, Xangle, Yangle, Mins, Maxs)",
		"body": "rangerAngleHull(${1:Distance}, ${2:Xangle}, ${3:Yangle}, ${4:Mins}, ${5:Maxs})"
	},
	"cosr(n)": {
		"scope": "source.e2",
		"prefix": "cosr",
		"description": "(2 OPS) function normal cosr()",
		"body": "cosr()"
	},
	"op:mul(mm)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function matrix op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"randvec4()": {
		"scope": "source.e2",
		"prefix": "randvec4",
		"description": "(7 OPS) function vector4 randvec4()",
		"body": "randvec4()"
	},
	"propFreeze(e:n)": {
		"scope": "source.e2",
		"prefix": "propFreeze",
		"description": "(10 OPS) function void propFreeze(Freeze)",
		"body": "propFreeze(${1:Freeze})"
	},
	"op:idx(b=xwlsb)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"applyAngForce(b:a)": {
		"scope": "source.e2",
		"prefix": "applyAngForce",
		"description": "(30 OPS) function void applyAngForce(Angforce)",
		"body": "applyAngForce(${1:Angforce})"
	},
	"op:idx(v=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"soundStop(nn)": {
		"scope": "source.e2",
		"prefix": "soundStop",
		"description": "(5 OPS) function void soundStop(Index, Fadetime)",
		"body": "soundStop(${1:Index}, ${2:Fadetime})"
	},
	"newStControl(n)": {
		"scope": "source.e2",
		"prefix": "newStControl",
		"description": "(20 OPS) function stcontrol newStControl(Nto)",
		"body": "newStControl(${1:Nto})"
	},
	"isInWorld(v:)": {
		"scope": "source.e2",
		"prefix": "isInWorld",
		"description": "(10 OPS) function normal isInWorld(This)",
		"body": "isInWorld(${1:This})"
	},
	"getMask(xft:)": {
		"scope": "source.e2",
		"prefix": "getMask",
		"description": "(3 OPS) function normal getMask(This)",
		"body": "getMask(${1:This})"
	},
	"op:idx(xtd=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"floor(xv2n)": {
		"scope": "source.e2",
		"prefix": "floor",
		"description": "(4 OPS) function vector2 floor(Rv1, Decimals)",
		"body": "floor(${1:Rv1}, ${2:Decimals})"
	},
	"toAngle(q:)": {
		"scope": "source.e2",
		"prefix": "toAngle",
		"description": "(15 OPS) function angle toAngle(This)",
		"body": "toAngle(${1:This})"
	},
	"dsJoinGroup(s)": {
		"scope": "source.e2",
		"prefix": "dsJoinGroup",
		"description": "(10 OPS) function void dsJoinGroup(Groupname)",
		"body": "dsJoinGroup(${1:Groupname})"
	},
	"op:idx(xwl=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"volume(e:)": {
		"scope": "source.e2",
		"prefix": "volume",
		"description": "(10 OPS) function normal volume(This)",
		"body": "volume(${1:This})"
	},
	"unshiftQuaternion(r:q)": {
		"scope": "source.e2",
		"prefix": "unshiftQuaternion",
		"description": "(7 OPS) function quaternion unshiftQuaternion()",
		"body": "unshiftQuaternion()"
	},
	"aimNormal(e:)": {
		"scope": "source.e2",
		"prefix": "aimNormal",
		"description": "(10 OPS) function vector aimNormal(This)",
		"body": "aimNormal(${1:This})"
	},
	"writeUnicodeString(xwl:snnnnn)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y, Textcolor, Bgcolor, Flash)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor}, ${6:Flash})"
	},
	"asin(c)": {
		"scope": "source.e2",
		"prefix": "asin",
		"description": "(5 OPS) function complex asin(Z)",
		"body": "asin(${1:Z})"
	},
	"op:mul(xm2n)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function matrix2 op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"gmatch(s:sn)": {
		"scope": "source.e2",
		"prefix": "gmatch",
		"description": "(10 OPS) function table gmatch(Pattern, Position)",
		"body": "gmatch(${1:Pattern}, ${2:Position})"
	},
	"toUnicodeChar(r)": {
		"scope": "source.e2",
		"prefix": "toUnicodeChar",
		"description": "(1 OPS) function string toUnicodeChar(Args)",
		"body": "toUnicodeChar(${1:Args})"
	},
	"remGainI(xsc:)": {
		"scope": "source.e2",
		"prefix": "remGainI",
		"description": "(7 OPS) function stcontrol remGainI(This)",
		"body": "remGainI(${1:This})"
	},
	"toUnit(sn)": {
		"scope": "source.e2",
		"prefix": "toUnit",
		"description": "(2 OPS) function normal toUnit(Rv1, Rv2)",
		"body": "toUnit(${1:Rv1}, ${2:Rv2})"
	},
	"op:neq(bb)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(1 OPS) function normal op:neq(Lhs, Rhs)",
		"body": "op:neq(${1:Lhs}, ${2:Rhs})"
	},
	"dsSendDirect(sre)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"floor(xv4n)": {
		"scope": "source.e2",
		"prefix": "floor",
		"description": "(8 OPS) function vector4 floor(Rv1, Decimals)",
		"body": "floor(${1:Rv1}, ${2:Decimals})"
	},
	"egpPos(xwl:nv)": {
		"scope": "source.e2",
		"prefix": "egpPos",
		"description": "(10 OPS) function void egpPos(Index, Pos)",
		"body": "egpPos(${1:Index}, ${2:Pos})"
	},
	"changed(xtd)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"op:iwc()": {
		"scope": "source.e2",
		"prefix": "op:iwc",
		"description": "(1 OPS) function normal op:iwc()",
		"body": "op:iwc()"
	},
	"toAngle(m:)": {
		"scope": "source.e2",
		"prefix": "toAngle",
		"description": "(5 OPS) function angle toAngle(This)",
		"body": "toAngle(${1:This})"
	},
	"keySprint(e:)": {
		"scope": "source.e2",
		"prefix": "keySprint",
		"description": "(2 OPS) function normal keySprint(This)",
		"body": "keySprint(${1:This})"
	},
	"removeFtrace(t:s)": {
		"scope": "source.e2",
		"prefix": "removeFtrace",
		"description": "(8 OPS) function ftrace removeFtrace()",
		"body": "removeFtrace()"
	},
	"egpObjectType(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpObjectType",
		"description": "(10 OPS) function string egpObjectType(Index)",
		"body": "egpObjectType(${1:Index})"
	},
	"inrange(xv4xv4xv4)": {
		"scope": "source.e2",
		"prefix": "inrange",
		"description": "(4 OPS) function normal inrange()",
		"body": "inrange()"
	},
	"row(m:n)": {
		"scope": "source.e2",
		"prefix": "row",
		"description": "(5 OPS) function vector row(Rv2)",
		"body": "row(${1:Rv2})"
	},
	"findClipFromPlayerProps(e)": {
		"scope": "source.e2",
		"prefix": "findClipFromPlayerProps",
		"description": "(5 OPS) function normal findClipFromPlayerProps(Ply)",
		"body": "findClipFromPlayerProps(${1:Ply})"
	},
	"dsSendDirect(sexv4)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"shiftVector4(r:)": {
		"scope": "source.e2",
		"prefix": "shiftVector4",
		"description": "(7 OPS) function vector4 shiftVector4()",
		"body": "shiftVector4()"
	},
	"log2(n)": {
		"scope": "source.e2",
		"prefix": "log2",
		"description": "(2 OPS) function normal log2()",
		"body": "log2()"
	},
	"exp(q)": {
		"scope": "source.e2",
		"prefix": "exp",
		"description": "(7 OPS) function quaternion exp(Q)",
		"body": "exp(${1:Q})"
	},
	"getErrorOld(xsc:)": {
		"scope": "source.e2",
		"prefix": "getErrorOld",
		"description": "(3 OPS) function normal getErrorOld(This)",
		"body": "getErrorOld(${1:This})"
	},
	"op:idx(xft=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"popEffect(t:)": {
		"scope": "source.e2",
		"prefix": "popEffect",
		"description": "(10 OPS) function effect popEffect()",
		"body": "popEffect()"
	},
	"findSortByDistance(v)": {
		"scope": "source.e2",
		"prefix": "findSortByDistance",
		"description": "(10 OPS) function normal findSortByDistance(Position)",
		"body": "findSortByDistance(${1:Position})"
	},
	"exp(c)": {
		"scope": "source.e2",
		"prefix": "exp",
		"description": "(2 OPS) function complex exp(Z)",
		"body": "exp(${1:Z})"
	},
	"popEffect(r:)": {
		"scope": "source.e2",
		"prefix": "popEffect",
		"description": "(7 OPS) function effect popEffect()",
		"body": "popEffect()"
	},
	"findExcludeClass(s)": {
		"scope": "source.e2",
		"prefix": "findExcludeClass",
		"description": "(10 OPS) function void findExcludeClass(Class)",
		"body": "findExcludeClass(${1:Class})"
	},
	"setVector(r:nv)": {
		"scope": "source.e2",
		"prefix": "setVector",
		"description": "(5 OPS) function vector setVector()",
		"body": "setVector()"
	},
	"setMaterialIndex(xef:n)": {
		"scope": "source.e2",
		"prefix": "setMaterialIndex",
		"description": "(1 OPS) function effect setMaterialIndex(Index)",
		"body": "setMaterialIndex(${1:Index})"
	},
	"removeEffect(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeEffect",
		"description": "(5 OPS) function effect removeEffect()",
		"body": "removeEffect()"
	},
	"setQuaternion(r:nq)": {
		"scope": "source.e2",
		"prefix": "setQuaternion",
		"description": "(5 OPS) function quaternion setQuaternion()",
		"body": "setQuaternion()"
	},
	"dumpItem(xsc:sn)": {
		"scope": "source.e2",
		"prefix": "dumpItem",
		"description": "(15 OPS) function stcontrol dumpItem(Nt, Nn)",
		"body": "dumpItem(${1:Nt}, ${2:Nn})"
	},
	"op:idx(a=esa)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"findIncludePlayerProps(e)": {
		"scope": "source.e2",
		"prefix": "findIncludePlayerProps",
		"description": "(10 OPS) function void findIncludePlayerProps(Ply)",
		"body": "findIncludePlayerProps(${1:Ply})"
	},
	"cameraEntity(n)": {
		"scope": "source.e2",
		"prefix": "cameraEntity",
		"description": "(2 OPS) function entity cameraEntity(Index)",
		"body": "cameraEntity(${1:Index})"
	},
	"gRemoveAllBones(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllBones",
		"description": "(5 OPS) function void gRemoveAllBones()",
		"body": "gRemoveAllBones()"
	},
	"dsGetNumber()": {
		"scope": "source.e2",
		"prefix": "dsGetNumber",
		"description": "(5 OPS) function normal dsGetNumber()",
		"body": "dsGetNumber()"
	},
	"findAllowPlayer(e)": {
		"scope": "source.e2",
		"prefix": "findAllowPlayer",
		"description": "(10 OPS) function void findAllowPlayer(Ent)",
		"body": "findAllowPlayer(${1:Ent})"
	},
	"trace(xm4)": {
		"scope": "source.e2",
		"prefix": "trace",
		"description": "(5 OPS) function normal trace(Rv1)",
		"body": "trace(${1:Rv1})"
	},
	"getPos(xft:)": {
		"scope": "source.e2",
		"prefix": "getPos",
		"description": "(3 OPS) function vector getPos(This)",
		"body": "getPos(${1:This})"
	},
	"removeStcontrol(t:s)": {
		"scope": "source.e2",
		"prefix": "removeStcontrol",
		"description": "(8 OPS) function stcontrol removeStcontrol()",
		"body": "removeStcontrol()"
	},
	"element(m:nn)": {
		"scope": "source.e2",
		"prefix": "element",
		"description": "(5 OPS) function normal element(Rv2, Rv3)",
		"body": "element(${1:Rv2}, ${2:Rv3})"
	},
	"removeArray(t:n)": {
		"scope": "source.e2",
		"prefix": "removeArray",
		"description": "(8 OPS) function array removeArray()",
		"body": "removeArray()"
	},
	"gRemoveAllEntitys()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllEntitys",
		"description": "(5 OPS) function void gRemoveAllEntitys()",
		"body": "gRemoveAllEntitys()"
	},
	"removeTable(t:s)": {
		"scope": "source.e2",
		"prefix": "removeTable",
		"description": "(8 OPS) function table removeTable()",
		"body": "removeTable()"
	},
	"op:idx(xsc=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"gRemoveAll()": {
		"scope": "source.e2",
		"prefix": "gRemoveAll",
		"description": "(5 OPS) function void gRemoveAll()",
		"body": "gRemoveAll()"
	},
	"removeNumber(t:n)": {
		"scope": "source.e2",
		"prefix": "removeNumber",
		"description": "(8 OPS) function normal removeNumber()",
		"body": "removeNumber()"
	},
	"egpTriangle(xwl:nxv2xv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpTriangle",
		"description": "(15 OPS) function void egpTriangle(Index, V1, V2, V3)",
		"body": "egpTriangle(${1:Index}, ${2:V1}, ${3:V2}, ${4:V3})"
	},
	"op:idx(b=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"pos(xm4:)": {
		"scope": "source.e2",
		"prefix": "pos",
		"description": "(5 OPS) function vector pos(This)",
		"body": "pos(${1:This})"
	},
	"op:idx(n=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"shiftNumber(r:)": {
		"scope": "source.e2",
		"prefix": "shiftNumber",
		"description": "(7 OPS) function normal shiftNumber()",
		"body": "shiftNumber()"
	},
	"rgb2digi(nnnn)": {
		"scope": "source.e2",
		"prefix": "rgb2digi",
		"description": "(2 OPS) function normal rgb2digi(R, G, B, Mode)",
		"body": "rgb2digi(${1:R}, ${2:G}, ${3:B}, ${4:Mode})"
	},
	"size(xtd:n)": {
		"scope": "source.e2",
		"prefix": "size",
		"description": "(20 OPS) function vector size(Index)",
		"body": "size(${1:Index})"
	},
	"toString(n)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(15 OPS) function string toString(Number)",
		"body": "toString(${1:Number})"
	},
	"count(xgt:)": {
		"scope": "source.e2",
		"prefix": "count",
		"description": "(5 OPS) function normal count(This)",
		"body": "count(${1:This})"
	},
	"op:sub(aa)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(2 OPS) function angle op:sub(Rv1, Rv2)",
		"body": "op:sub(${1:Rv1}, ${2:Rv2})"
	},
	"getCopy(xft:vvn)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Vp, Vd, Nl)",
		"body": "getCopy(${1:Vp}, ${2:Vd}, ${3:Nl})"
	},
	"isStartSolid(xft:)": {
		"scope": "source.e2",
		"prefix": "isStartSolid",
		"description": "(3 OPS) function normal isStartSolid(This)",
		"body": "isStartSolid(${1:This})"
	},
	"setPos(e:v)": {
		"scope": "source.e2",
		"prefix": "setPos",
		"description": "(20 OPS) function void setPos(Pos)",
		"body": "setPos(${1:Pos})"
	},
	"op:mul(nv)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function vector op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"op:idx(a=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"op:add(cq)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(4 OPS) function quaternion op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"httpClk()": {
		"scope": "source.e2",
		"prefix": "httpClk",
		"description": "(5 OPS) function normal httpClk()",
		"body": "httpClk()"
	},
	"op:neg(a)": {
		"scope": "source.e2",
		"prefix": "op:neg",
		"description": "(2 OPS) function angle op:neg(Rv1)",
		"body": "op:neg(${1:Rv1})"
	},
	"sqrt(n)": {
		"scope": "source.e2",
		"prefix": "sqrt",
		"description": "(2 OPS) function normal sqrt()",
		"body": "sqrt()"
	},
	"reverse(s:)": {
		"scope": "source.e2",
		"prefix": "reverse",
		"description": "(10 OPS) function string reverse(This)",
		"body": "reverse(${1:This})"
	},
	"holoModel(ns)": {
		"scope": "source.e2",
		"prefix": "holoModel",
		"description": "(10 OPS) function void holoModel(Index, Model)",
		"body": "holoModel(${1:Index}, ${2:Model})"
	},
	"op:idx(ann)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(2 OPS) function normal op:idx(Index, Value)",
		"body": "op:idx(${1:Index}, ${2:Value})"
	},
	"hitTexture(xrd:)": {
		"scope": "source.e2",
		"prefix": "hitTexture",
		"description": "(2 OPS) function string hitTexture(This)",
		"body": "hitTexture(${1:This})"
	},
	"asinr(n)": {
		"scope": "source.e2",
		"prefix": "asinr",
		"description": "(2 OPS) function normal asinr()",
		"body": "asinr()"
	},
	"op:fea(nxrdt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"egpRemove(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpRemove",
		"description": "(10 OPS) function void egpRemove(Index)",
		"body": "egpRemove(${1:Index})"
	},
	"attachmentAng(e:s)": {
		"scope": "source.e2",
		"prefix": "attachmentAng",
		"description": "(15 OPS) function angle attachmentAng(Attachmentname)",
		"body": "attachmentAng(${1:Attachmentname})"
	},
	"op:eq(mm)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(5 OPS) function normal op:eq(Rv1, Rv2)",
		"body": "op:eq(${1:Rv1}, ${2:Rv2})"
	},
	"op:gth(nn)": {
		"scope": "source.e2",
		"prefix": "op:gth",
		"description": "(1.25 OPS) function normal op:gth()",
		"body": "op:gth()"
	},
	"jsonEncode(tn)": {
		"scope": "source.e2",
		"prefix": "jsonEncode",
		"description": "(50 OPS) function string jsonEncode(Data, Prettyprint)",
		"body": "jsonEncode(${1:Data}, ${2:Prettyprint})"
	},
	"teamPlayers(n)": {
		"scope": "source.e2",
		"prefix": "teamPlayers",
		"description": "(5 OPS) function normal teamPlayers(Rv1)",
		"body": "teamPlayers(${1:Rv1})"
	},
	"stoptimer(s)": {
		"scope": "source.e2",
		"prefix": "stoptimer",
		"description": "(5 OPS) function void stoptimer(Rv1)",
		"body": "stoptimer(${1:Rv1})"
	},
	"unshiftArray(t:r)": {
		"scope": "source.e2",
		"prefix": "unshiftArray",
		"description": "(10 OPS) function void unshiftArray()",
		"body": "unshiftArray()"
	},
	"vertices(xtd:n)": {
		"scope": "source.e2",
		"prefix": "vertices",
		"description": "(20 OPS) function vector vertices(Index)",
		"body": "vertices(${1:Index})"
	},
	"armor(e:)": {
		"scope": "source.e2",
		"prefix": "armor",
		"description": "(5 OPS) function normal armor(This)",
		"body": "armor(${1:This})"
	},
	"removeComplex(t:n)": {
		"scope": "source.e2",
		"prefix": "removeComplex",
		"description": "(8 OPS) function complex removeComplex()",
		"body": "removeComplex()"
	},
	"inv(q)": {
		"scope": "source.e2",
		"prefix": "inv",
		"description": "(4 OPS) function quaternion inv(Q)",
		"body": "inv(${1:Q})"
	},
	"remGain(xsc:)": {
		"scope": "source.e2",
		"prefix": "remGain",
		"description": "(7 OPS) function stcontrol remGain(This)",
		"body": "remGain(${1:This})"
	},
	"cameraCreate(nvan)": {
		"scope": "source.e2",
		"prefix": "cameraCreate",
		"description": "(25 OPS) function void cameraCreate(Index, Position, Ang, Zoom)",
		"body": "cameraCreate(${1:Index}, ${2:Position}, ${3:Ang}, ${4:Zoom})"
	},
	"pos(xtd:)": {
		"scope": "source.e2",
		"prefix": "pos",
		"description": "(20 OPS) function vector pos(This)",
		"body": "pos(${1:This})"
	},
	"op:add(vs)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(10 OPS) function string op:add()",
		"body": "op:add()"
	},
	"op:idx(n=xgtnn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"setGainD(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setGainD",
		"description": "(7 OPS) function stcontrol setGainD(Nd)",
		"body": "setGainD(${1:Nd})"
	},
	"dsSend(ssxm2)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"op:ass(n)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(2 OPS) function normal op:ass()",
		"body": "op:ass()"
	},
	"op:idx(m=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"findExcludePlayerProps(e)": {
		"scope": "source.e2",
		"prefix": "findExcludePlayerProps",
		"description": "(10 OPS) function void findExcludePlayerProps(Ply)",
		"body": "findExcludePlayerProps(${1:Ply})"
	},
	"yaw(a:)": {
		"scope": "source.e2",
		"prefix": "yaw",
		"description": "(1 OPS) function normal yaw(This)",
		"body": "yaw(${1:This})"
	},
	"egpQueueClk(xwl)": {
		"scope": "source.e2",
		"prefix": "egpQueueClk",
		"description": "(10 OPS) function normal egpQueueClk(Screen)",
		"body": "egpQueueClk(${1:Screen})"
	},
	"op:add(ns)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(10 OPS) function string op:add()",
		"body": "op:add()"
	},
	"lastSaidTeam()": {
		"scope": "source.e2",
		"prefix": "lastSaidTeam",
		"description": "(3 OPS) function normal lastSaidTeam()",
		"body": "lastSaidTeam()"
	},
	"entity(xrd:)": {
		"scope": "source.e2",
		"prefix": "entity",
		"description": "(2 OPS) function entity entity(This)",
		"body": "entity(${1:This})"
	},
	"isFlashlightOn(e:)": {
		"scope": "source.e2",
		"prefix": "isFlashlightOn",
		"description": "(5 OPS) function normal isFlashlightOn(This)",
		"body": "isFlashlightOn(${1:This})"
	},
	"op:idx(e=tse)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"op:lth(ss)": {
		"scope": "source.e2",
		"prefix": "op:lth",
		"description": "(3 OPS) function normal op:lth()",
		"body": "op:lth()"
	},
	"quat(vv)": {
		"scope": "source.e2",
		"prefix": "quat",
		"description": "(15 OPS) function quaternion quat(Forward, Up)",
		"body": "quat(${1:Forward}, ${2:Up})"
	},
	"op:is(e)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(5 OPS) function normal op:is(Ent)",
		"body": "op:is(${1:Ent})"
	},
	"dateUTC(n)": {
		"scope": "source.e2",
		"prefix": "dateUTC",
		"description": "(10 OPS) function table dateUTC(Time)",
		"body": "dateUTC(${1:Time})"
	},
	"op:fea(scxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"min(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "min",
		"description": "(13 OPS) function vector4 min()",
		"body": "min()"
	},
	"op:geq(ss)": {
		"scope": "source.e2",
		"prefix": "op:geq",
		"description": "(3 OPS) function normal op:geq()",
		"body": "op:geq()"
	},
	"holoPlayerColor(nv)": {
		"scope": "source.e2",
		"prefix": "holoPlayerColor",
		"description": "(10 OPS) function void holoPlayerColor(Index, Color)",
		"body": "holoPlayerColor(${1:Index}, ${2:Color})"
	},
	"time()": {
		"scope": "source.e2",
		"prefix": "time",
		"description": "(2 OPS) function normal time()",
		"body": "time()"
	},
	"op:fea(svt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"tsShapePolygon(nvvv)": {
		"scope": "source.e2",
		"prefix": "tsShapePolygon",
		"description": "(20 OPS) function string tsShapePolygon(Index, Vertex1, Vertex2, Vertex3)",
		"body": "tsShapePolygon(${1:Index}, ${2:Vertex1}, ${3:Vertex2}, ${4:Vertex3})"
	},
	"setElement(m:nnn)": {
		"scope": "source.e2",
		"prefix": "setElement",
		"description": "(5 OPS) function matrix setElement(Rv2, Rv3, Rv4)",
		"body": "setElement(${1:Rv2}, ${2:Rv3}, ${3:Rv4})"
	},
	"op:mul(nxm4)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function matrix4 op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"fileListClk()": {
		"scope": "source.e2",
		"prefix": "fileListClk",
		"description": "(5 OPS) function normal fileListClk()",
		"body": "fileListClk()"
	},
	"tsShapeCreate(nsnnvvvavvv)": {
		"scope": "source.e2",
		"prefix": "tsShapeCreate",
		"description": "(20 OPS) function string tsShapeCreate(Index, Model, Radius, Rotation, Pos, Normal, Size, Ang, Vertex1, Vertex2, Vertex3)",
		"body": "tsShapeCreate(${1:Index}, ${2:Model}, ${3:Radius}, ${4:Rotation}, ${5:Pos}, ${6:Normal}, ${7:Size}, ${8:Ang}, ${9:Vertex1}, ${10:Vertex2}, ${11:Vertex3})"
	},
	"runOnSignal(snn)": {
		"scope": "source.e2",
		"prefix": "runOnSignal",
		"description": "(5 OPS) function void runOnSignal(Name, Scope, Activate)",
		"body": "runOnSignal(${1:Name}, ${2:Scope}, ${3:Activate})"
	},
	"egpQueueClk()": {
		"scope": "source.e2",
		"prefix": "egpQueueClk",
		"description": "(10 OPS) function normal egpQueueClk()",
		"body": "egpQueueClk()"
	},
	"getBias(xsc:)": {
		"scope": "source.e2",
		"prefix": "getBias",
		"description": "(3 OPS) function normal getBias(This)",
		"body": "getBias(${1:This})"
	},
	"x(m:)": {
		"scope": "source.e2",
		"prefix": "x",
		"description": "(5 OPS) function vector x(This)",
		"body": "x(${1:This})"
	},
	"rayDiv(xft:v)": {
		"scope": "source.e2",
		"prefix": "rayDiv",
		"description": "(3 OPS) function ftrace rayDiv(Vv)",
		"body": "rayDiv(${1:Vv})"
	},
	"op:idx(t=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function table op:idx()",
		"body": "op:idx()"
	},
	"add(t:t)": {
		"scope": "source.e2",
		"prefix": "add",
		"description": "(5 OPS) function table add(Rv2)",
		"body": "add(${1:Rv2})"
	},
	"setEntity(xwl:se)": {
		"scope": "source.e2",
		"prefix": "setEntity",
		"description": "(5 OPS) function entity setEntity()",
		"body": "setEntity()"
	},
	"egpDrawTopLeft(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpDrawTopLeft",
		"description": "(10 OPS) function void egpDrawTopLeft(Onoff)",
		"body": "egpDrawTopLeft(${1:Onoff})"
	},
	"normalized(q:)": {
		"scope": "source.e2",
		"prefix": "normalized",
		"description": "(15 OPS) function quaternion normalized(This)",
		"body": "normalized(${1:This})"
	},
	"findAllowBlockedClasses(n)": {
		"scope": "source.e2",
		"prefix": "findAllowBlockedClasses",
		"description": "(2 OPS) function void findAllowBlockedClasses(Usehardcodedfilter)",
		"body": "findAllowBlockedClasses(${1:Usehardcodedfilter})"
	},
	"lastDeathTime(e)": {
		"scope": "source.e2",
		"prefix": "lastDeathTime",
		"description": "(5 OPS) function normal lastDeathTime(Ply)",
		"body": "lastDeathTime(${1:Ply})"
	},
	"op:add(sn)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(10 OPS) function string op:add()",
		"body": "op:add()"
	},
	"op:inc(n)": {
		"scope": "source.e2",
		"prefix": "op:inc",
		"description": "(1.5 OPS) function void op:inc()",
		"body": "op:inc()"
	},
	"ioGetInputVector4(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputVector4",
		"description": "(5 OPS) function vector4 ioGetInputVector4()",
		"body": "ioGetInputVector4()"
	},
	"setColor(e:vn)": {
		"scope": "source.e2",
		"prefix": "setColor",
		"description": "(2 OPS) function void setColor(C, A)",
		"body": "setColor(${1:C}, ${2:A})"
	},
	"find(s:sn)": {
		"scope": "source.e2",
		"prefix": "find",
		"description": "(20 OPS) function normal find(Needle, Start)",
		"body": "find(${1:Needle}, ${2:Start})"
	},
	"keyLeftTurn(e:)": {
		"scope": "source.e2",
		"prefix": "keyLeftTurn",
		"description": "(2 OPS) function normal keyLeftTurn(This)",
		"body": "keyLeftTurn(${1:This})"
	},
	"setMatrix4(xwl:sxm4)": {
		"scope": "source.e2",
		"prefix": "setMatrix4",
		"description": "(5 OPS) function matrix4 setMatrix4()",
		"body": "setMatrix4()"
	},
	"writeUnicodeString(xwl:snnn)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y, Textcolor)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor})"
	},
	"ioOutputEntities(s)": {
		"scope": "source.e2",
		"prefix": "ioOutputEntities",
		"description": "(10 OPS) function array ioOutputEntities(Output)",
		"body": "ioOutputEntities(${1:Output})"
	},
	"isCrouch(e:)": {
		"scope": "source.e2",
		"prefix": "isCrouch",
		"description": "(5 OPS) function normal isCrouch(This)",
		"body": "isCrouch(${1:This})"
	},
	"forward(e:)": {
		"scope": "source.e2",
		"prefix": "forward",
		"description": "(5 OPS) function vector forward(This)",
		"body": "forward(${1:This})"
	},
	"op:fea(nxv4r)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:idx(b=xgtsb)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xef=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"op:idx(s=xwln)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(20 OPS) function string op:idx(Address)",
		"body": "op:idx(${1:Address})"
	},
	"setElement(xm2:nnn)": {
		"scope": "source.e2",
		"prefix": "setElement",
		"description": "(5 OPS) function matrix2 setElement(Rv2, Rv3, Rv4)",
		"body": "setElement(${1:Rv2}, ${2:Rv3}, ${3:Rv4})"
	},
	"op:div(nxv4)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(4 OPS) function vector4 op:div()",
		"body": "op:div()"
	},
	"setGain(xsc:v)": {
		"scope": "source.e2",
		"prefix": "setGain",
		"description": "(7 OPS) function stcontrol setGain(Vv)",
		"body": "setGain(${1:Vv})"
	},
	"op:idx(n=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"removeTracedata(t:n)": {
		"scope": "source.e2",
		"prefix": "removeTracedata",
		"description": "(8 OPS) function tracedata removeTracedata()",
		"body": "removeTracedata()"
	},
	"aabbMax(e:)": {
		"scope": "source.e2",
		"prefix": "aabbMax",
		"description": "(10 OPS) function vector aabbMax(This)",
		"body": "aabbMax(${1:This})"
	},
	"op:fea(snt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"lastSpawnedPlayer()": {
		"scope": "source.e2",
		"prefix": "lastSpawnedPlayer",
		"description": "(5 OPS) function entity lastSpawnedPlayer()",
		"body": "lastSpawnedPlayer()"
	},
	"teamDeaths(n:)": {
		"scope": "source.e2",
		"prefix": "teamDeaths",
		"description": "(10 OPS) function normal teamDeaths(This)",
		"body": "teamDeaths(${1:This})"
	},
	"holoCreate(nvvaxv4s)": {
		"scope": "source.e2",
		"prefix": "holoCreate",
		"description": "(30 OPS) function entity holoCreate(Index, Position, Scale, Ang, Color, Model)",
		"body": "holoCreate(${1:Index}, ${2:Position}, ${3:Scale}, ${4:Ang}, ${5:Color}, ${6:Model})"
	},
	"nearestPoint(e:v)": {
		"scope": "source.e2",
		"prefix": "nearestPoint",
		"description": "(15 OPS) function vector nearestPoint(Point)",
		"body": "nearestPoint(${1:Point})"
	},
	"npcAttack(e:)": {
		"scope": "source.e2",
		"prefix": "npcAttack",
		"description": "(5 OPS) function void npcAttack(This)",
		"body": "npcAttack(${1:This})"
	},
	"lightDistance(nn)": {
		"scope": "source.e2",
		"prefix": "lightDistance",
		"description": "(8 OPS) function void lightDistance(Index, Distance)",
		"body": "lightDistance(${1:Index}, ${2:Distance})"
	},
	"print(...)": {
		"scope": "source.e2",
		"prefix": "print",
		"description": "(100 OPS) function void print()",
		"body": "print()"
	},
	"setRanger(xwl:sxrd)": {
		"scope": "source.e2",
		"prefix": "setRanger",
		"description": "(5 OPS) function ranger setRanger()",
		"body": "setRanger()"
	},
	"gDeleteAllAng()": {
		"scope": "source.e2",
		"prefix": "gDeleteAllAng",
		"description": "(5 OPS) function void gDeleteAllAng()",
		"body": "gDeleteAllAng()"
	},
	"floor(v)": {
		"scope": "source.e2",
		"prefix": "floor",
		"description": "(6 OPS) function vector floor(Rv1)",
		"body": "floor(${1:Rv1})"
	},
	"op:neq(xm4xm4)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(5 OPS) function normal op:neq(Rv1, Rv2)",
		"body": "op:neq(${1:Rv1}, ${2:Rv2})"
	},
	"op:eq(ee)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(5 OPS) function normal op:eq(Lhs, Rhs)",
		"body": "op:eq(${1:Lhs}, ${2:Rhs})"
	},
	"findClipToName(s)": {
		"scope": "source.e2",
		"prefix": "findClipToName",
		"description": "(5 OPS) function normal findClipToName(Name)",
		"body": "findClipToName(${1:Name})"
	},
	"findCount()": {
		"scope": "source.e2",
		"prefix": "findCount",
		"description": "(2 OPS) function normal findCount()",
		"body": "findCount()"
	},
	"setRadius(xef:n)": {
		"scope": "source.e2",
		"prefix": "setRadius",
		"description": "(1 OPS) function effect setRadius(Radius)",
		"body": "setRadius(${1:Radius})"
	},
	"egpColor4(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpColor4",
		"description": "(5 OPS) function vector4 egpColor4(Index)",
		"body": "egpColor4(${1:Index})"
	},
	"egpRoundedBoxOutline(xwl:nxv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpRoundedBoxOutline",
		"description": "(15 OPS) function void egpRoundedBoxOutline(Index, Pos, Size)",
		"body": "egpRoundedBoxOutline(${1:Index}, ${2:Pos}, ${3:Size})"
	},
	"rope(nevevnnsn)": {
		"scope": "source.e2",
		"prefix": "rope",
		"description": "(30 OPS) function void rope(Index, Ent1, V1, Ent2, V2, Addlength, Width, Mat, Rigid)",
		"body": "rope(${1:Index}, ${2:Ent1}, ${3:V1}, ${4:Ent2}, ${5:V2}, ${6:Addlength}, ${7:Width}, ${8:Mat}, ${9:Rigid})"
	},
	"findIncludePlayer(s)": {
		"scope": "source.e2",
		"prefix": "findIncludePlayer",
		"description": "(10 OPS) function void findIncludePlayer(Name)",
		"body": "findIncludePlayer(${1:Name})"
	},
	"setGainPI(xsc:xv2)": {
		"scope": "source.e2",
		"prefix": "setGainPI",
		"description": "(7 OPS) function stcontrol setGainPI(Vv)",
		"body": "setGainPI(${1:Vv})"
	},
	"setPower(xsc:r)": {
		"scope": "source.e2",
		"prefix": "setPower",
		"description": "(8 OPS) function stcontrol setPower(Aa)",
		"body": "setPower(${1:Aa})"
	},
	"op:mul(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(4 OPS) function vector4 op:mul()",
		"body": "op:mul()"
	},
	"vector2(r:n)": {
		"scope": "source.e2",
		"prefix": "vector2",
		"description": "(5 OPS) function vector2 vector2()",
		"body": "vector2()"
	},
	"rope(nevevnns)": {
		"scope": "source.e2",
		"prefix": "rope",
		"description": "(30 OPS) function void rope(Index, Ent1, V1, Ent2, V2, Addlength, Width, Mat)",
		"body": "rope(${1:Index}, ${2:Ent1}, ${3:V1}, ${4:Ent2}, ${5:V2}, ${6:Addlength}, ${7:Width}, ${8:Mat})"
	},
	"op:def(n)": {
		"scope": "source.e2",
		"prefix": "op:def",
		"description": "(3 OPS) function void op:def()",
		"body": "op:def()"
	},
	"op:exp(nn)": {
		"scope": "source.e2",
		"prefix": "op:exp",
		"description": "(1 OPS) function normal op:exp()",
		"body": "op:exp()"
	},
	"ceil(nn)": {
		"scope": "source.e2",
		"prefix": "ceil",
		"description": "(2 OPS) function normal ceil(Value, Decimals)",
		"body": "ceil(${1:Value}, ${2:Decimals})"
	},
	"op:ass(xm2)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(5 OPS) function matrix2 op:ass()",
		"body": "op:ass()"
	},
	"inf()": {
		"scope": "source.e2",
		"prefix": "inf",
		"description": "(2 OPS) function normal inf()",
		"body": "inf()"
	},
	"tickClk()": {
		"scope": "source.e2",
		"prefix": "tickClk",
		"description": "(1 OPS) function normal tickClk()",
		"body": "tickClk()"
	},
	"toLocal(vava)": {
		"scope": "source.e2",
		"prefix": "toLocal",
		"description": "(15 OPS) function vector toLocal(Localpos, Localang, Worldpos, Worldang)",
		"body": "toLocal(${1:Localpos}, ${2:Localang}, ${3:Worldpos}, ${4:Worldang})"
	},
	"setFTrace(e:v)": {
		"scope": "source.e2",
		"prefix": "setFTrace",
		"description": "(20 OPS) function ftrace setFTrace(Vp)",
		"body": "setFTrace(${1:Vp})"
	},
	"op:div(xv2n)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function vector2 op:div()",
		"body": "op:div()"
	},
	"op:ass(v)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(2 OPS) function vector op:ass()",
		"body": "op:ass()"
	},
	"tan(c)": {
		"scope": "source.e2",
		"prefix": "tan",
		"description": "(3 OPS) function complex tan(Z)",
		"body": "tan(${1:Z})"
	},
	"signalClk(sn)": {
		"scope": "source.e2",
		"prefix": "signalClk",
		"description": "(1 OPS) function normal signalClk(Name, Scope)",
		"body": "signalClk(${1:Name}, ${2:Scope})"
	},
	"setPowerP(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setPowerP",
		"description": "(8 OPS) function stcontrol setPowerP(Np)",
		"body": "setPowerP(${1:Np})"
	},
	"addEntHitSkip(xft:e)": {
		"scope": "source.e2",
		"prefix": "addEntHitSkip",
		"description": "(3 OPS) function ftrace addEntHitSkip(Ve)",
		"body": "addEntHitSkip(${1:Ve})"
	},
	"stcontrol(r:n)": {
		"scope": "source.e2",
		"prefix": "stcontrol",
		"description": "(5 OPS) function stcontrol stcontrol()",
		"body": "stcontrol()"
	},
	"getDirWorld(xft:a)": {
		"scope": "source.e2",
		"prefix": "getDirWorld",
		"description": "(3 OPS) function vector getDirWorld(Va)",
		"body": "getDirWorld(${1:Va})"
	},
	"inputClkName()": {
		"scope": "source.e2",
		"prefix": "inputClkName",
		"description": "(1 OPS) function string inputClkName()",
		"body": "inputClkName()"
	},
	"select(nxtd...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function tracedata select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"resState(xsc:)": {
		"scope": "source.e2",
		"prefix": "resState",
		"description": "(3 OPS) function stcontrol resState(This)",
		"body": "resState(${1:This})"
	},
	"setIsActive(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setIsActive",
		"description": "(3 OPS) function stcontrol setIsActive(Nn)",
		"body": "setIsActive(${1:Nn})"
	},
	"mod(aa)": {
		"scope": "source.e2",
		"prefix": "mod",
		"description": "(5 OPS) function angle mod(Rv1, Rv2)",
		"body": "mod(${1:Rv1}, ${2:Rv2})"
	},
	"op:sub(nq)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(4 OPS) function quaternion op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"soundPlay(e:sns)": {
		"scope": "source.e2",
		"prefix": "soundPlay",
		"description": "(25 OPS) function void soundPlay(Index, Duration, Path)",
		"body": "soundPlay(${1:Index}, ${2:Duration}, ${3:Path})"
	},
	"findClearBlackList()": {
		"scope": "source.e2",
		"prefix": "findClearBlackList",
		"description": "(10 OPS) function void findClearBlackList()",
		"body": "findClearBlackList()"
	},
	"holoClip(nnvvn)": {
		"scope": "source.e2",
		"prefix": "holoClip",
		"description": "(15 OPS) function void holoClip(Index, Clipidx, Origin, Normal, Isglobal)",
		"body": "holoClip(${1:Index}, ${2:Clipidx}, ${3:Origin}, ${4:Normal}, ${5:Isglobal})"
	},
	"eyeTrace(e:)": {
		"scope": "source.e2",
		"prefix": "eyeTrace",
		"description": "(20 OPS) function ranger eyeTrace(This)",
		"body": "eyeTrace(${1:This})"
	},
	"op:sub(cn)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(2 OPS) function complex op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"op:idx(xrd=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"holoCreate(nv)": {
		"scope": "source.e2",
		"prefix": "holoCreate",
		"description": "(30 OPS) function entity holoCreate(Index, Position)",
		"body": "holoCreate(${1:Index}, ${2:Position})"
	},
	"team(e:)": {
		"scope": "source.e2",
		"prefix": "team",
		"description": "(5 OPS) function normal team(This)",
		"body": "team(${1:This})"
	},
	"gRemoveAllFtraces()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllFtraces",
		"description": "(5 OPS) function void gRemoveAllFtraces()",
		"body": "gRemoveAllFtraces()"
	},
	"keyRight(e:)": {
		"scope": "source.e2",
		"prefix": "keyRight",
		"description": "(2 OPS) function normal keyRight(This)",
		"body": "keyRight(${1:This})"
	},
	"pushNumber(t:n)": {
		"scope": "source.e2",
		"prefix": "pushNumber",
		"description": "(10 OPS) function void pushNumber()",
		"body": "pushNumber()"
	},
	"op:div(mn)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(5 OPS) function matrix op:div(Rv1, Rv2)",
		"body": "op:div(${1:Rv1}, ${2:Rv2})"
	},
	"op:idx(r=tsr)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function array op:idx()",
		"body": "op:idx()"
	},
	"dsSend(ssnr)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"op:mul(xv2n)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function vector2 op:mul()",
		"body": "op:mul()"
	},
	"ioSetOutput(sxm4)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function matrix4 ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"teamColor(n)": {
		"scope": "source.e2",
		"prefix": "teamColor",
		"description": "(5 OPS) function vector teamColor(Index)",
		"body": "teamColor(${1:Index})"
	},
	"toString(xv2:)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(5 OPS) function string toString(V)",
		"body": "toString(${1:V})"
	},
	"setRow(xm2:nxv2)": {
		"scope": "source.e2",
		"prefix": "setRow",
		"description": "(5 OPS) function matrix2 setRow(Rv2, Rv3)",
		"body": "setRow(${1:Rv2}, ${2:Rv3})"
	},
	"getSkin(e:)": {
		"scope": "source.e2",
		"prefix": "getSkin",
		"description": "(10 OPS) function normal getSkin(This)",
		"body": "getSkin(${1:This})"
	},
	"axis(evevn)": {
		"scope": "source.e2",
		"prefix": "axis",
		"description": "(30 OPS) function void axis(Ent1, V1, Ent2, V2, Friction)",
		"body": "axis(${1:Ent1}, ${2:V1}, ${3:Ent2}, ${4:V2}, ${5:Friction})"
	},
	"aabbWorldMin(e:)": {
		"scope": "source.e2",
		"prefix": "aabbWorldMin",
		"description": "(10 OPS) function vector aabbWorldMin(This)",
		"body": "aabbWorldMin(${1:This})"
	},
	"egpAlign(xwl:nnn)": {
		"scope": "source.e2",
		"prefix": "egpAlign",
		"description": "(10 OPS) function void egpAlign(Index, Halign, Valign)",
		"body": "egpAlign(${1:Index}, ${2:Halign}, ${3:Valign})"
	},
	"setY(xv4:n)": {
		"scope": "source.e2",
		"prefix": "setY",
		"description": "(3 OPS) function vector4 setY()",
		"body": "setY()"
	},
	"op:bshl(nn)": {
		"scope": "source.e2",
		"prefix": "op:bshl",
		"description": "(2 OPS) function normal op:bshl(A, B)",
		"body": "op:bshl(${1:A}, ${2:B})"
	},
	"soundPitch(nnn)": {
		"scope": "source.e2",
		"prefix": "soundPitch",
		"description": "(5 OPS) function void soundPitch(Index, Pitch, Fadetime)",
		"body": "soundPitch(${1:Index}, ${2:Pitch}, ${3:Fadetime})"
	},
	"setEntity(xef:e)": {
		"scope": "source.e2",
		"prefix": "setEntity",
		"description": "(1 OPS) function effect setEntity(Ent)",
		"body": "setEntity(${1:Ent})"
	},
	"op:mul(mn)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function matrix op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"toAngle(v:)": {
		"scope": "source.e2",
		"prefix": "toAngle",
		"description": "(3 OPS) function angle toAngle(This)",
		"body": "toAngle(${1:This})"
	},
	"setColumn(xm2:nnn)": {
		"scope": "source.e2",
		"prefix": "setColumn",
		"description": "(5 OPS) function matrix2 setColumn(Rv2, Rv3, Rv4)",
		"body": "setColumn(${1:Rv2}, ${2:Rv3}, ${3:Rv4})"
	},
	"soundStop(n)": {
		"scope": "source.e2",
		"prefix": "soundStop",
		"description": "(5 OPS) function void soundStop(Index)",
		"body": "soundStop(${1:Index})"
	},
	"egpLine(xwl:nxv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpLine",
		"description": "(15 OPS) function void egpLine(Index, Pos1, Pos2)",
		"body": "egpLine(${1:Index}, ${2:Pos1}, ${3:Pos2})"
	},
	"egpObjectTypes(xwl:)": {
		"scope": "source.e2",
		"prefix": "egpObjectTypes",
		"description": "(1 OPS) function array egpObjectTypes(This)",
		"body": "egpObjectTypes(${1:This})"
	},
	"setQuaternion(xwl:sq)": {
		"scope": "source.e2",
		"prefix": "setQuaternion",
		"description": "(5 OPS) function quaternion setQuaternion()",
		"body": "setQuaternion()"
	},
	"egpScrSize(e)": {
		"scope": "source.e2",
		"prefix": "egpScrSize",
		"description": "(10 OPS) function vector2 egpScrSize(Ply)",
		"body": "egpScrSize(${1:Ply})"
	},
	"holoCreate(n)": {
		"scope": "source.e2",
		"prefix": "holoCreate",
		"description": "(30 OPS) function entity holoCreate(Index)",
		"body": "holoCreate(${1:Index})"
	},
	"gGetGroup()": {
		"scope": "source.e2",
		"prefix": "gGetGroup",
		"description": "(1 OPS) function string gGetGroup()",
		"body": "gGetGroup()"
	},
	"matrix()": {
		"scope": "source.e2",
		"prefix": "matrix",
		"description": "(1 OPS) function matrix matrix()",
		"body": "matrix()"
	},
	"setPowerPD(xsc:r)": {
		"scope": "source.e2",
		"prefix": "setPowerPD",
		"description": "(8 OPS) function stcontrol setPowerPD(Aa)",
		"body": "setPowerPD(${1:Aa})"
	},
	"toString(a:)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(5 OPS) function string toString(A)",
		"body": "toString(${1:A})"
	},
	"getFractionLS(xft:)": {
		"scope": "source.e2",
		"prefix": "getFractionLS",
		"description": "(3 OPS) function normal getFractionLS(This)",
		"body": "getFractionLS(${1:This})"
	},
	"toUnicodeByte(s)": {
		"scope": "source.e2",
		"prefix": "toUnicodeByte",
		"description": "(20 OPS) function normal toUnicodeByte()",
		"body": "toUnicodeByte()"
	},
	"setFTrace(e:n)": {
		"scope": "source.e2",
		"prefix": "setFTrace",
		"description": "(20 OPS) function ftrace setFTrace(Nl)",
		"body": "setFTrace(${1:Nl})"
	},
	"matchFirst(s:s)": {
		"scope": "source.e2",
		"prefix": "matchFirst",
		"description": "(10 OPS) function string matchFirst(Pattern)",
		"body": "matchFirst(${1:Pattern})"
	},
	"op:fea(sxm4t)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"popVector4(r:)": {
		"scope": "source.e2",
		"prefix": "popVector4",
		"description": "(7 OPS) function vector4 popVector4()",
		"body": "popVector4()"
	},
	"distance(xtd:)": {
		"scope": "source.e2",
		"prefix": "distance",
		"description": "(20 OPS) function normal distance(This)",
		"body": "distance(${1:This})"
	},
	"attachments(e:)": {
		"scope": "source.e2",
		"prefix": "attachments",
		"description": "(20 OPS) function array attachments(This)",
		"body": "attachments(${1:This})"
	},
	"op:is(m)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(5 OPS) function normal op:is(Rv1)",
		"body": "op:is(${1:Rv1})"
	},
	"op:idx(a=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"op:gth(aa)": {
		"scope": "source.e2",
		"prefix": "op:gth",
		"description": "(3 OPS) function normal op:gth(Rv1, Rv2)",
		"body": "op:gth(${1:Rv1}, ${2:Rv2})"
	},
	"eyeAngles(e:)": {
		"scope": "source.e2",
		"prefix": "eyeAngles",
		"description": "(8 OPS) function angle eyeAngles(This)",
		"body": "eyeAngles(${1:This})"
	},
	"op:idx(q=xwlsq)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"smpWorld(xft:a)": {
		"scope": "source.e2",
		"prefix": "smpWorld",
		"description": "(12 OPS) function ftrace smpWorld(Va)",
		"body": "smpWorld(${1:Va})"
	},
	"propDrag(e:n)": {
		"scope": "source.e2",
		"prefix": "propDrag",
		"description": "(10 OPS) function void propDrag(Drag)",
		"body": "propDrag(${1:Drag})"
	},
	"op:brk()": {
		"scope": "source.e2",
		"prefix": "op:brk",
		"description": "(2 OPS) function void op:brk()",
		"body": "op:brk()"
	},
	"popComplex(t:)": {
		"scope": "source.e2",
		"prefix": "popComplex",
		"description": "(10 OPS) function complex popComplex()",
		"body": "popComplex()"
	},
	"getBone(xft:)": {
		"scope": "source.e2",
		"prefix": "getBone",
		"description": "(3 OPS) function normal getBone(This)",
		"body": "getBone(${1:This})"
	},
	"last()": {
		"scope": "source.e2",
		"prefix": "last",
		"description": "(1 OPS) function normal last()",
		"body": "last()"
	},
	"getEntity(xft:)": {
		"scope": "source.e2",
		"prefix": "getEntity",
		"description": "(3 OPS) function entity getEntity(This)",
		"body": "getEntity(${1:This})"
	},
	"toRad(xv4)": {
		"scope": "source.e2",
		"prefix": "toRad",
		"description": "(5 OPS) function vector4 toRad(Xv4)",
		"body": "toRad(${1:Xv4})"
	},
	"setAng(e:a)": {
		"scope": "source.e2",
		"prefix": "setAng",
		"description": "(20 OPS) function void setAng(Rot)",
		"body": "setAng(${1:Rot})"
	},
	"fraction(xrd:)": {
		"scope": "source.e2",
		"prefix": "fraction",
		"description": "(2 OPS) function normal fraction(This)",
		"body": "fraction(${1:This})"
	},
	"setWirelink(xwl:sxwl)": {
		"scope": "source.e2",
		"prefix": "setWirelink",
		"description": "(5 OPS) function wirelink setWirelink()",
		"body": "setWirelink()"
	},
	"egpFidelity(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpFidelity",
		"description": "(10 OPS) function normal egpFidelity(Index)",
		"body": "egpFidelity(${1:Index})"
	},
	"comp()": {
		"scope": "source.e2",
		"prefix": "comp",
		"description": "(2 OPS) function complex comp()",
		"body": "comp()"
	},
	"op:idx(m=xgtnm)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"getPowerPI(xsc:)": {
		"scope": "source.e2",
		"prefix": "getPowerPI",
		"description": "(3 OPS) function vector2 getPowerPI(This)",
		"body": "getPowerPI(${1:This})"
	},
	"op:gth(ss)": {
		"scope": "source.e2",
		"prefix": "op:gth",
		"description": "(3 OPS) function normal op:gth()",
		"body": "op:gth()"
	},
	"egpBoxOutline(xwl:nxv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpBoxOutline",
		"description": "(15 OPS) function void egpBoxOutline(Index, Pos, Size)",
		"body": "egpBoxOutline(${1:Index}, ${2:Pos}, ${3:Size})"
	},
	"removeEntity(t:s)": {
		"scope": "source.e2",
		"prefix": "removeEntity",
		"description": "(8 OPS) function entity removeEntity()",
		"body": "removeEntity()"
	},
	"ioSetOutput(sxsc)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function stcontrol ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"dumpItem(xsc:s)": {
		"scope": "source.e2",
		"prefix": "dumpItem",
		"description": "(15 OPS) function stcontrol dumpItem(Sn)",
		"body": "dumpItem(${1:Sn})"
	},
	"egpLoadFrame(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpLoadFrame",
		"description": "(15 OPS) function void egpLoadFrame(Index)",
		"body": "egpLoadFrame(${1:Index})"
	},
	"setBase(xft:e)": {
		"scope": "source.e2",
		"prefix": "setBase",
		"description": "(3 OPS) function ftrace setBase(Ee)",
		"body": "setBase(${1:Ee})"
	},
	"findDisallowEntity(e)": {
		"scope": "source.e2",
		"prefix": "findDisallowEntity",
		"description": "(10 OPS) function void findDisallowEntity(Ent)",
		"body": "findDisallowEntity(${1:Ent})"
	},
	"holoBoneScale(nnv)": {
		"scope": "source.e2",
		"prefix": "holoBoneScale",
		"description": "(15 OPS) function void holoBoneScale(Index, Boneindex, Scale)",
		"body": "holoBoneScale(${1:Index}, ${2:Boneindex}, ${3:Scale})"
	},
	"floor(vn)": {
		"scope": "source.e2",
		"prefix": "floor",
		"description": "(6 OPS) function vector floor(Rv1, Decimals)",
		"body": "floor(${1:Rv1}, ${2:Decimals})"
	},
	"rangerHull(nnnvv)": {
		"scope": "source.e2",
		"prefix": "rangerHull",
		"description": "(20 OPS) function ranger rangerHull(Distance, Xskew, Yskew, Mins, Maxs)",
		"body": "rangerHull(${1:Distance}, ${2:Xskew}, ${3:Yskew}, ${4:Mins}, ${5:Maxs})"
	},
	"op:div(qq)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(10 OPS) function quaternion op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"gRemoveAllTracedatas(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllTracedatas",
		"description": "(5 OPS) function void gRemoveAllTracedatas()",
		"body": "gRemoveAllTracedatas()"
	},
	"angles(e:)": {
		"scope": "source.e2",
		"prefix": "angles",
		"description": "(10 OPS) function angle angles(This)",
		"body": "angles(${1:This})"
	},
	"cameraZoom(nn)": {
		"scope": "source.e2",
		"prefix": "cameraZoom",
		"description": "(15 OPS) function void cameraZoom(Index, Zoom)",
		"body": "cameraZoom(${1:Index}, ${2:Zoom})"
	},
	"op:mul(an)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function angle op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"remWindupU(xsc:)": {
		"scope": "source.e2",
		"prefix": "remWindupU",
		"description": "(3 OPS) function stcontrol remWindupU(This)",
		"body": "remWindupU(${1:This})"
	},
	"changed(xv2)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"bShl(nn)": {
		"scope": "source.e2",
		"prefix": "bShl",
		"description": "(2 OPS) function normal bShl(A, B)",
		"body": "bShl(${1:A}, ${2:B})"
	},
	"outerProduct(v:v)": {
		"scope": "source.e2",
		"prefix": "outerProduct",
		"description": "(10 OPS) function matrix outerProduct(Other)",
		"body": "outerProduct(${1:Other})"
	},
	"lastDeathVictim()": {
		"scope": "source.e2",
		"prefix": "lastDeathVictim",
		"description": "(5 OPS) function entity lastDeathVictim()",
		"body": "lastDeathVictim()"
	},
	"holoIndex(e)": {
		"scope": "source.e2",
		"prefix": "holoIndex",
		"description": "(30 OPS) function normal holoIndex(Ent)",
		"body": "holoIndex(${1:Ent})"
	},
	"remoteSetCode(e:st)": {
		"scope": "source.e2",
		"prefix": "remoteSetCode",
		"description": "(250 OPS) function void remoteSetCode(Main, Includes)",
		"body": "remoteSetCode(${1:Main}, ${2:Includes})"
	},
	"rayDiv(xft:n)": {
		"scope": "source.e2",
		"prefix": "rayDiv",
		"description": "(3 OPS) function ftrace rayDiv(Nn)",
		"body": "rayDiv(${1:Nn})"
	},
	"getTimeOld(xsc:)": {
		"scope": "source.e2",
		"prefix": "getTimeOld",
		"description": "(3 OPS) function normal getTimeOld(This)",
		"body": "getTimeOld(${1:This})"
	},
	"getCopy(xft:e)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Ee)",
		"body": "getCopy(${1:Ee})"
	},
	"sum(r:)": {
		"scope": "source.e2",
		"prefix": "sum",
		"description": "(1 OPS) function normal sum(This)",
		"body": "sum(${1:This})"
	},
	"op:eq(cn)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(2 OPS) function normal op:eq(Lhs, Rhs)",
		"body": "op:eq(${1:Lhs}, ${2:Rhs})"
	},
	"matrix4(xwl:s)": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(5 OPS) function matrix4 matrix4()",
		"body": "matrix4()"
	},
	"replaceRE(s:ss)": {
		"scope": "source.e2",
		"prefix": "replaceRE",
		"description": "(20 OPS) function string replaceRE(Pattern, New)",
		"body": "replaceRE(${1:Pattern}, ${2:New})"
	},
	"op:idx(xv4n)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(4 OPS) function normal op:idx(Index)",
		"body": "op:idx(${1:Index})"
	},
	"setPower(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "setPower",
		"description": "(8 OPS) function stcontrol setPower(Np, Ni, Nd)",
		"body": "setPower(${1:Np}, ${2:Ni}, ${3:Nd})"
	},
	"dsSend(ssxsc)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"sech(n)": {
		"scope": "source.e2",
		"prefix": "sech",
		"description": "(2 OPS) function normal sech()",
		"body": "sech()"
	},
	"name(e:)": {
		"scope": "source.e2",
		"prefix": "name",
		"description": "(5 OPS) function string name(This)",
		"body": "name(${1:This})"
	},
	"constraintBreak(e:se)": {
		"scope": "source.e2",
		"prefix": "constraintBreak",
		"description": "(5 OPS) function void constraintBreak(Type, Ent2)",
		"body": "constraintBreak(${1:Type}, ${2:Ent2})"
	},
	"signalSend(sn)": {
		"scope": "source.e2",
		"prefix": "signalSend",
		"description": "(20 OPS) function void signalSend(Name, Scope)",
		"body": "signalSend(${1:Name}, ${2:Scope})"
	},
	"removeNumber(t:s)": {
		"scope": "source.e2",
		"prefix": "removeNumber",
		"description": "(8 OPS) function normal removeNumber()",
		"body": "removeNumber()"
	},
	"tuneAH(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "tuneAH",
		"description": "(7 OPS) function stcontrol tuneAH(Nk, Nt, Nl)",
		"body": "tuneAH(${1:Nk}, ${2:Nt}, ${3:Nl})"
	},
	"angVelVector(b:)": {
		"scope": "source.e2",
		"prefix": "angVelVector",
		"description": "(1 OPS) function vector angVelVector(This)",
		"body": "angVelVector(${1:This})"
	},
	"op:eq(xm2xm2)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(5 OPS) function normal op:eq(Rv1, Rv2)",
		"body": "op:eq(${1:Rv1}, ${2:Rv2})"
	},
	"winch(nevevn)": {
		"scope": "source.e2",
		"prefix": "winch",
		"description": "(30 OPS) function void winch(Index, Ent1, V1, Ent2, V2, Width)",
		"body": "winch(${1:Index}, ${2:Ent1}, ${3:V1}, ${4:Ent2}, ${5:V2}, ${6:Width})"
	},
	"sortByDistance(xtd:v)": {
		"scope": "source.e2",
		"prefix": "sortByDistance",
		"description": "(20 OPS) function normal sortByDistance(Pos)",
		"body": "sortByDistance(${1:Pos})"
	},
	"signalClearOnRemove()": {
		"scope": "source.e2",
		"prefix": "signalClearOnRemove",
		"description": "(10 OPS) function void signalClearOnRemove()",
		"body": "signalClearOnRemove()"
	},
	"qMod(q)": {
		"scope": "source.e2",
		"prefix": "qMod",
		"description": "(2 OPS) function quaternion qMod(Q)",
		"body": "qMod(${1:Q})"
	},
	"coneSphereIntersection(vvvnn)": {
		"scope": "source.e2",
		"prefix": "coneSphereIntersection",
		"description": "(20 OPS) function vector coneSphereIntersection(Start, Dir, Pos, Radius, Ang)",
		"body": "coneSphereIntersection(${1:Start}, ${2:Dir}, ${3:Pos}, ${4:Radius}, ${5:Ang})"
	},
	"getMaterials(e:)": {
		"scope": "source.e2",
		"prefix": "getMaterials",
		"description": "(20 OPS) function array getMaterials(This)",
		"body": "getMaterials(${1:This})"
	},
	"op:mul(mv)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function vector op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"egpUnParent(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpUnParent",
		"description": "(10 OPS) function void egpUnParent(Index)",
		"body": "egpUnParent(${1:Index})"
	},
	"setX(xv2:n)": {
		"scope": "source.e2",
		"prefix": "setX",
		"description": "(1 OPS) function vector2 setX()",
		"body": "setX()"
	},
	"attachmentAng(e:n)": {
		"scope": "source.e2",
		"prefix": "attachmentAng",
		"description": "(15 OPS) function angle attachmentAng(Attachmentid)",
		"body": "attachmentAng(${1:Attachmentid})"
	},
	"dsSend(ssxrd)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"getSurfPropsID(xft:)": {
		"scope": "source.e2",
		"prefix": "getSurfPropsID",
		"description": "(3 OPS) function normal getSurfPropsID(This)",
		"body": "getSurfPropsID(${1:This})"
	},
	"dsSendDirect(ses)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"setColumn(xm2:nxv2)": {
		"scope": "source.e2",
		"prefix": "setColumn",
		"description": "(5 OPS) function matrix2 setColumn(Rv2, Rv3)",
		"body": "setColumn(${1:Rv2}, ${2:Rv3})"
	},
	"setPowerID(xsc:r)": {
		"scope": "source.e2",
		"prefix": "setPowerID",
		"description": "(8 OPS) function stcontrol setPowerID(Aa)",
		"body": "setPowerID(${1:Aa})"
	},
	"gRemoveAllEffects()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllEffects",
		"description": "(5 OPS) function void gRemoveAllEffects()",
		"body": "gRemoveAllEffects()"
	},
	"op:fea(nxeft)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"insertEntity(r:ne)": {
		"scope": "source.e2",
		"prefix": "insertEntity",
		"description": "(7 OPS) function entity insertEntity()",
		"body": "insertEntity()"
	},
	"removeTrails(e:)": {
		"scope": "source.e2",
		"prefix": "removeTrails",
		"description": "(5 OPS) function void removeTrails(This)",
		"body": "removeTrails(${1:This})"
	},
	"dumpItem(xft:n)": {
		"scope": "source.e2",
		"prefix": "dumpItem",
		"description": "(15 OPS) function ftrace dumpItem(Nn)",
		"body": "dumpItem(${1:Nn})"
	},
	"findAllowEntity(e)": {
		"scope": "source.e2",
		"prefix": "findAllowEntity",
		"description": "(10 OPS) function void findAllowEntity(Ent)",
		"body": "findAllowEntity(${1:Ent})"
	},
	"newFTrace(vn)": {
		"scope": "source.e2",
		"prefix": "newFTrace",
		"description": "(20 OPS) function ftrace newFTrace(Vp, Nl)",
		"body": "newFTrace(${1:Vp}, ${2:Nl})"
	},
	"lightRemainingSpawns()": {
		"scope": "source.e2",
		"prefix": "lightRemainingSpawns",
		"description": "(2 OPS) function normal lightRemainingSpawns()",
		"body": "lightRemainingSpawns()"
	},
	"op:idx(m=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"op:sub(na)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(2 OPS) function angle op:sub(Rv1, Rv2)",
		"body": "op:sub(${1:Rv1}, ${2:Rv2})"
	},
	"getTimeNow(xsc:)": {
		"scope": "source.e2",
		"prefix": "getTimeNow",
		"description": "(3 OPS) function normal getTimeNow(This)",
		"body": "getTimeNow(${1:This})"
	},
	"unset(r:n)": {
		"scope": "source.e2",
		"prefix": "unset",
		"description": "(2 OPS) function normal unset(Index)",
		"body": "unset(${1:Index})"
	},
	"op:idx(b=xgtnb)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"fileRead()": {
		"scope": "source.e2",
		"prefix": "fileRead",
		"description": "(10 OPS) function string fileRead()",
		"body": "fileRead()"
	},
	"op:idx(v=xwlsv)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"replace(s:ss)": {
		"scope": "source.e2",
		"prefix": "replace",
		"description": "(20 OPS) function string replace(Needle, New)",
		"body": "replace(${1:Needle}, ${2:New})"
	},
	"lightParent(nn)": {
		"scope": "source.e2",
		"prefix": "lightParent",
		"description": "(10 OPS) function void lightParent(Index, Parent)",
		"body": "lightParent(${1:Index}, ${2:Parent})"
	},
	"propPhysicalMaterial(e:s)": {
		"scope": "source.e2",
		"prefix": "propPhysicalMaterial",
		"description": "(10 OPS) function void propPhysicalMaterial(Physprop)",
		"body": "propPhysicalMaterial(${1:Physprop})"
	},
	"minFrictionMass()": {
		"scope": "source.e2",
		"prefix": "minFrictionMass",
		"description": "(1 OPS) function normal minFrictionMass()",
		"body": "minFrictionMass()"
	},
	"changed(c)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"play(xef:s)": {
		"scope": "source.e2",
		"prefix": "play",
		"description": "(1 OPS) function void play(Name)",
		"body": "play(${1:Name})"
	},
	"remHitOnly(xft:ss)": {
		"scope": "source.e2",
		"prefix": "remHitOnly",
		"description": "(3 OPS) function ftrace remHitOnly(Sm, Vs)",
		"body": "remHitOnly(${1:Sm}, ${2:Vs})"
	},
	"egpAddVertices(xwl:nr)": {
		"scope": "source.e2",
		"prefix": "egpAddVertices",
		"description": "(20 OPS) function void egpAddVertices(Index, Args)",
		"body": "egpAddVertices(${1:Index}, ${2:Args})"
	},
	"attachmentPos(e:s)": {
		"scope": "source.e2",
		"prefix": "attachmentPos",
		"description": "(15 OPS) function vector attachmentPos(Attachmentname)",
		"body": "attachmentPos(${1:Attachmentname})"
	},
	"getErrorDelta(xsc:)": {
		"scope": "source.e2",
		"prefix": "getErrorDelta",
		"description": "(3 OPS) function normal getErrorDelta(This)",
		"body": "getErrorDelta(${1:This})"
	},
	"dsSendDirect(sexft)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"setGainPD(xsc:xv2)": {
		"scope": "source.e2",
		"prefix": "setGainPD",
		"description": "(7 OPS) function stcontrol setGainPD(Vv)",
		"body": "setGainPD(${1:Vv})"
	},
	"boxCenter(e:)": {
		"scope": "source.e2",
		"prefix": "boxCenter",
		"description": "(10 OPS) function vector boxCenter(This)",
		"body": "boxCenter(${1:This})"
	},
	"arg(c)": {
		"scope": "source.e2",
		"prefix": "arg",
		"description": "(2 OPS) function normal arg(Z)",
		"body": "arg(${1:Z})"
	},
	"op:idx(xv4nn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(4 OPS) function normal op:idx(Index, Value)",
		"body": "op:idx(${1:Index}, ${2:Value})"
	},
	"isIgnoreWorld(xft:)": {
		"scope": "source.e2",
		"prefix": "isIgnoreWorld",
		"description": "(3 OPS) function normal isIgnoreWorld(This)",
		"body": "isIgnoreWorld(${1:This})"
	},
	"abs(c)": {
		"scope": "source.e2",
		"prefix": "abs",
		"description": "(2 OPS) function normal abs(Z)",
		"body": "abs(${1:Z})"
	},
	"serverUUID()": {
		"scope": "source.e2",
		"prefix": "serverUUID",
		"description": "(1 OPS) function string serverUUID()",
		"body": "serverUUID()"
	},
	"setTimeSample(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setTimeSample",
		"description": "(3 OPS) function stcontrol setTimeSample(Nt)",
		"body": "setTimeSample(${1:Nt})"
	},
	"op:idx(qn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(4 OPS) function normal op:idx(Index)",
		"body": "op:idx(${1:Index})"
	},
	"angVelVector(e:)": {
		"scope": "source.e2",
		"prefix": "angVelVector",
		"description": "(5 OPS) function vector angVelVector(This)",
		"body": "angVelVector(${1:This})"
	},
	"matrix2()": {
		"scope": "source.e2",
		"prefix": "matrix2",
		"description": "(1 OPS) function matrix2 matrix2()",
		"body": "matrix2()"
	},
	"setNumber(xwl:sn)": {
		"scope": "source.e2",
		"prefix": "setNumber",
		"description": "(5 OPS) function normal setNumber()",
		"body": "setNumber()"
	},
	"propSpawnUndo(n)": {
		"scope": "source.e2",
		"prefix": "propSpawnUndo",
		"description": "(1 OPS) function void propSpawnUndo(On)",
		"body": "propSpawnUndo(${1:On})"
	},
	"setPowerPD(xsc:xv2)": {
		"scope": "source.e2",
		"prefix": "setPowerPD",
		"description": "(8 OPS) function stcontrol setPowerPD(Vv)",
		"body": "setPowerPD(${1:Vv})"
	},
	"propDraw(e:n)": {
		"scope": "source.e2",
		"prefix": "propDraw",
		"description": "(10 OPS) function void propDraw(Drawenable)",
		"body": "propDraw(${1:Drawenable})"
	},
	"propSpawn(san)": {
		"scope": "source.e2",
		"prefix": "propSpawn",
		"description": "(40 OPS) function entity propSpawn(Model, Rot, Frozen)",
		"body": "propSpawn(${1:Model}, ${2:Rot}, ${3:Frozen})"
	},
	"pushArray(t:r)": {
		"scope": "source.e2",
		"prefix": "pushArray",
		"description": "(10 OPS) function void pushArray()",
		"body": "pushArray()"
	},
	"getDirWorld(xft:)": {
		"scope": "source.e2",
		"prefix": "getDirWorld",
		"description": "(3 OPS) function vector getDirWorld(This)",
		"body": "getDirWorld(${1:This})"
	},
	"bXor(nn)": {
		"scope": "source.e2",
		"prefix": "bXor",
		"description": "(2 OPS) function normal bXor(A, B)",
		"body": "bXor(${1:A}, ${2:B})"
	},
	"unshiftBone(t:b)": {
		"scope": "source.e2",
		"prefix": "unshiftBone",
		"description": "(10 OPS) function void unshiftBone()",
		"body": "unshiftBone()"
	},
	"egpScale(xwl:xv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpScale",
		"description": "(10 OPS) function void egpScale(Xscale, Yscale)",
		"body": "egpScale(${1:Xscale}, ${2:Yscale})"
	},
	"soundPitch(snn)": {
		"scope": "source.e2",
		"prefix": "soundPitch",
		"description": "(5 OPS) function void soundPitch(Index, Pitch, Fadetime)",
		"body": "soundPitch(${1:Index}, ${2:Pitch}, ${3:Fadetime})"
	},
	"op:idx(xrd=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xgt=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function gtable op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xv4=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"matrix4(a)": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(5 OPS) function matrix4 matrix4(Ang)",
		"body": "matrix4(${1:Ang})"
	},
	"isConstrainedTo(e:sn)": {
		"scope": "source.e2",
		"prefix": "isConstrainedTo",
		"description": "(5 OPS) function entity isConstrainedTo(Constrainttype, Index)",
		"body": "isConstrainedTo(${1:Constrainttype}, ${2:Index})"
	},
	"op:leq(nn)": {
		"scope": "source.e2",
		"prefix": "op:leq",
		"description": "(1.25 OPS) function normal op:leq()",
		"body": "op:leq()"
	},
	"gRemoveAllAngles()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllAngles",
		"description": "(5 OPS) function void gRemoveAllAngles()",
		"body": "gRemoveAllAngles()"
	},
	"clear(t:)": {
		"scope": "source.e2",
		"prefix": "clear",
		"description": "(1 OPS) function void clear(This)",
		"body": "clear(${1:This})"
	},
	"abs(n)": {
		"scope": "source.e2",
		"prefix": "abs",
		"description": "(2 OPS) function normal abs(Value)",
		"body": "abs(${1:Value})"
	},
	"qRotation(vn)": {
		"scope": "source.e2",
		"prefix": "qRotation",
		"description": "(9 OPS) function quaternion qRotation(Axis, Ang)",
		"body": "qRotation(${1:Axis}, ${2:Ang})"
	},
	"cameraPos(nv)": {
		"scope": "source.e2",
		"prefix": "cameraPos",
		"description": "(10 OPS) function void cameraPos(Index, Position)",
		"body": "cameraPos(${1:Index}, ${2:Position})"
	},
	"op:mul(qv)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(9 OPS) function quaternion op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"aabbWorldSize(e:)": {
		"scope": "source.e2",
		"prefix": "aabbWorldSize",
		"description": "(10 OPS) function vector aabbWorldSize(This)",
		"body": "aabbWorldSize(${1:This})"
	},
	"noStControl()": {
		"scope": "source.e2",
		"prefix": "noStControl",
		"description": "(1 OPS) function stcontrol noStControl()",
		"body": "noStControl()"
	},
	"rangerFilter(r)": {
		"scope": "source.e2",
		"prefix": "rangerFilter",
		"description": "(1 OPS) function void rangerFilter(Filter)",
		"body": "rangerFilter(${1:Filter})"
	},
	"op:idx(n=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"op:idx(s=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"egp3DTracker(xwl:nvn)": {
		"scope": "source.e2",
		"prefix": "egp3DTracker",
		"description": "(15 OPS) function void egp3DTracker(Index, Pos, Directionality)",
		"body": "egp3DTracker(${1:Index}, ${2:Pos}, ${3:Directionality})"
	},
	"tsShapeRadius(nn)": {
		"scope": "source.e2",
		"prefix": "tsShapeRadius",
		"description": "(20 OPS) function string tsShapeRadius(Index, Radius)",
		"body": "tsShapeRadius(${1:Index}, ${2:Radius})"
	},
	"removeRanger(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeRanger",
		"description": "(5 OPS) function ranger removeRanger()",
		"body": "removeRanger()"
	},
	"dot(v:v)": {
		"scope": "source.e2",
		"prefix": "dot",
		"description": "(5 OPS) function normal dot(Other)",
		"body": "dot(${1:Other})"
	},
	"newStControl()": {
		"scope": "source.e2",
		"prefix": "newStControl",
		"description": "(20 OPS) function stcontrol newStControl()",
		"body": "newStControl()"
	},
	"readString(xwl:n)": {
		"scope": "source.e2",
		"prefix": "readString",
		"description": "(20 OPS) function string readString(Address)",
		"body": "readString(${1:Address})"
	},
	"keyBack(e:)": {
		"scope": "source.e2",
		"prefix": "keyBack",
		"description": "(2 OPS) function normal keyBack(This)",
		"body": "keyBack(${1:This})"
	},
	"setFTrace(e:vv)": {
		"scope": "source.e2",
		"prefix": "setFTrace",
		"description": "(20 OPS) function ftrace setFTrace(Vp, Vd)",
		"body": "setFTrace(${1:Vp}, ${2:Vd})"
	},
	"keyClk(e)": {
		"scope": "source.e2",
		"prefix": "keyClk",
		"description": "(1 OPS) function normal keyClk(Ply)",
		"body": "keyClk(${1:Ply})"
	},
	"typeids(t:)": {
		"scope": "source.e2",
		"prefix": "typeids",
		"description": "(5 OPS) function table typeids(This)",
		"body": "typeids(${1:This})"
	},
	"element(xm2:nn)": {
		"scope": "source.e2",
		"prefix": "element",
		"description": "(5 OPS) function normal element(Rv2, Rv3)",
		"body": "element(${1:Rv2}, ${2:Rv3})"
	},
	"op:idx(c=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"op:ass(xrd)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(1 OPS) function ranger op:ass()",
		"body": "op:ass()"
	},
	"cos(c)": {
		"scope": "source.e2",
		"prefix": "cos",
		"description": "(3 OPS) function complex cos(Z)",
		"body": "cos(${1:Z})"
	},
	"eyeAnglesVehicle(e:)": {
		"scope": "source.e2",
		"prefix": "eyeAnglesVehicle",
		"description": "(8 OPS) function angle eyeAnglesVehicle(This)",
		"body": "eyeAnglesVehicle(${1:This})"
	},
	"smpWorld(xft:v)": {
		"scope": "source.e2",
		"prefix": "smpWorld",
		"description": "(12 OPS) function ftrace smpWorld(Vp)",
		"body": "smpWorld(${1:Vp})"
	},
	"setMatrix(r:nm)": {
		"scope": "source.e2",
		"prefix": "setMatrix",
		"description": "(5 OPS) function matrix setMatrix()",
		"body": "setMatrix()"
	},
	"hydraulic(nevevnnnsnn)": {
		"scope": "source.e2",
		"prefix": "hydraulic",
		"description": "(30 OPS) function void hydraulic(Index, Ent1, V1, Ent2, V2, Constant, Damping, Rdamping, Mat, Width, Stretch)",
		"body": "hydraulic(${1:Index}, ${2:Ent1}, ${3:V1}, ${4:Ent2}, ${5:V2}, ${6:Constant}, ${7:Damping}, ${8:Rdamping}, ${9:Mat}, ${10:Width}, ${11:Stretch})"
	},
	"insertWirelink(r:nxwl)": {
		"scope": "source.e2",
		"prefix": "insertWirelink",
		"description": "(7 OPS) function wirelink insertWirelink()",
		"body": "insertWirelink()"
	},
	"isnan(n)": {
		"scope": "source.e2",
		"prefix": "isnan",
		"description": "(2 OPS) function normal isnan(Value)",
		"body": "isnan(${1:Value})"
	},
	"findClipToBox(vv)": {
		"scope": "source.e2",
		"prefix": "findClipToBox",
		"description": "(5 OPS) function normal findClipToBox(Min, Max)",
		"body": "findClipToBox(${1:Min}, ${2:Max})"
	},
	"popNumber(r:)": {
		"scope": "source.e2",
		"prefix": "popNumber",
		"description": "(7 OPS) function normal popNumber()",
		"body": "popNumber()"
	},
	"dsSend(ssxv4)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"getFraction(xft:)": {
		"scope": "source.e2",
		"prefix": "getFraction",
		"description": "(3 OPS) function normal getFraction(This)",
		"body": "getFraction(${1:This})"
	},
	"match(s:s)": {
		"scope": "source.e2",
		"prefix": "match",
		"description": "(10 OPS) function array match(Pattern)",
		"body": "match(${1:Pattern})"
	},
	"getConnectedEntities(e:...)": {
		"scope": "source.e2",
		"prefix": "getConnectedEntities",
		"description": "(20 OPS) function array getConnectedEntities(This)",
		"body": "getConnectedEntities(${1:This})"
	},
	"holoAnimNum(ns)": {
		"scope": "source.e2",
		"prefix": "holoAnimNum",
		"description": "(20 OPS) function normal holoAnimNum(Index, Animation)",
		"body": "holoAnimNum(${1:Index}, ${2:Animation})"
	},
	"vector(xwl:s)": {
		"scope": "source.e2",
		"prefix": "vector",
		"description": "(5 OPS) function vector vector()",
		"body": "vector()"
	},
	"cameraZoom(nnn)": {
		"scope": "source.e2",
		"prefix": "cameraZoom",
		"description": "(15 OPS) function void cameraZoom(Index, Zoom, Time)",
		"body": "cameraZoom(${1:Index}, ${2:Zoom}, ${3:Time})"
	},
	"setZ(xv4:n)": {
		"scope": "source.e2",
		"prefix": "setZ",
		"description": "(3 OPS) function vector4 setZ()",
		"body": "setZ()"
	},
	"setConstant(e:nnn)": {
		"scope": "source.e2",
		"prefix": "setConstant",
		"description": "(5 OPS) function void setConstant(Index, Constant, Damping)",
		"body": "setConstant(${1:Index}, ${2:Constant}, ${3:Damping})"
	},
	"setDamping(e:nn)": {
		"scope": "source.e2",
		"prefix": "setDamping",
		"description": "(5 OPS) function void setDamping(Index, Damping)",
		"body": "setDamping(${1:Index}, ${2:Damping})"
	},
	"ops()": {
		"scope": "source.e2",
		"prefix": "ops",
		"description": "(1 OPS) function normal ops()",
		"body": "ops()"
	},
	"op:fea(nxftr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"dsProbe(s)": {
		"scope": "source.e2",
		"prefix": "dsProbe",
		"description": "(20 OPS) function array dsProbe(Groupname)",
		"body": "dsProbe(${1:Groupname})"
	},
	"egpPoly(xwl:nr)": {
		"scope": "source.e2",
		"prefix": "egpPoly",
		"description": "(20 OPS) function void egpPoly(Index, Args)",
		"body": "egpPoly(${1:Index}, ${2:Args})"
	},
	"pushMatrix2(r:xm2)": {
		"scope": "source.e2",
		"prefix": "pushMatrix2",
		"description": "(7 OPS) function matrix2 pushMatrix2()",
		"body": "pushMatrix2()"
	},
	"op:add(aa)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(2 OPS) function angle op:add(Rv1, Rv2)",
		"body": "op:add(${1:Rv1}, ${2:Rv2})"
	},
	"egpColor(xwl:nxv4)": {
		"scope": "source.e2",
		"prefix": "egpColor",
		"description": "(10 OPS) function void egpColor(Index, Color)",
		"body": "egpColor(${1:Index}, ${2:Color})"
	},
	"op:add(xm2xm2)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(5 OPS) function matrix2 op:add(Rv1, Rv2)",
		"body": "op:add(${1:Rv1}, ${2:Rv2})"
	},
	"getPosWorld(xft:e)": {
		"scope": "source.e2",
		"prefix": "getPosWorld",
		"description": "(3 OPS) function vector getPosWorld(Ve)",
		"body": "getPosWorld(${1:Ve})"
	},
	"op:kvarray()": {
		"scope": "source.e2",
		"prefix": "op:kvarray",
		"description": "(1 OPS) function array op:kvarray()",
		"body": "op:kvarray()"
	},
	"coshr(n)": {
		"scope": "source.e2",
		"prefix": "coshr",
		"description": "(2 OPS) function normal coshr()",
		"body": "coshr()"
	},
	"frexp(n)": {
		"scope": "source.e2",
		"prefix": "frexp",
		"description": "(2 OPS) function vector2 frexp(X)",
		"body": "frexp(${1:X})"
	},
	"pushQuaternion(r:q)": {
		"scope": "source.e2",
		"prefix": "pushQuaternion",
		"description": "(7 OPS) function quaternion pushQuaternion()",
		"body": "pushQuaternion()"
	},
	"isAdmin(e:)": {
		"scope": "source.e2",
		"prefix": "isAdmin",
		"description": "(5 OPS) function normal isAdmin(This)",
		"body": "isAdmin(${1:This})"
	},
	"insertStcontrol(r:nxsc)": {
		"scope": "source.e2",
		"prefix": "insertStcontrol",
		"description": "(7 OPS) function stcontrol insertStcontrol()",
		"body": "insertStcontrol()"
	},
	"op:idx(q=xgtsq)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"holoAnim(nsn)": {
		"scope": "source.e2",
		"prefix": "holoAnim",
		"description": "(20 OPS) function void holoAnim(Index, Animation, Frame)",
		"body": "holoAnim(${1:Index}, ${2:Animation}, ${3:Frame})"
	},
	"lightEntity(n)": {
		"scope": "source.e2",
		"prefix": "lightEntity",
		"description": "(2 OPS) function entity lightEntity(Index)",
		"body": "lightEntity(${1:Index})"
	},
	"removeEffect(r:n)": {
		"scope": "source.e2",
		"prefix": "removeEffect",
		"description": "(7 OPS) function effect removeEffect()",
		"body": "removeEffect()"
	},
	"setRoll(a:n)": {
		"scope": "source.e2",
		"prefix": "setRoll",
		"description": "(2 OPS) function angle setRoll(Rv2)",
		"body": "setRoll(${1:Rv2})"
	},
	"removeEntity(r:n)": {
		"scope": "source.e2",
		"prefix": "removeEntity",
		"description": "(7 OPS) function entity removeEntity()",
		"body": "removeEntity()"
	},
	"root(nn)": {
		"scope": "source.e2",
		"prefix": "root",
		"description": "(2 OPS) function normal root()",
		"body": "root()"
	},
	"massCenter(e:)": {
		"scope": "source.e2",
		"prefix": "massCenter",
		"description": "(10 OPS) function vector massCenter(This)",
		"body": "massCenter(${1:This})"
	},
	"shiftR(xv4)": {
		"scope": "source.e2",
		"prefix": "shiftR",
		"description": "(4 OPS) function vector4 shiftR()",
		"body": "shiftR()"
	},
	"maxIndex(t:)": {
		"scope": "source.e2",
		"prefix": "maxIndex",
		"description": "(5 OPS) function normal maxIndex(This)",
		"body": "maxIndex(${1:This})"
	},
	"getBodygroup(e:n)": {
		"scope": "source.e2",
		"prefix": "getBodygroup",
		"description": "(10 OPS) function normal getBodygroup(Bgrp_id)",
		"body": "getBodygroup(${1:Bgrp_id})"
	},
	"x(xv4:)": {
		"scope": "source.e2",
		"prefix": "x",
		"description": "(2 OPS) function normal x()",
		"body": "x()"
	},
	"dateUTC()": {
		"scope": "source.e2",
		"prefix": "dateUTC",
		"description": "(10 OPS) function table dateUTC()",
		"body": "dateUTC()"
	},
	"toString(q:)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(15 OPS) function string toString(This)",
		"body": "toString(${1:This})"
	},
	"playerDisconnectClk()": {
		"scope": "source.e2",
		"prefix": "playerDisconnectClk",
		"description": "(3 OPS) function normal playerDisconnectClk()",
		"body": "playerDisconnectClk()"
	},
	"holoBodygroups(nn)": {
		"scope": "source.e2",
		"prefix": "holoBodygroups",
		"description": "(10 OPS) function normal holoBodygroups(Index, Bgrp_id)",
		"body": "holoBodygroups(${1:Index}, ${2:Bgrp_id})"
	},
	"teamFrags(n)": {
		"scope": "source.e2",
		"prefix": "teamFrags",
		"description": "(5 OPS) function normal teamFrags(Rv1)",
		"body": "teamFrags(${1:Rv1})"
	},
	"op:idx(r=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function array op:idx()",
		"body": "op:idx()"
	},
	"egpAlign(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpAlign",
		"description": "(10 OPS) function void egpAlign(Index, Halign)",
		"body": "egpAlign(${1:Index}, ${2:Halign})"
	},
	"ftrace(xwl:s)": {
		"scope": "source.e2",
		"prefix": "ftrace",
		"description": "(5 OPS) function ftrace ftrace()",
		"body": "ftrace()"
	},
	"npcDisp(e:e)": {
		"scope": "source.e2",
		"prefix": "npcDisp",
		"description": "(5 OPS) function string npcDisp(Rv2)",
		"body": "npcDisp(${1:Rv2})"
	},
	"op:div(cn)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function complex op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"xyz(xwl:)": {
		"scope": "source.e2",
		"prefix": "xyz",
		"description": "(15 OPS) function vector xyz(This)",
		"body": "xyz(${1:This})"
	},
	"gravity()": {
		"scope": "source.e2",
		"prefix": "gravity",
		"description": "(1 OPS) function normal gravity()",
		"body": "gravity()"
	},
	"hint(sn)": {
		"scope": "source.e2",
		"prefix": "hint",
		"description": "(100 OPS) function void hint(Text, Duration)",
		"body": "hint(${1:Text}, ${2:Duration})"
	},
	"getPowerI(xsc:)": {
		"scope": "source.e2",
		"prefix": "getPowerI",
		"description": "(3 OPS) function normal getPowerI(This)",
		"body": "getPowerI(${1:This})"
	},
	"setFTrace(e:vn)": {
		"scope": "source.e2",
		"prefix": "setFTrace",
		"description": "(20 OPS) function ftrace setFTrace(Vp, Nl)",
		"body": "setFTrace(${1:Vp}, ${2:Nl})"
	},
	"holoSkin(nn)": {
		"scope": "source.e2",
		"prefix": "holoSkin",
		"description": "(10 OPS) function void holoSkin(Index, Skin)",
		"body": "holoSkin(${1:Index}, ${2:Skin})"
	},
	"ioGetInputNumber(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputNumber",
		"description": "(5 OPS) function normal ioGetInputNumber()",
		"body": "ioGetInputNumber()"
	},
	"sec(n)": {
		"scope": "source.e2",
		"prefix": "sec",
		"description": "(2 OPS) function normal sec()",
		"body": "sec()"
	},
	"applyTorque(b:v)": {
		"scope": "source.e2",
		"prefix": "applyTorque",
		"description": "(30 OPS) function void applyTorque(Torque)",
		"body": "applyTorque(${1:Torque})"
	},
	"op:idx(v=xgtsv)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"writeString(xwl:snnnvn)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y, Textcolor, Bgcolor, Flash)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor}, ${6:Flash})"
	},
	"soundPlay(e:nns)": {
		"scope": "source.e2",
		"prefix": "soundPlay",
		"description": "(25 OPS) function void soundPlay(Index, Duration, Path)",
		"body": "soundPlay(${1:Index}, ${2:Duration}, ${3:Path})"
	},
	"lightToggle(nn)": {
		"scope": "source.e2",
		"prefix": "lightToggle",
		"description": "(10 OPS) function void lightToggle(Index, Toggle)",
		"body": "lightToggle(${1:Index}, ${2:Toggle})"
	},
	"op:idx(xv2=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"i()": {
		"scope": "source.e2",
		"prefix": "i",
		"description": "(2 OPS) function complex i()",
		"body": "i()"
	},
	"csch(n)": {
		"scope": "source.e2",
		"prefix": "csch",
		"description": "(2 OPS) function normal csch()",
		"body": "csch()"
	},
	"httpCanRequest()": {
		"scope": "source.e2",
		"prefix": "httpCanRequest",
		"description": "(5 OPS) function normal httpCanRequest()",
		"body": "httpCanRequest()"
	},
	"dsSendDirect(sec)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"cameraUnparent(n)": {
		"scope": "source.e2",
		"prefix": "cameraUnparent",
		"description": "(2 OPS) function void cameraUnparent(Index)",
		"body": "cameraUnparent(${1:Index})"
	},
	"hasConstraints(e:s)": {
		"scope": "source.e2",
		"prefix": "hasConstraints",
		"description": "(5 OPS) function normal hasConstraints(Constrainttype)",
		"body": "hasConstraints(${1:Constrainttype})"
	},
	"op:lth(nn)": {
		"scope": "source.e2",
		"prefix": "op:lth",
		"description": "(1.25 OPS) function normal op:lth()",
		"body": "op:lth()"
	},
	"tsShapeModel(ns)": {
		"scope": "source.e2",
		"prefix": "tsShapeModel",
		"description": "(20 OPS) function string tsShapeModel(Index, Model)",
		"body": "tsShapeModel(${1:Index}, ${2:Model})"
	},
	"angles(b:)": {
		"scope": "source.e2",
		"prefix": "angles",
		"description": "(1 OPS) function angle angles(This)",
		"body": "angles(${1:This})"
	},
	"sub(s:n)": {
		"scope": "source.e2",
		"prefix": "sub",
		"description": "(20 OPS) function string sub(Start)",
		"body": "sub(${1:Start})"
	},
	"gSetNum(nn)": {
		"scope": "source.e2",
		"prefix": "gSetNum",
		"description": "(8 OPS) function void gSetNum()",
		"body": "gSetNum()"
	},
	"op:idx(xm4=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"op:eq(nn)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(1.5 OPS) function normal op:eq()",
		"body": "op:eq()"
	},
	"writeUnicodeString(xwl:snnv)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y, Textcolor)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor})"
	},
	"setState(xsc:nn)": {
		"scope": "source.e2",
		"prefix": "setState",
		"description": "(20 OPS) function stcontrol setState(Nr, Ny)",
		"body": "setState(${1:Nr}, ${2:Ny})"
	},
	"round(xv2n)": {
		"scope": "source.e2",
		"prefix": "round",
		"description": "(4 OPS) function vector2 round(Rv1, Decimals)",
		"body": "round(${1:Rv1}, ${2:Decimals})"
	},
	"tsShapeRotation(nn)": {
		"scope": "source.e2",
		"prefix": "tsShapeRotation",
		"description": "(20 OPS) function string tsShapeRotation(Index, Rotation)",
		"body": "tsShapeRotation(${1:Index}, ${2:Rotation})"
	},
	"max(nnnn)": {
		"scope": "source.e2",
		"prefix": "max",
		"description": "(1 OPS) function normal max()",
		"body": "max()"
	},
	"op:neq(nn)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(1.5 OPS) function normal op:neq()",
		"body": "op:neq()"
	},
	"clk(s)": {
		"scope": "source.e2",
		"prefix": "clk",
		"description": "(1 OPS) function normal clk(Rv1)",
		"body": "clk(${1:Rv1})"
	},
	"tuneISE(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "tuneISE",
		"description": "(7 OPS) function stcontrol tuneISE(Nk, Nt, Nl)",
		"body": "tuneISE(${1:Nk}, ${2:Nt}, ${3:Nl})"
	},
	"dumpItem(xsc:ss)": {
		"scope": "source.e2",
		"prefix": "dumpItem",
		"description": "(15 OPS) function stcontrol dumpItem(Nt, Sn)",
		"body": "dumpItem(${1:Nt}, ${2:Sn})"
	},
	"angle(xwl:s)": {
		"scope": "source.e2",
		"prefix": "angle",
		"description": "(5 OPS) function angle angle()",
		"body": "angle()"
	},
	"pushMatrix(r:m)": {
		"scope": "source.e2",
		"prefix": "pushMatrix",
		"description": "(7 OPS) function matrix pushMatrix()",
		"body": "pushMatrix()"
	},
	"height(e:)": {
		"scope": "source.e2",
		"prefix": "height",
		"description": "(10 OPS) function normal height(This)",
		"body": "height(${1:This})"
	},
	"maxquota()": {
		"scope": "source.e2",
		"prefix": "maxquota",
		"description": "(1 OPS) function normal maxquota()",
		"body": "maxquota()"
	},
	"hash()": {
		"scope": "source.e2",
		"prefix": "hash",
		"description": "(5 OPS) function normal hash()",
		"body": "hash()"
	},
	"op:idx(s=xwlns)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(20 OPS) function string op:idx(Address, Value)",
		"body": "op:idx(${1:Address}, ${2:Value})"
	},
	"egpMaxUmsgPerSecond()": {
		"scope": "source.e2",
		"prefix": "egpMaxUmsgPerSecond",
		"description": "(10 OPS) function normal egpMaxUmsgPerSecond()",
		"body": "egpMaxUmsgPerSecond()"
	},
	"egpTriangleOutline(xwl:nxv2xv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpTriangleOutline",
		"description": "(15 OPS) function void egpTriangleOutline(Index, V1, V2, V3)",
		"body": "egpTriangleOutline(${1:Index}, ${2:V1}, ${3:V2}, ${4:V3})"
	},
	"findByModel(s)": {
		"scope": "source.e2",
		"prefix": "findByModel",
		"description": "(30 OPS) function normal findByModel(Model)",
		"body": "findByModel(${1:Model})"
	},
	"op:neq(cn)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(2 OPS) function normal op:neq(Lhs, Rhs)",
		"body": "op:neq(${1:Lhs}, ${2:Rhs})"
	},
	"toWorldAng(vava)": {
		"scope": "source.e2",
		"prefix": "toWorldAng",
		"description": "(15 OPS) function angle toWorldAng(Localpos, Localang, Worldpos, Worldang)",
		"body": "toWorldAng(${1:Localpos}, ${2:Localang}, ${3:Worldpos}, ${4:Worldang})"
	},
	"egpSize(xwl:)": {
		"scope": "source.e2",
		"prefix": "egpSize",
		"description": "(10 OPS) function vector2 egpSize(This)",
		"body": "egpSize(${1:This})"
	},
	"holoDelete(n)": {
		"scope": "source.e2",
		"prefix": "holoDelete",
		"description": "(20 OPS) function void holoDelete(Index)",
		"body": "holoDelete(${1:Index})"
	},
	"removeComplex(r:n)": {
		"scope": "source.e2",
		"prefix": "removeComplex",
		"description": "(7 OPS) function complex removeComplex()",
		"body": "removeComplex()"
	},
	"complex(r:n)": {
		"scope": "source.e2",
		"prefix": "complex",
		"description": "(5 OPS) function complex complex()",
		"body": "complex()"
	},
	"op:fea(nxm2r)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:idx(c=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"holoAnim(nnn)": {
		"scope": "source.e2",
		"prefix": "holoAnim",
		"description": "(20 OPS) function void holoAnim(Index, Animation, Frame)",
		"body": "holoAnim(${1:Index}, ${2:Animation}, ${3:Frame})"
	},
	"popStcontrol(t:)": {
		"scope": "source.e2",
		"prefix": "popStcontrol",
		"description": "(10 OPS) function stcontrol popStcontrol()",
		"body": "popStcontrol()"
	},
	"setPos(xft:v)": {
		"scope": "source.e2",
		"prefix": "setPos",
		"description": "(3 OPS) function ftrace setPos(Vo)",
		"body": "setPos(${1:Vo})"
	},
	"wirelink(xwl:s)": {
		"scope": "source.e2",
		"prefix": "wirelink",
		"description": "(5 OPS) function wirelink wirelink()",
		"body": "wirelink()"
	},
	"randvec2()": {
		"scope": "source.e2",
		"prefix": "randvec2",
		"description": "(5 OPS) function vector2 randvec2()",
		"body": "randvec2()"
	},
	"systime()": {
		"scope": "source.e2",
		"prefix": "systime",
		"description": "(1 OPS) function normal systime()",
		"body": "systime()"
	},
	"tuneIAE(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "tuneIAE",
		"description": "(7 OPS) function stcontrol tuneIAE(Nk, Nt, Nl)",
		"body": "tuneIAE(${1:Nk}, ${2:Nt}, ${3:Nl})"
	},
	"writeUnicodeString(xwl:snnvnn)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y, Textcolor, Bgcolor, Flash)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor}, ${6:Flash})"
	},
	"rangerFilter(e)": {
		"scope": "source.e2",
		"prefix": "rangerFilter",
		"description": "(10 OPS) function void rangerFilter(Ent)",
		"body": "rangerFilter(${1:Ent})"
	},
	"clipFromTypeid(t:s)": {
		"scope": "source.e2",
		"prefix": "clipFromTypeid",
		"description": "(5 OPS) function table clipFromTypeid(Typeid)",
		"body": "clipFromTypeid(${1:Typeid})"
	},
	"outputs(xwl:)": {
		"scope": "source.e2",
		"prefix": "outputs",
		"description": "(15 OPS) function array outputs(This)",
		"body": "outputs(${1:This})"
	},
	"tsRayIntersection(vv)": {
		"scope": "source.e2",
		"prefix": "tsRayIntersection",
		"description": "(20 OPS) function tracedata tsRayIntersection(Start, Dir)",
		"body": "tsRayIntersection(${1:Start}, ${2:Dir})"
	},
	"removeQuaternion(t:n)": {
		"scope": "source.e2",
		"prefix": "removeQuaternion",
		"description": "(8 OPS) function quaternion removeQuaternion()",
		"body": "removeQuaternion()"
	},
	"removeArray(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeArray",
		"description": "(5 OPS) function array removeArray()",
		"body": "removeArray()"
	},
	"op:geq(aa)": {
		"scope": "source.e2",
		"prefix": "op:geq",
		"description": "(3 OPS) function normal op:geq(Rv1, Rv2)",
		"body": "op:geq(${1:Rv1}, ${2:Rv2})"
	},
	"egpScrW(e)": {
		"scope": "source.e2",
		"prefix": "egpScrW",
		"description": "(10 OPS) function normal egpScrW(Ply)",
		"body": "egpScrW(${1:Ply})"
	},
	"k(q:)": {
		"scope": "source.e2",
		"prefix": "k",
		"description": "(1 OPS) function normal k(This)",
		"body": "k(${1:This})"
	},
	"tsShapeRemove(n)": {
		"scope": "source.e2",
		"prefix": "tsShapeRemove",
		"description": "(20 OPS) function string tsShapeRemove(Index)",
		"body": "tsShapeRemove(${1:Index})"
	},
	"remHitOnly(xft:sn)": {
		"scope": "source.e2",
		"prefix": "remHitOnly",
		"description": "(3 OPS) function ftrace remHitOnly(Sm, Vn)",
		"body": "remHitOnly(${1:Sm}, ${2:Vn})"
	},
	"op:idx(a=xgtna)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"effect()": {
		"scope": "source.e2",
		"prefix": "effect",
		"description": "(1 OPS) function effect effect()",
		"body": "effect()"
	},
	"exit()": {
		"scope": "source.e2",
		"prefix": "exit",
		"description": "(2 OPS) function void exit()",
		"body": "exit()"
	},
	"getWindup(xsc:)": {
		"scope": "source.e2",
		"prefix": "getWindup",
		"description": "(3 OPS) function vector2 getWindup(This)",
		"body": "getWindup(${1:This})"
	},
	"toWorld(e:v)": {
		"scope": "source.e2",
		"prefix": "toWorld",
		"description": "(15 OPS) function vector toWorld(Localposition)",
		"body": "toWorld(${1:Localposition})"
	},
	"secondaryAmmoType(e:)": {
		"scope": "source.e2",
		"prefix": "secondaryAmmoType",
		"description": "(2 OPS) function string secondaryAmmoType(This)",
		"body": "secondaryAmmoType(${1:This})"
	},
	"setIsInverted(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setIsInverted",
		"description": "(3 OPS) function stcontrol setIsInverted(Nn)",
		"body": "setIsInverted(${1:Nn})"
	},
	"op:idx(b=tnb)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"op:is(xgt)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(1 OPS) function normal op:is(Tbl)",
		"body": "op:is(${1:Tbl})"
	},
	"angVel(b:)": {
		"scope": "source.e2",
		"prefix": "angVel",
		"description": "(1 OPS) function angle angVel(This)",
		"body": "angVel(${1:This})"
	},
	"op:idx(v=xgtnv)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"findIncludeClass(s)": {
		"scope": "source.e2",
		"prefix": "findIncludeClass",
		"description": "(10 OPS) function void findIncludeClass(Class)",
		"body": "findIncludeClass(${1:Class})"
	},
	"teams()": {
		"scope": "source.e2",
		"prefix": "teams",
		"description": "(10 OPS) function array teams()",
		"body": "teams()"
	},
	"op:idx(c=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"remHitSkip(xft:ss)": {
		"scope": "source.e2",
		"prefix": "remHitSkip",
		"description": "(3 OPS) function ftrace remHitSkip(Sm, Vs)",
		"body": "remHitSkip(${1:Sm}, ${2:Vs})"
	},
	"holoClip(nvve)": {
		"scope": "source.e2",
		"prefix": "holoClip",
		"description": "(15 OPS) function void holoClip(Index, Origin, Normal, Localent)",
		"body": "holoClip(${1:Index}, ${2:Origin}, ${3:Normal}, ${4:Localent})"
	},
	"y(m:)": {
		"scope": "source.e2",
		"prefix": "y",
		"description": "(5 OPS) function vector y(This)",
		"body": "y(${1:This})"
	},
	"remGainD(xsc:)": {
		"scope": "source.e2",
		"prefix": "remGainD",
		"description": "(7 OPS) function stcontrol remGainD(This)",
		"body": "remGainD(${1:This})"
	},
	"getTimeSample(xsc:)": {
		"scope": "source.e2",
		"prefix": "getTimeSample",
		"description": "(3 OPS) function normal getTimeSample(This)",
		"body": "getTimeSample(${1:This})"
	},
	"findExcludeEntity(e)": {
		"scope": "source.e2",
		"prefix": "findExcludeEntity",
		"description": "(10 OPS) function void findExcludeEntity(Ent)",
		"body": "findExcludeEntity(${1:Ent})"
	},
	"ang(xtd:n)": {
		"scope": "source.e2",
		"prefix": "ang",
		"description": "(20 OPS) function angle ang(Index)",
		"body": "ang(${1:Index})"
	},
	"egpRadius(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpRadius",
		"description": "(5 OPS) function normal egpRadius(Index)",
		"body": "egpRadius(${1:Index})"
	},
	"op:mul(nn)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(1 OPS) function normal op:mul()",
		"body": "op:mul()"
	},
	"hasInput(xwl:s)": {
		"scope": "source.e2",
		"prefix": "hasInput",
		"description": "(2 OPS) function normal hasInput(Portname)",
		"body": "hasInput(${1:Portname})"
	},
	"dsSend(ssb)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"tsShapeCanCreate()": {
		"scope": "source.e2",
		"prefix": "tsShapeCanCreate",
		"description": "(20 OPS) function normal tsShapeCanCreate()",
		"body": "tsShapeCanCreate()"
	},
	"holoCreate(nvvav)": {
		"scope": "source.e2",
		"prefix": "holoCreate",
		"description": "(30 OPS) function entity holoCreate(Index, Position, Scale, Ang, Color)",
		"body": "holoCreate(${1:Index}, ${2:Position}, ${3:Scale}, ${4:Ang}, ${5:Color})"
	},
	"hit(xtd:n)": {
		"scope": "source.e2",
		"prefix": "hit",
		"description": "(20 OPS) function normal hit(Index)",
		"body": "hit(${1:Index})"
	},
	"matrix2(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "matrix2",
		"description": "(5 OPS) function matrix2 matrix2(Rv1, Rv2)",
		"body": "matrix2(${1:Rv1}, ${2:Rv2})"
	},
	"op:idx(c=tnc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"op:stringcall()": {
		"scope": "source.e2",
		"prefix": "op:stringcall",
		"description": "(20 OPS) function void op:stringcall()",
		"body": "op:stringcall()"
	},
	"op:idx(c=xwlsc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"getHitNormal(xft:)": {
		"scope": "source.e2",
		"prefix": "getHitNormal",
		"description": "(8 OPS) function vector getHitNormal(This)",
		"body": "getHitNormal(${1:This})"
	},
	"toLocalAxis(e:v)": {
		"scope": "source.e2",
		"prefix": "toLocalAxis",
		"description": "(15 OPS) function vector toLocalAxis(Worldaxis)",
		"body": "toLocalAxis(${1:Worldaxis})"
	},
	"podStripWeapons(e:)": {
		"scope": "source.e2",
		"prefix": "podStripWeapons",
		"description": "(10 OPS) function void podStripWeapons(This)",
		"body": "podStripWeapons(${1:This})"
	},
	"getHitTexture(xft:)": {
		"scope": "source.e2",
		"prefix": "getHitTexture",
		"description": "(8 OPS) function string getHitTexture(This)",
		"body": "getHitTexture(${1:This})"
	},
	"getHitGroup(xft:)": {
		"scope": "source.e2",
		"prefix": "getHitGroup",
		"description": "(3 OPS) function normal getHitGroup(This)",
		"body": "getHitGroup(${1:This})"
	},
	"changed(n)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(1 OPS) function normal changed(Value)",
		"body": "changed(${1:Value})"
	},
	"egpQueueClkPly(e)": {
		"scope": "source.e2",
		"prefix": "egpQueueClkPly",
		"description": "(10 OPS) function normal egpQueueClkPly(Ply)",
		"body": "egpQueueClkPly(${1:Ply})"
	},
	"round(xv4)": {
		"scope": "source.e2",
		"prefix": "round",
		"description": "(8 OPS) function vector4 round(Rv1)",
		"body": "round(${1:Rv1})"
	},
	"steamID64(e:)": {
		"scope": "source.e2",
		"prefix": "steamID64",
		"description": "(5 OPS) function string steamID64(This)",
		"body": "steamID64(${1:This})"
	},
	"trace(xm2)": {
		"scope": "source.e2",
		"prefix": "trace",
		"description": "(5 OPS) function normal trace(Rv1)",
		"body": "trace(${1:Rv1})"
	},
	"unicodeLength(s:nn)": {
		"scope": "source.e2",
		"prefix": "unicodeLength",
		"description": "(1 OPS) function normal unicodeLength(Startpos, Endpos)",
		"body": "unicodeLength(${1:Startpos}, ${2:Endpos})"
	},
	"egpText(xwl:nsxv2)": {
		"scope": "source.e2",
		"prefix": "egpText",
		"description": "(15 OPS) function void egpText(Index, Text, Pos)",
		"body": "egpText(${1:Index}, ${2:Text}, ${3:Pos})"
	},
	"findClipToModel(s)": {
		"scope": "source.e2",
		"prefix": "findClipToModel",
		"description": "(5 OPS) function normal findClipToModel(Model)",
		"body": "findClipToModel(${1:Model})"
	},
	"egpGlobalPos(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpGlobalPos",
		"description": "(20 OPS) function vector egpGlobalPos(Index)",
		"body": "egpGlobalPos(${1:Index})"
	},
	"pushBone(r:b)": {
		"scope": "source.e2",
		"prefix": "pushBone",
		"description": "(7 OPS) function bone pushBone()",
		"body": "pushBone()"
	},
	"holoCanCreate()": {
		"scope": "source.e2",
		"prefix": "holoCanCreate",
		"description": "(2 OPS) function normal holoCanCreate()",
		"body": "holoCanCreate()"
	},
	"gRemoveAllRangers()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllRangers",
		"description": "(5 OPS) function void gRemoveAllRangers()",
		"body": "gRemoveAllRangers()"
	},
	"isHit(xft:)": {
		"scope": "source.e2",
		"prefix": "isHit",
		"description": "(3 OPS) function normal isHit(This)",
		"body": "isHit(${1:This})"
	},
	"stopAllTimers()": {
		"scope": "source.e2",
		"prefix": "stopAllTimers",
		"description": "(1 OPS) function void stopAllTimers()",
		"body": "stopAllTimers()"
	},
	"egpOrder(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpOrder",
		"description": "(15 OPS) function void egpOrder(Index, Order)",
		"body": "egpOrder(${1:Index}, ${2:Order})"
	},
	"setIsCombined(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setIsCombined",
		"description": "(3 OPS) function stcontrol setIsCombined(Nn)",
		"body": "setIsCombined(${1:Nn})"
	},
	"rgb2hsv(nnn)": {
		"scope": "source.e2",
		"prefix": "rgb2hsv",
		"description": "(2 OPS) function vector rgb2hsv(R, G, B)",
		"body": "rgb2hsv(${1:R}, ${2:G}, ${3:B})"
	},
	"getPowerD(xsc:)": {
		"scope": "source.e2",
		"prefix": "getPowerD",
		"description": "(3 OPS) function normal getPowerD(This)",
		"body": "getPowerD(${1:This})"
	},
	"rotationAxis(q)": {
		"scope": "source.e2",
		"prefix": "rotationAxis",
		"description": "(9 OPS) function vector rotationAxis(Q)",
		"body": "rotationAxis(${1:Q})"
	},
	"tanr(n)": {
		"scope": "source.e2",
		"prefix": "tanr",
		"description": "(2 OPS) function normal tanr()",
		"body": "tanr()"
	},
	"rangerHitEntities(n)": {
		"scope": "source.e2",
		"prefix": "rangerHitEntities",
		"description": "(1 OPS) function void rangerHitEntities(Hitentities)",
		"body": "rangerHitEntities(${1:Hitentities})"
	},
	"isHitNonWorld(xft:)": {
		"scope": "source.e2",
		"prefix": "isHitNonWorld",
		"description": "(3 OPS) function normal isHitNonWorld(This)",
		"body": "isHitNonWorld(${1:This})"
	},
	"egpCircle(xwl:nxv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpCircle",
		"description": "(15 OPS) function void egpCircle(Index, Pos, Size)",
		"body": "egpCircle(${1:Index}, ${2:Pos}, ${3:Size})"
	},
	"getGainD(xsc:)": {
		"scope": "source.e2",
		"prefix": "getGainD",
		"description": "(3 OPS) function normal getGainD(This)",
		"body": "getGainD(${1:This})"
	},
	"right(e:)": {
		"scope": "source.e2",
		"prefix": "right",
		"description": "(5 OPS) function vector right(This)",
		"body": "right(${1:This})"
	},
	"setEntity(r:ne)": {
		"scope": "source.e2",
		"prefix": "setEntity",
		"description": "(5 OPS) function entity setEntity()",
		"body": "setEntity()"
	},
	"matrix4(r:n)": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(5 OPS) function matrix4 matrix4()",
		"body": "matrix4()"
	},
	"removeTable(t:n)": {
		"scope": "source.e2",
		"prefix": "removeTable",
		"description": "(8 OPS) function table removeTable()",
		"body": "removeTable()"
	},
	"getHitPos(xft:)": {
		"scope": "source.e2",
		"prefix": "getHitPos",
		"description": "(8 OPS) function vector getHitPos(This)",
		"body": "getHitPos(${1:This})"
	},
	"setMaterial(e:s)": {
		"scope": "source.e2",
		"prefix": "setMaterial",
		"description": "(10 OPS) function void setMaterial(Material)",
		"body": "setMaterial(${1:Material})"
	},
	"floor(an)": {
		"scope": "source.e2",
		"prefix": "floor",
		"description": "(5 OPS) function angle floor(Rv1, Decimals)",
		"body": "floor(${1:Rv1}, ${2:Decimals})"
	},
	"inertia(b:)": {
		"scope": "source.e2",
		"prefix": "inertia",
		"description": "(1 OPS) function vector inertia(This)",
		"body": "inertia(${1:This})"
	},
	"axis(evev)": {
		"scope": "source.e2",
		"prefix": "axis",
		"description": "(30 OPS) function void axis(Ent1, V1, Ent2, V2)",
		"body": "axis(${1:Ent1}, ${2:V1}, ${3:Ent2}, ${4:V2})"
	},
	"sinh(n)": {
		"scope": "source.e2",
		"prefix": "sinh",
		"description": "(2 OPS) function normal sinh()",
		"body": "sinh()"
	},
	"egpTrackerParent(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpTrackerParent",
		"description": "(10 OPS) function entity egpTrackerParent(Index)",
		"body": "egpTrackerParent(${1:Index})"
	},
	"op:neq(xwlxwl)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(2 OPS) function normal op:neq(Lhs, Rhs)",
		"body": "op:neq(${1:Lhs}, ${2:Rhs})"
	},
	"ioSetOutput(sa)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function angle ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"outputType(xwl:s)": {
		"scope": "source.e2",
		"prefix": "outputType",
		"description": "(15 OPS) function string outputType(Output)",
		"body": "outputType(${1:Output})"
	},
	"removeTracedata(r:n)": {
		"scope": "source.e2",
		"prefix": "removeTracedata",
		"description": "(7 OPS) function tracedata removeTracedata()",
		"body": "removeTracedata()"
	},
	"egpSize(xwl:nxv2)": {
		"scope": "source.e2",
		"prefix": "egpSize",
		"description": "(10 OPS) function void egpSize(Index, Size)",
		"body": "egpSize(${1:Index}, ${2:Size})"
	},
	"lookupAttachment(e:s)": {
		"scope": "source.e2",
		"prefix": "lookupAttachment",
		"description": "(15 OPS) function normal lookupAttachment(Attachmentname)",
		"body": "lookupAttachment(${1:Attachmentname})"
	},
	"toLocalPosAng(vava)": {
		"scope": "source.e2",
		"prefix": "toLocalPosAng",
		"description": "(15 OPS) function array toLocalPosAng(Localpos, Localang, Worldpos, Worldang)",
		"body": "toLocalPosAng(${1:Localpos}, ${2:Localang}, ${3:Worldpos}, ${4:Worldang})"
	},
	"applyOffsetForce(vv)": {
		"scope": "source.e2",
		"prefix": "applyOffsetForce",
		"description": "(30 OPS) function void applyOffsetForce(Force, Position)",
		"body": "applyOffsetForce(${1:Force}, ${2:Position})"
	},
	"dsGetGroups()": {
		"scope": "source.e2",
		"prefix": "dsGetGroups",
		"description": "(5 OPS) function array dsGetGroups()",
		"body": "dsGetGroups()"
	},
	"cameraCreate(nva)": {
		"scope": "source.e2",
		"prefix": "cameraCreate",
		"description": "(25 OPS) function void cameraCreate(Index, Position, Ang)",
		"body": "cameraCreate(${1:Index}, ${2:Position}, ${3:Ang})"
	},
	"rangerWhitelist(n)": {
		"scope": "source.e2",
		"prefix": "rangerWhitelist",
		"description": "(1 OPS) function void rangerWhitelist(Whitelistmode)",
		"body": "rangerWhitelist(${1:Whitelistmode})"
	},
	"removeMatrix(t:s)": {
		"scope": "source.e2",
		"prefix": "removeMatrix",
		"description": "(8 OPS) function matrix removeMatrix()",
		"body": "removeMatrix()"
	},
	"rotation(xtd:n)": {
		"scope": "source.e2",
		"prefix": "rotation",
		"description": "(20 OPS) function normal rotation(Index)",
		"body": "rotation(${1:Index})"
	},
	"entity(xtd:)": {
		"scope": "source.e2",
		"prefix": "entity",
		"description": "(20 OPS) function entity entity(This)",
		"body": "entity(${1:This})"
	},
	"op:idx(n=tsn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"vec4()": {
		"scope": "source.e2",
		"prefix": "vec4",
		"description": "(1 OPS) function vector4 vec4()",
		"body": "vec4()"
	},
	"readCell(xwl:n)": {
		"scope": "source.e2",
		"prefix": "readCell",
		"description": "(5 OPS) function normal readCell(Address)",
		"body": "readCell(${1:Address})"
	},
	"op:mul(vn)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function vector op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"egpAlpha(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpAlpha",
		"description": "(10 OPS) function void egpAlpha(Index, A)",
		"body": "egpAlpha(${1:Index}, ${2:A})"
	},
	"op:fea(nxv4t)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:add(qn)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(4 OPS) function quaternion op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"ioGetInputMatrix4(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputMatrix4",
		"description": "(5 OPS) function matrix4 ioGetInputMatrix4()",
		"body": "ioGetInputMatrix4()"
	},
	"hitAngle(xtd:)": {
		"scope": "source.e2",
		"prefix": "hitAngle",
		"description": "(20 OPS) function normal hitAngle(This)",
		"body": "hitAngle(${1:This})"
	},
	"holoRenderFX(nn)": {
		"scope": "source.e2",
		"prefix": "holoRenderFX",
		"description": "(10 OPS) function void holoRenderFX(Index, Effect)",
		"body": "holoRenderFX(${1:Index}, ${2:Effect})"
	},
	"op:idx(q=tsq)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"ang(v)": {
		"scope": "source.e2",
		"prefix": "ang",
		"description": "(2 OPS) function angle ang(Rv1)",
		"body": "ang(${1:Rv1})"
	},
	"right(b:)": {
		"scope": "source.e2",
		"prefix": "right",
		"description": "(1 OPS) function vector right(This)",
		"body": "right(${1:This})"
	},
	"lightParent(ne)": {
		"scope": "source.e2",
		"prefix": "lightParent",
		"description": "(10 OPS) function void lightParent(Index, Parent)",
		"body": "lightParent(${1:Index}, ${2:Parent})"
	},
	"op:neq(vv)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(2 OPS) function normal op:neq(Other)",
		"body": "op:neq(${1:Other})"
	},
	"egpGlobalFiltering(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpGlobalFiltering",
		"description": "(10 OPS) function void egpGlobalFiltering(Filtering)",
		"body": "egpGlobalFiltering(${1:Filtering})"
	},
	"setMass(e:n)": {
		"scope": "source.e2",
		"prefix": "setMass",
		"description": "(10 OPS) function void setMass(Mass)",
		"body": "setMass(${1:Mass})"
	},
	"use(e:)": {
		"scope": "source.e2",
		"prefix": "use",
		"description": "(10 OPS) function void use(This)",
		"body": "use(${1:This})"
	},
	"dsSendDirect(sexm4)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"holoClipEnabled(nnn)": {
		"scope": "source.e2",
		"prefix": "holoClipEnabled",
		"description": "(15 OPS) function void holoClipEnabled(Index, Clipidx, Enabled)",
		"body": "holoClipEnabled(${1:Index}, ${2:Clipidx}, ${3:Enabled})"
	},
	"ballsocket(evevvvn)": {
		"scope": "source.e2",
		"prefix": "ballsocket",
		"description": "(30 OPS) function void ballsocket(Ent1, V, Ent2, Mins, Maxs, Frictions, Rotateonly)",
		"body": "ballsocket(${1:Ent1}, ${2:V}, ${3:Ent2}, ${4:Mins}, ${5:Maxs}, ${6:Frictions}, ${7:Rotateonly})"
	},
	"removeRanger(t:s)": {
		"scope": "source.e2",
		"prefix": "removeRanger",
		"description": "(8 OPS) function ranger removeRanger()",
		"body": "removeRanger()"
	},
	"propSetFriction(e:n)": {
		"scope": "source.e2",
		"prefix": "propSetFriction",
		"description": "(10 OPS) function void propSetFriction(Friction)",
		"body": "propSetFriction(${1:Friction})"
	},
	"isTyping(e:)": {
		"scope": "source.e2",
		"prefix": "isTyping",
		"description": "(1 OPS) function normal isTyping(This)",
		"body": "isTyping(${1:This})"
	},
	"op:mul(cc)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function complex op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"findClearWhitePlayerPropList()": {
		"scope": "source.e2",
		"prefix": "findClearWhitePlayerPropList",
		"description": "(10 OPS) function void findClearWhitePlayerPropList()",
		"body": "findClearWhitePlayerPropList()"
	},
	"op:idx(s=xwlss)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"op:idx(a=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"propShadow(e:n)": {
		"scope": "source.e2",
		"prefix": "propShadow",
		"description": "(10 OPS) function void propShadow(Shadowenable)",
		"body": "propShadow(${1:Shadowenable})"
	},
	"entity()": {
		"scope": "source.e2",
		"prefix": "entity",
		"description": "(1 OPS) function entity entity()",
		"body": "entity()"
	},
	"op:idx(a=tsa)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"setFtrace(r:nxft)": {
		"scope": "source.e2",
		"prefix": "setFtrace",
		"description": "(5 OPS) function ftrace setFtrace()",
		"body": "setFtrace()"
	},
	"soundStop(sn)": {
		"scope": "source.e2",
		"prefix": "soundStop",
		"description": "(5 OPS) function void soundStop(Index, Fadetime)",
		"body": "soundStop(${1:Index}, ${2:Fadetime})"
	},
	"driver(e:)": {
		"scope": "source.e2",
		"prefix": "driver",
		"description": "(5 OPS) function entity driver(This)",
		"body": "driver(${1:This})"
	},
	"identity2()": {
		"scope": "source.e2",
		"prefix": "identity2",
		"description": "(5 OPS) function matrix2 identity2()",
		"body": "identity2()"
	},
	"egpCopy(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpCopy",
		"description": "(15 OPS) function void egpCopy(Index, Fromindex)",
		"body": "egpCopy(${1:Index}, ${2:Fromindex})"
	},
	"getPower(xsc:)": {
		"scope": "source.e2",
		"prefix": "getPower",
		"description": "(3 OPS) function vector getPower(This)",
		"body": "getPower(${1:This})"
	},
	"toByte(sn)": {
		"scope": "source.e2",
		"prefix": "toByte",
		"description": "(20 OPS) function normal toByte()",
		"body": "toByte()"
	},
	"unset(t:s)": {
		"scope": "source.e2",
		"prefix": "unset",
		"description": "(5 OPS) function normal unset(Index)",
		"body": "unset(${1:Index})"
	},
	"egpResolution(xwl:xv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpResolution",
		"description": "(10 OPS) function void egpResolution(Topleft, Bottomright)",
		"body": "egpResolution(${1:Topleft}, ${2:Bottomright})"
	},
	"lastSaid()": {
		"scope": "source.e2",
		"prefix": "lastSaid",
		"description": "(3 OPS) function string lastSaid()",
		"body": "lastSaid()"
	},
	"isValid(e:)": {
		"scope": "source.e2",
		"prefix": "isValid",
		"description": "(10 OPS) function normal isValid(This)",
		"body": "isValid(${1:This})"
	},
	"bOr(nn)": {
		"scope": "source.e2",
		"prefix": "bOr",
		"description": "(2 OPS) function normal bOr(A, B)",
		"body": "bOr(${1:A}, ${2:B})"
	},
	"op:eq(bb)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(1 OPS) function normal op:eq(Lhs, Rhs)",
		"body": "op:eq(${1:Lhs}, ${2:Rhs})"
	},
	"op:is(t)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(1 OPS) function normal op:is(Tbl)",
		"body": "op:is(${1:Tbl})"
	},
	"findDisallowModel(s)": {
		"scope": "source.e2",
		"prefix": "findDisallowModel",
		"description": "(10 OPS) function void findDisallowModel(Model)",
		"body": "findDisallowModel(${1:Model})"
	},
	"isOnFire(e:)": {
		"scope": "source.e2",
		"prefix": "isOnFire",
		"description": "(10 OPS) function normal isOnFire(This)",
		"body": "isOnFire(${1:This})"
	},
	"setTrails(e:nnnsvnnn)": {
		"scope": "source.e2",
		"prefix": "setTrails",
		"description": "(30 OPS) function void setTrails(Startsize, Endsize, Length, Material, Color, Alpha, Attachmentid, Additive)",
		"body": "setTrails(${1:Startsize}, ${2:Endsize}, ${3:Length}, ${4:Material}, ${5:Color}, ${6:Alpha}, ${7:Attachmentid}, ${8:Additive})"
	},
	"hydraulic(nevevn)": {
		"scope": "source.e2",
		"prefix": "hydraulic",
		"description": "(30 OPS) function void hydraulic(Index, Ent1, V1, Ent2, V2, Width)",
		"body": "hydraulic(${1:Index}, ${2:Ent1}, ${3:V1}, ${4:Ent2}, ${5:V2}, ${6:Width})"
	},
	"players()": {
		"scope": "source.e2",
		"prefix": "players",
		"description": "(10 OPS) function array players()",
		"body": "players()"
	},
	"removeFtrace(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeFtrace",
		"description": "(5 OPS) function ftrace removeFtrace()",
		"body": "removeFtrace()"
	},
	"setVector4(xwl:sxv4)": {
		"scope": "source.e2",
		"prefix": "setVector4",
		"description": "(5 OPS) function vector4 setVector4()",
		"body": "setVector4()"
	},
	"dsGetGroup()": {
		"scope": "source.e2",
		"prefix": "dsGetGroup",
		"description": "(1 OPS) function string dsGetGroup()",
		"body": "dsGetGroup()"
	},
	"op:idx(xwl=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"writeString(xwl:snnvv)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y, Textcolor, Bgcolor)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor})"
	},
	"findClipToSphere(vn)": {
		"scope": "source.e2",
		"prefix": "findClipToSphere",
		"description": "(5 OPS) function normal findClipToSphere(Center, Radius)",
		"body": "findClipToSphere(${1:Center}, ${2:Radius})"
	},
	"toString(n:n)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(25 OPS) function string toString(Base)",
		"body": "toString(${1:Base})"
	},
	"findIncludeEntities(r)": {
		"scope": "source.e2",
		"prefix": "findIncludeEntities",
		"description": "(10 OPS) function void findIncludeEntities(Arr)",
		"body": "findIncludeEntities(${1:Arr})"
	},
	"op:idx(e=xgtse)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"shiftWirelink(r:)": {
		"scope": "source.e2",
		"prefix": "shiftWirelink",
		"description": "(7 OPS) function wirelink shiftWirelink()",
		"body": "shiftWirelink()"
	},
	"tsRayCircleIntersection(vv)": {
		"scope": "source.e2",
		"prefix": "tsRayCircleIntersection",
		"description": "(20 OPS) function tracedata tsRayCircleIntersection(Start, Dir)",
		"body": "tsRayCircleIntersection(${1:Start}, ${2:Dir})"
	},
	"minVec(vv)": {
		"scope": "source.e2",
		"prefix": "minVec",
		"description": "(10 OPS) function vector minVec(Rv1, Rv2)",
		"body": "minVec(${1:Rv1}, ${2:Rv2})"
	},
	"egpOrderBelow(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpOrderBelow",
		"description": "(15 OPS) function void egpOrderBelow(Index, Belowthis)",
		"body": "egpOrderBelow(${1:Index}, ${2:Belowthis})"
	},
	"gRemoveAllVector4s(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllVector4s",
		"description": "(5 OPS) function void gRemoveAllVector4s()",
		"body": "gRemoveAllVector4s()"
	},
	"op:idx(m=esm)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"angSpeedLimit()": {
		"scope": "source.e2",
		"prefix": "angSpeedLimit",
		"description": "(1 OPS) function normal angSpeedLimit()",
		"body": "angSpeedLimit()"
	},
	"cot(n)": {
		"scope": "source.e2",
		"prefix": "cot",
		"description": "(2 OPS) function normal cot()",
		"body": "cot()"
	},
	"op:sub(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(2 OPS) function vector2 op:sub()",
		"body": "op:sub()"
	},
	"csch(c)": {
		"scope": "source.e2",
		"prefix": "csch",
		"description": "(3 OPS) function complex csch(Z)",
		"body": "csch(${1:Z})"
	},
	"nowirelink()": {
		"scope": "source.e2",
		"prefix": "nowirelink",
		"description": "(1 OPS) function wirelink nowirelink()",
		"body": "nowirelink()"
	},
	"op:is(xm2)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(5 OPS) function normal op:is(Rv1)",
		"body": "op:is(${1:Rv1})"
	},
	"dsSend(ssnxv4)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"propSetVelocity(e:v)": {
		"scope": "source.e2",
		"prefix": "propSetVelocity",
		"description": "(10 OPS) function void propSetVelocity(Velocity)",
		"body": "propSetVelocity(${1:Velocity})"
	},
	"propDelete(e:)": {
		"scope": "source.e2",
		"prefix": "propDelete",
		"description": "(10 OPS) function void propDelete(This)",
		"body": "propDelete(${1:This})"
	},
	"rotation(xtd:)": {
		"scope": "source.e2",
		"prefix": "rotation",
		"description": "(20 OPS) function normal rotation(This)",
		"body": "rotation(${1:This})"
	},
	"op:neq(qq)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(6 OPS) function normal op:neq(Lhs, Rhs)",
		"body": "op:neq(${1:Lhs}, ${2:Rhs})"
	},
	"clamp(xv2nn)": {
		"scope": "source.e2",
		"prefix": "clamp",
		"description": "(3 OPS) function vector2 clamp(Input, Min, Max)",
		"body": "clamp(${1:Input}, ${2:Min}, ${3:Max})"
	},
	"getColor4(e:)": {
		"scope": "source.e2",
		"prefix": "getColor4",
		"description": "(2 OPS) function vector4 getColor4(This)",
		"body": "getColor4(${1:This})"
	},
	"log2(c)": {
		"scope": "source.e2",
		"prefix": "log2",
		"description": "(2 OPS) function complex log2(Z)",
		"body": "log2(${1:Z})"
	},
	"op:idx(vnn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(2 OPS) function normal op:idx(Index, Value)",
		"body": "op:idx(${1:Index}, ${2:Value})"
	},
	"op:is(xwl)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(2 OPS) function normal op:is(Value)",
		"body": "op:is(${1:Value})"
	},
	"op:mul(xm4n)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function matrix4 op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"op:div(qc)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(9 OPS) function quaternion op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"op:div(xv4n)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(4 OPS) function vector4 op:div()",
		"body": "op:div()"
	},
	"op:div(xm2n)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(5 OPS) function matrix2 op:div(Rv1, Rv2)",
		"body": "op:div(${1:Rv1}, ${2:Rv2})"
	},
	"egpMaxObjects()": {
		"scope": "source.e2",
		"prefix": "egpMaxObjects",
		"description": "(10 OPS) function normal egpMaxObjects()",
		"body": "egpMaxObjects()"
	},
	"rgb2hsv(v)": {
		"scope": "source.e2",
		"prefix": "rgb2hsv",
		"description": "(2 OPS) function vector rgb2hsv(Rgb)",
		"body": "rgb2hsv(${1:Rgb})"
	},
	"getPlayerColor(e:)": {
		"scope": "source.e2",
		"prefix": "getPlayerColor",
		"description": "(2 OPS) function vector getPlayerColor(This)",
		"body": "getPlayerColor(${1:This})"
	},
	"setManual(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setManual",
		"description": "(3 OPS) function stcontrol setManual(Nn)",
		"body": "setManual(${1:Nn})"
	},
	"egpFidelity(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpFidelity",
		"description": "(10 OPS) function void egpFidelity(Index, Fidelity)",
		"body": "egpFidelity(${1:Index}, ${2:Fidelity})"
	},
	"maxOfType(s)": {
		"scope": "source.e2",
		"prefix": "maxOfType",
		"description": "(5 OPS) function normal maxOfType(Typename)",
		"body": "maxOfType(${1:Typename})"
	},
	"op:idx(c=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"up(b:)": {
		"scope": "source.e2",
		"prefix": "up",
		"description": "(1 OPS) function vector up(This)",
		"body": "up(${1:This})"
	},
	"gDeleteAllVec()": {
		"scope": "source.e2",
		"prefix": "gDeleteAllVec",
		"description": "(5 OPS) function void gDeleteAllVec()",
		"body": "gDeleteAllVec()"
	},
	"add(r:r)": {
		"scope": "source.e2",
		"prefix": "add",
		"description": "(1 OPS) function array add(Other)",
		"body": "add(${1:Other})"
	},
	"children(e:)": {
		"scope": "source.e2",
		"prefix": "children",
		"description": "(20 OPS) function array children(This)",
		"body": "children(${1:This})"
	},
	"toString(xv4:)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(7 OPS) function string toString(V)",
		"body": "toString(${1:V})"
	},
	"op:idx(xtd=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"setPowerPI(xsc:r)": {
		"scope": "source.e2",
		"prefix": "setPowerPI",
		"description": "(8 OPS) function stcontrol setPowerPI(Aa)",
		"body": "setPowerPI(${1:Aa})"
	},
	"toArray(t:)": {
		"scope": "source.e2",
		"prefix": "toArray",
		"description": "(5 OPS) function array toArray(This)",
		"body": "toArray(${1:This})"
	},
	"propGravity(e:n)": {
		"scope": "source.e2",
		"prefix": "propGravity",
		"description": "(10 OPS) function void propGravity(Gravity)",
		"body": "propGravity(${1:Gravity})"
	},
	"coth(c)": {
		"scope": "source.e2",
		"prefix": "coth",
		"description": "(4 OPS) function complex coth(Z)",
		"body": "coth(${1:Z})"
	},
	"getCopy(xsc:)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function stcontrol getCopy(This)",
		"body": "getCopy(${1:This})"
	},
	"setGainP(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setGainP",
		"description": "(7 OPS) function stcontrol setGainP(Np)",
		"body": "setGainP(${1:Np})"
	},
	"massCenterL(e:)": {
		"scope": "source.e2",
		"prefix": "massCenterL",
		"description": "(10 OPS) function vector massCenterL(This)",
		"body": "massCenterL(${1:This})"
	},
	"applyOffsetForce(e:vv)": {
		"scope": "source.e2",
		"prefix": "applyOffsetForce",
		"description": "(30 OPS) function void applyOffsetForce(Force, Position)",
		"body": "applyOffsetForce(${1:Force}, ${2:Position})"
	},
	"row(xm4:n)": {
		"scope": "source.e2",
		"prefix": "row",
		"description": "(5 OPS) function vector4 row(Rv2)",
		"body": "row(${1:Rv2})"
	},
	"id(e:)": {
		"scope": "source.e2",
		"prefix": "id",
		"description": "(5 OPS) function normal id(This)",
		"body": "id(${1:This})"
	},
	"gRemoveAllEntitys(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllEntitys",
		"description": "(5 OPS) function void gRemoveAllEntitys()",
		"body": "gRemoveAllEntitys()"
	},
	"popString(r:)": {
		"scope": "source.e2",
		"prefix": "popString",
		"description": "(7 OPS) function string popString()",
		"body": "popString()"
	},
	"column(m:n)": {
		"scope": "source.e2",
		"prefix": "column",
		"description": "(5 OPS) function vector column(Rv2)",
		"body": "column(${1:Rv2})"
	},
	"rerotate(e:a)": {
		"scope": "source.e2",
		"prefix": "rerotate",
		"description": "(20 OPS) function void rerotate(Rot)",
		"body": "rerotate(${1:Rot})"
	},
	"setWindup(xsc:r)": {
		"scope": "source.e2",
		"prefix": "setWindup",
		"description": "(3 OPS) function stcontrol setWindup(Aa)",
		"body": "setWindup(${1:Aa})"
	},
	"op:idx(t=xwlst)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function table op:idx()",
		"body": "op:idx()"
	},
	"seatSpawn(svan)": {
		"scope": "source.e2",
		"prefix": "seatSpawn",
		"description": "(60 OPS) function entity seatSpawn(Model, Pos, Rot, Frozen)",
		"body": "seatSpawn(${1:Model}, ${2:Pos}, ${3:Rot}, ${4:Frozen})"
	},
	"setTracedata(r:nxtd)": {
		"scope": "source.e2",
		"prefix": "setTracedata",
		"description": "(5 OPS) function tracedata setTracedata()",
		"body": "setTracedata()"
	},
	"repeat(s:n)": {
		"scope": "source.e2",
		"prefix": "repeat",
		"description": "(20 OPS) function string repeat()",
		"body": "repeat()"
	},
	"cosh(n)": {
		"scope": "source.e2",
		"prefix": "cosh",
		"description": "(2 OPS) function normal cosh()",
		"body": "cosh()"
	},
	"findExcludeModel(s)": {
		"scope": "source.e2",
		"prefix": "findExcludeModel",
		"description": "(10 OPS) function void findExcludeModel(Model)",
		"body": "findExcludeModel(${1:Model})"
	},
	"op:mul(qc)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(6 OPS) function quaternion op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"log(c)": {
		"scope": "source.e2",
		"prefix": "log",
		"description": "(2 OPS) function complex log(Z)",
		"body": "log(${1:Z})"
	},
	"op:exp(xm2n)": {
		"scope": "source.e2",
		"prefix": "op:exp",
		"description": "(5 OPS) function matrix2 op:exp(Rv1, Rv2)",
		"body": "op:exp(${1:Rv1}, ${2:Rv2})"
	},
	"tsShapeShare(n)": {
		"scope": "source.e2",
		"prefix": "tsShapeShare",
		"description": "(20 OPS) function void tsShapeShare(Share)",
		"body": "tsShapeShare(${1:Share})"
	},
	"changed(v)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(1 OPS) function normal changed(Value)",
		"body": "changed(${1:Value})"
	},
	"fileAppend(ss)": {
		"scope": "source.e2",
		"prefix": "fileAppend",
		"description": "(20 OPS) function void fileAppend(Filename, Data)",
		"body": "fileAppend(${1:Filename}, ${2:Data})"
	},
	"exists(t:s)": {
		"scope": "source.e2",
		"prefix": "exists",
		"description": "(1 OPS) function normal exists(Index)",
		"body": "exists(${1:Index})"
	},
	"max(nnn)": {
		"scope": "source.e2",
		"prefix": "max",
		"description": "(1 OPS) function normal max()",
		"body": "max()"
	},
	"constraintBreak(e:e)": {
		"scope": "source.e2",
		"prefix": "constraintBreak",
		"description": "(5 OPS) function void constraintBreak(Ent2)",
		"body": "constraintBreak(${1:Ent2})"
	},
	"gGetEnt(n)": {
		"scope": "source.e2",
		"prefix": "gGetEnt",
		"description": "(8 OPS) function entity gGetEnt()",
		"body": "gGetEnt()"
	},
	"lightRemoveAll()": {
		"scope": "source.e2",
		"prefix": "lightRemoveAll",
		"description": "(2 OPS) function void lightRemoveAll()",
		"body": "lightRemoveAll()"
	},
	"lightPos(nv)": {
		"scope": "source.e2",
		"prefix": "lightPos",
		"description": "(10 OPS) function void lightPos(Index, Position)",
		"body": "lightPos(${1:Index}, ${2:Position})"
	},
	"rangerOffsetHull(nvvvv)": {
		"scope": "source.e2",
		"prefix": "rangerOffsetHull",
		"description": "(20 OPS) function ranger rangerOffsetHull(Distance, Startpos, Direction, Mins, Maxs)",
		"body": "rangerOffsetHull(${1:Distance}, ${2:Startpos}, ${3:Direction}, ${4:Mins}, ${5:Maxs})"
	},
	"z(v:)": {
		"scope": "source.e2",
		"prefix": "z",
		"description": "(1 OPS) function normal z(This)",
		"body": "z(${1:This})"
	},
	"rayCircleIntersection(vvvvn)": {
		"scope": "source.e2",
		"prefix": "rayCircleIntersection",
		"description": "(20 OPS) function vector rayCircleIntersection(Start, Dir, Pos, Normal, Radius)",
		"body": "rayCircleIntersection(${1:Start}, ${2:Dir}, ${3:Pos}, ${4:Normal}, ${5:Radius})"
	},
	"rope(nevev)": {
		"scope": "source.e2",
		"prefix": "rope",
		"description": "(30 OPS) function void rope(Index, Ent1, V1, Ent2, V2)",
		"body": "rope(${1:Index}, ${2:Ent1}, ${3:V1}, ${4:Ent2}, ${5:V2})"
	},
	"interval(n)": {
		"scope": "source.e2",
		"prefix": "interval",
		"description": "(20 OPS) function void interval(Rv1)",
		"body": "interval(${1:Rv1})"
	},
	"randvec(nn)": {
		"scope": "source.e2",
		"prefix": "randvec",
		"description": "(5 OPS) function vector randvec(Min, Max)",
		"body": "randvec(${1:Min}, ${2:Max})"
	},
	"getGainID(xsc:)": {
		"scope": "source.e2",
		"prefix": "getGainID",
		"description": "(3 OPS) function vector2 getGainID(This)",
		"body": "getGainID(${1:This})"
	},
	"egpScrH(e)": {
		"scope": "source.e2",
		"prefix": "egpScrH",
		"description": "(10 OPS) function normal egpScrH(Ply)",
		"body": "egpScrH(${1:Ply})"
	},
	"op:div(na)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function angle op:div(Rv1, Rv2)",
		"body": "op:div(${1:Rv1}, ${2:Rv2})"
	},
	"egpParent(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpParent",
		"description": "(10 OPS) function normal egpParent(Index)",
		"body": "egpParent(${1:Index})"
	},
	"getSurfPropsName(xft:)": {
		"scope": "source.e2",
		"prefix": "getSurfPropsName",
		"description": "(3 OPS) function string getSurfPropsName(This)",
		"body": "getSurfPropsName(${1:This})"
	},
	"findClipFromSphere(vn)": {
		"scope": "source.e2",
		"prefix": "findClipFromSphere",
		"description": "(5 OPS) function normal findClipFromSphere(Center, Radius)",
		"body": "findClipFromSphere(${1:Center}, ${2:Radius})"
	},
	"toString(n:)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(15 OPS) function string toString(This)",
		"body": "toString(${1:This})"
	},
	"sinhr(n)": {
		"scope": "source.e2",
		"prefix": "sinhr",
		"description": "(2 OPS) function normal sinhr()",
		"body": "sinhr()"
	},
	"setGainPI(xsc:r)": {
		"scope": "source.e2",
		"prefix": "setGainPI",
		"description": "(7 OPS) function stcontrol setGainPI(Aa)",
		"body": "setGainPI(${1:Aa})"
	},
	"playerCanPrint()": {
		"scope": "source.e2",
		"prefix": "playerCanPrint",
		"description": "(100 OPS) function normal playerCanPrint()",
		"body": "playerCanPrint()"
	},
	"egpHudToggle(xwl:)": {
		"scope": "source.e2",
		"prefix": "egpHudToggle",
		"description": "(25 OPS) function void egpHudToggle(This)",
		"body": "egpHudToggle(${1:This})"
	},
	"getConnectedEntities(e:r)": {
		"scope": "source.e2",
		"prefix": "getConnectedEntities",
		"description": "(20 OPS) function array getConnectedEntities(Filters)",
		"body": "getConnectedEntities(${1:Filters})"
	},
	"setW(xv4:n)": {
		"scope": "source.e2",
		"prefix": "setW",
		"description": "(3 OPS) function vector4 setW()",
		"body": "setW()"
	},
	"parent(xtd:n)": {
		"scope": "source.e2",
		"prefix": "parent",
		"description": "(20 OPS) function entity parent(Index)",
		"body": "parent(${1:Index})"
	},
	"lastConnectedPlayer()": {
		"scope": "source.e2",
		"prefix": "lastConnectedPlayer",
		"description": "(3 OPS) function entity lastConnectedPlayer()",
		"body": "lastConnectedPlayer()"
	},
	"holoAng(na)": {
		"scope": "source.e2",
		"prefix": "holoAng",
		"description": "(15 OPS) function void holoAng(Index, Ang)",
		"body": "holoAng(${1:Index}, ${2:Ang})"
	},
	"isNPC(e:)": {
		"scope": "source.e2",
		"prefix": "isNPC",
		"description": "(10 OPS) function normal isNPC(This)",
		"body": "isNPC(${1:This})"
	},
	"holoColor(nv)": {
		"scope": "source.e2",
		"prefix": "holoColor",
		"description": "(15 OPS) function void holoColor(Index, Color)",
		"body": "holoColor(${1:Index}, ${2:Color})"
	},
	"gRemoveAllMatrix4s(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllMatrix4s",
		"description": "(5 OPS) function void gRemoveAllMatrix4s()",
		"body": "gRemoveAllMatrix4s()"
	},
	"isDedicated()": {
		"scope": "source.e2",
		"prefix": "isDedicated",
		"description": "(1 OPS) function normal isDedicated()",
		"body": "isDedicated()"
	},
	"isSuperAdmin(e:)": {
		"scope": "source.e2",
		"prefix": "isSuperAdmin",
		"description": "(5 OPS) function normal isSuperAdmin(This)",
		"body": "isSuperAdmin(${1:This})"
	},
	"op:idx(xwl=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"trimLeft(s:)": {
		"scope": "source.e2",
		"prefix": "trimLeft",
		"description": "(20 OPS) function string trimLeft()",
		"body": "trimLeft()"
	},
	"op:idx(xef=xwlsxef)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"noFTrace()": {
		"scope": "source.e2",
		"prefix": "noFTrace",
		"description": "(1 OPS) function ftrace noFTrace()",
		"body": "noFTrace()"
	},
	"dsClk()": {
		"scope": "source.e2",
		"prefix": "dsClk",
		"description": "(1 OPS) function normal dsClk()",
		"body": "dsClk()"
	},
	"setColor(e:v)": {
		"scope": "source.e2",
		"prefix": "setColor",
		"description": "(2 OPS) function void setColor(C)",
		"body": "setColor(${1:C})"
	},
	"tuneProcCHRSP(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "tuneProcCHRSP",
		"description": "(7 OPS) function stcontrol tuneProcCHRSP(Nk, Nt, Nl)",
		"body": "tuneProcCHRSP(${1:Nk}, ${2:Nt}, ${3:Nl})"
	},
	"getTimeRatio(xsc:)": {
		"scope": "source.e2",
		"prefix": "getTimeRatio",
		"description": "(3 OPS) function normal getTimeRatio(This)",
		"body": "getTimeRatio(${1:This})"
	},
	"popRanger(t:)": {
		"scope": "source.e2",
		"prefix": "popRanger",
		"description": "(10 OPS) function ranger popRanger()",
		"body": "popRanger()"
	},
	"egpWedgeOutline(xwl:nxv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpWedgeOutline",
		"description": "(15 OPS) function void egpWedgeOutline(Index, Pos, Size)",
		"body": "egpWedgeOutline(${1:Index}, ${2:Pos}, ${3:Size})"
	},
	"tracedata(r:n)": {
		"scope": "source.e2",
		"prefix": "tracedata",
		"description": "(5 OPS) function tracedata tracedata()",
		"body": "tracedata()"
	},
	"propPhysicalMaterial(e:)": {
		"scope": "source.e2",
		"prefix": "propPhysicalMaterial",
		"description": "(10 OPS) function string propPhysicalMaterial(This)",
		"body": "propPhysicalMaterial(${1:This})"
	},
	"reposition(e:v)": {
		"scope": "source.e2",
		"prefix": "reposition",
		"description": "(20 OPS) function void reposition(Pos)",
		"body": "reposition(${1:Pos})"
	},
	"holoColor(nxv4)": {
		"scope": "source.e2",
		"prefix": "holoColor",
		"description": "(15 OPS) function void holoColor(Index, Color)",
		"body": "holoColor(${1:Index}, ${2:Color})"
	},
	"setX(v:n)": {
		"scope": "source.e2",
		"prefix": "setX",
		"description": "(2 OPS) function vector setX(X)",
		"body": "setX(${1:X})"
	},
	"getWindupU(xsc:)": {
		"scope": "source.e2",
		"prefix": "getWindupU",
		"description": "(3 OPS) function normal getWindupU(This)",
		"body": "getWindupU(${1:This})"
	},
	"tuneITAE(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "tuneITAE",
		"description": "(7 OPS) function stcontrol tuneITAE(Nk, Nt, Nl)",
		"body": "tuneITAE(${1:Nk}, ${2:Nt}, ${3:Nl})"
	},
	"findDisallowPlayerProps(e)": {
		"scope": "source.e2",
		"prefix": "findDisallowPlayerProps",
		"description": "(10 OPS) function void findDisallowPlayerProps(Ply)",
		"body": "findDisallowPlayerProps(${1:Ply})"
	},
	"det(m)": {
		"scope": "source.e2",
		"prefix": "det",
		"description": "(5 OPS) function normal det(Rv1)",
		"body": "det(${1:Rv1})"
	},
	"shiftL(v)": {
		"scope": "source.e2",
		"prefix": "shiftL",
		"description": "(2 OPS) function vector shiftL(Vec)",
		"body": "shiftL(${1:Vec})"
	},
	"vel(b:)": {
		"scope": "source.e2",
		"prefix": "vel",
		"description": "(1 OPS) function vector vel(This)",
		"body": "vel(${1:This})"
	},
	"toRad(xv2)": {
		"scope": "source.e2",
		"prefix": "toRad",
		"description": "(2 OPS) function vector2 toRad(Xv2)",
		"body": "toRad(${1:Xv2})"
	},
	"soundPlay(nnsn)": {
		"scope": "source.e2",
		"prefix": "soundPlay",
		"description": "(25 OPS) function void soundPlay(Index, Duration, Path, Fade)",
		"body": "soundPlay(${1:Index}, ${2:Duration}, ${3:Path}, ${4:Fade})"
	},
	"getControlTerm(xsc:)": {
		"scope": "source.e2",
		"prefix": "getControlTerm",
		"description": "(3 OPS) function vector getControlTerm(This)",
		"body": "getControlTerm(${1:This})"
	},
	"applyAngForce(e:a)": {
		"scope": "source.e2",
		"prefix": "applyAngForce",
		"description": "(30 OPS) function void applyAngForce(Angforce)",
		"body": "applyAngForce(${1:Angforce})"
	},
	"jsonDecode(s)": {
		"scope": "source.e2",
		"prefix": "jsonDecode",
		"description": "(50 OPS) function table jsonDecode(Data)",
		"body": "jsonDecode(${1:Data})"
	},
	"op:neq(aa)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(3 OPS) function normal op:neq(Rv1, Rv2)",
		"body": "op:neq(${1:Rv1}, ${2:Rv2})"
	},
	"rotateAroundAxis(a:vn)": {
		"scope": "source.e2",
		"prefix": "rotateAroundAxis",
		"description": "(5 OPS) function angle rotateAroundAxis(Axis, Degrees)",
		"body": "rotateAroundAxis(${1:Axis}, ${2:Degrees})"
	},
	"qRotation(v)": {
		"scope": "source.e2",
		"prefix": "qRotation",
		"description": "(9 OPS) function quaternion qRotation(Rv1)",
		"body": "qRotation(${1:Rv1})"
	},
	"clipToTypeid(t:s)": {
		"scope": "source.e2",
		"prefix": "clipToTypeid",
		"description": "(5 OPS) function table clipToTypeid(Typeid)",
		"body": "clipToTypeid(${1:Typeid})"
	},
	"setColor(e:xv4)": {
		"scope": "source.e2",
		"prefix": "setColor",
		"description": "(2 OPS) function void setColor(C)",
		"body": "setColor(${1:C})"
	},
	"unset(t:n)": {
		"scope": "source.e2",
		"prefix": "unset",
		"description": "(5 OPS) function normal unset(Index)",
		"body": "unset(${1:Index})"
	},
	"op:idx(sn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(20 OPS) function string op:idx(Index)",
		"body": "op:idx(${1:Index})"
	},
	"op:idx(xv2n)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(2 OPS) function normal op:idx(Index)",
		"body": "op:idx(${1:Index})"
	},
	"setSkin(e:n)": {
		"scope": "source.e2",
		"prefix": "setSkin",
		"description": "(10 OPS) function void setSkin(Skinindex)",
		"body": "setSkin(${1:Skinindex})"
	},
	"egpVertices(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpVertices",
		"description": "(10 OPS) function array egpVertices(Index)",
		"body": "egpVertices(${1:Index})"
	},
	"op:eq(xm4xm4)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(5 OPS) function normal op:eq(Rv1, Rv2)",
		"body": "op:eq(${1:Rv1}, ${2:Rv2})"
	},
	"duped()": {
		"scope": "source.e2",
		"prefix": "duped",
		"description": "(1 OPS) function normal duped()",
		"body": "duped()"
	},
	"getManual(xsc:)": {
		"scope": "source.e2",
		"prefix": "getManual",
		"description": "(3 OPS) function normal getManual(This)",
		"body": "getManual(${1:This})"
	},
	"vertices(xtd:)": {
		"scope": "source.e2",
		"prefix": "vertices",
		"description": "(20 OPS) function vector vertices(This)",
		"body": "vertices(${1:This})"
	},
	"op:neq(ee)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(5 OPS) function normal op:neq(Lhs, Rhs)",
		"body": "op:neq(${1:Lhs}, ${2:Rhs})"
	},
	"length2(v:)": {
		"scope": "source.e2",
		"prefix": "length2",
		"description": "(5 OPS) function normal length2(This)",
		"body": "length2(${1:This})"
	},
	"unicodeLength(s:)": {
		"scope": "source.e2",
		"prefix": "unicodeLength",
		"description": "(20 OPS) function normal unicodeLength()",
		"body": "unicodeLength()"
	},
	"op:idx(xft=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"toString(a)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(5 OPS) function string toString(A)",
		"body": "toString(${1:A})"
	},
	"op:mul(nm)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function matrix op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"toAngle(v:v)": {
		"scope": "source.e2",
		"prefix": "toAngle",
		"description": "(3 OPS) function angle toAngle(Up)",
		"body": "toAngle(${1:Up})"
	},
	"ballsocket(evevvv)": {
		"scope": "source.e2",
		"prefix": "ballsocket",
		"description": "(30 OPS) function void ballsocket(Ent1, V, Ent2, Mins, Maxs, Frictions)",
		"body": "ballsocket(${1:Ent1}, ${2:V}, ${3:Ent2}, ${4:Mins}, ${5:Maxs}, ${6:Frictions})"
	},
	"aimPos(e:)": {
		"scope": "source.e2",
		"prefix": "aimPos",
		"description": "(10 OPS) function vector aimPos(This)",
		"body": "aimPos(${1:This})"
	},
	"popQuaternion(t:)": {
		"scope": "source.e2",
		"prefix": "popQuaternion",
		"description": "(10 OPS) function quaternion popQuaternion()",
		"body": "popQuaternion()"
	},
	"dsSend(ssa)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"radius(e:)": {
		"scope": "source.e2",
		"prefix": "radius",
		"description": "(5 OPS) function normal radius(This)",
		"body": "radius(${1:This})"
	},
	"getDirLocal(xft:a)": {
		"scope": "source.e2",
		"prefix": "getDirLocal",
		"description": "(3 OPS) function vector getDirLocal(Va)",
		"body": "getDirLocal(${1:Va})"
	},
	"ncount(t:)": {
		"scope": "source.e2",
		"prefix": "ncount",
		"description": "(3 OPS) function normal ncount(This)",
		"body": "ncount(${1:This})"
	},
	"sinh(c)": {
		"scope": "source.e2",
		"prefix": "sinh",
		"description": "(3 OPS) function complex sinh(Z)",
		"body": "sinh(${1:Z})"
	},
	"lastSaidWhen(e:)": {
		"scope": "source.e2",
		"prefix": "lastSaidWhen",
		"description": "(3 OPS) function normal lastSaidWhen(This)",
		"body": "lastSaidWhen(${1:This})"
	},
	"parentTo(e:e)": {
		"scope": "source.e2",
		"prefix": "parentTo",
		"description": "(20 OPS) function void parentTo(Target)",
		"body": "parentTo(${1:Target})"
	},
	"gSetGroup(s)": {
		"scope": "source.e2",
		"prefix": "gSetGroup",
		"description": "(1 OPS) function void gSetGroup(Groupname)",
		"body": "gSetGroup(${1:Groupname})"
	},
	"op:neq(nc)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(2 OPS) function normal op:neq(Lhs, Rhs)",
		"body": "op:neq(${1:Lhs}, ${2:Rhs})"
	},
	"op:idx(n=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"nobone()": {
		"scope": "source.e2",
		"prefix": "nobone",
		"description": "(1 OPS) function bone nobone()",
		"body": "nobone()"
	},
	"remWindupD(xsc:)": {
		"scope": "source.e2",
		"prefix": "remWindupD",
		"description": "(3 OPS) function stcontrol remWindupD(This)",
		"body": "remWindupD(${1:This})"
	},
	"angVel(e:)": {
		"scope": "source.e2",
		"prefix": "angVel",
		"description": "(5 OPS) function angle angVel(This)",
		"body": "angVel(${1:This})"
	},
	"insertTracedata(r:nxtd)": {
		"scope": "source.e2",
		"prefix": "insertTracedata",
		"description": "(7 OPS) function tracedata insertTracedata()",
		"body": "insertTracedata()"
	},
	"writeUnicodeString(xwl:snnnvn)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y, Textcolor, Bgcolor, Flash)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor}, ${6:Flash})"
	},
	"cameraToggle(nne)": {
		"scope": "source.e2",
		"prefix": "cameraToggle",
		"description": "(20 OPS) function void cameraToggle(Index, Toggle, Vehicle)",
		"body": "cameraToggle(${1:Index}, ${2:Toggle}, ${3:Vehicle})"
	},
	"dsSend(ssna)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"gDeleteAllEnt()": {
		"scope": "source.e2",
		"prefix": "gDeleteAllEnt",
		"description": "(5 OPS) function void gDeleteAllEnt()",
		"body": "gDeleteAllEnt()"
	},
	"dsSend(ssnm)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"unshiftNumber(t:n)": {
		"scope": "source.e2",
		"prefix": "unshiftNumber",
		"description": "(10 OPS) function void unshiftNumber()",
		"body": "unshiftNumber()"
	},
	"dsSend(ssm)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSendDirect(srm)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"pushNumber(r:n)": {
		"scope": "source.e2",
		"prefix": "pushNumber",
		"description": "(7 OPS) function normal pushNumber()",
		"body": "pushNumber()"
	},
	"soundPurge()": {
		"scope": "source.e2",
		"prefix": "soundPurge",
		"description": "(5 OPS) function void soundPurge()",
		"body": "soundPurge()"
	},
	"dsSendDirect(sem)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"cothr(n)": {
		"scope": "source.e2",
		"prefix": "cothr",
		"description": "(2 OPS) function normal cothr()",
		"body": "cothr()"
	},
	"dsGetMatrix2()": {
		"scope": "source.e2",
		"prefix": "dsGetMatrix2",
		"description": "(5 OPS) function matrix2 dsGetMatrix2()",
		"body": "dsGetMatrix2()"
	},
	"op:bxor(nn)": {
		"scope": "source.e2",
		"prefix": "op:bxor",
		"description": "(2 OPS) function normal op:bxor(A, B)",
		"body": "op:bxor(${1:A}, ${2:B})"
	},
	"addEntHitOnly(xft:e)": {
		"scope": "source.e2",
		"prefix": "addEntHitOnly",
		"description": "(3 OPS) function ftrace addEntHitOnly(Ve)",
		"body": "addEntHitOnly(${1:Ve})"
	},
	"runOnPlayerConnect(n)": {
		"scope": "source.e2",
		"prefix": "runOnPlayerConnect",
		"description": "(3 OPS) function void runOnPlayerConnect(Activate)",
		"body": "runOnPlayerConnect(${1:Activate})"
	},
	"setScale(xef:n)": {
		"scope": "source.e2",
		"prefix": "setScale",
		"description": "(1 OPS) function effect setScale(Scale)",
		"body": "setScale(${1:Scale})"
	},
	"dsSendDirect(srxm2)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"dsSendDirect(sexm2)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"egpQueueScreen()": {
		"scope": "source.e2",
		"prefix": "egpQueueScreen",
		"description": "(10 OPS) function entity egpQueueScreen()",
		"body": "egpQueueScreen()"
	},
	"newFTrace()": {
		"scope": "source.e2",
		"prefix": "newFTrace",
		"description": "(20 OPS) function ftrace newFTrace()",
		"body": "newFTrace()"
	},
	"op:idx(xrd=tsxrd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"op:eq(vv)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(2 OPS) function normal op:eq(Other)",
		"body": "op:eq(${1:Other})"
	},
	"op:idx(t=xgtst)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function table op:idx()",
		"body": "op:idx()"
	},
	"dsSend(ssnb)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"op:idx(xv2=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"clamp(aaa)": {
		"scope": "source.e2",
		"prefix": "clamp",
		"description": "(5 OPS) function angle clamp(Rv1, Rv2, Rv3)",
		"body": "clamp(${1:Rv1}, ${2:Rv2}, ${3:Rv3})"
	},
	"dsSendDirect(srb)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"dsSendDirect(seb)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"dsGetMatrix4()": {
		"scope": "source.e2",
		"prefix": "dsGetMatrix4",
		"description": "(5 OPS) function matrix4 dsGetMatrix4()",
		"body": "dsGetMatrix4()"
	},
	"dsSend(ssnxm4)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"gDeleteVec(s)": {
		"scope": "source.e2",
		"prefix": "gDeleteVec",
		"description": "(8 OPS) function vector gDeleteVec()",
		"body": "gDeleteVec()"
	},
	"getCopy(xft:n)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Nl)",
		"body": "getCopy(${1:Nl})"
	},
	"dsSendDirect(srxm4)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"op:div(nq)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(9 OPS) function quaternion op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"dsGetEntity()": {
		"scope": "source.e2",
		"prefix": "dsGetEntity",
		"description": "(5 OPS) function entity dsGetEntity()",
		"body": "dsGetEntity()"
	},
	"toNumber(s:n)": {
		"scope": "source.e2",
		"prefix": "toNumber",
		"description": "(20 OPS) function normal toNumber(Base)",
		"body": "toNumber(${1:Base})"
	},
	"keyPressed(e:s)": {
		"scope": "source.e2",
		"prefix": "keyPressed",
		"description": "(2 OPS) function normal keyPressed(Char)",
		"body": "keyPressed(${1:Char})"
	},
	"op:idx(xft=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"clip2(e:)": {
		"scope": "source.e2",
		"prefix": "clip2",
		"description": "(2 OPS) function normal clip2(This)",
		"body": "clip2(${1:This})"
	},
	"unshiftAngle(t:a)": {
		"scope": "source.e2",
		"prefix": "unshiftAngle",
		"description": "(10 OPS) function void unshiftAngle()",
		"body": "unshiftAngle()"
	},
	"popString(t:)": {
		"scope": "source.e2",
		"prefix": "popString",
		"description": "(10 OPS) function string popString()",
		"body": "popString()"
	},
	"cross(v:v)": {
		"scope": "source.e2",
		"prefix": "cross",
		"description": "(5 OPS) function vector cross(Other)",
		"body": "cross(${1:Other})"
	},
	"egpQueueClk(e)": {
		"scope": "source.e2",
		"prefix": "egpQueueClk",
		"description": "(10 OPS) function normal egpQueueClk(Screen)",
		"body": "egpQueueClk(${1:Screen})"
	},
	"dsSend(sse)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"cos(n)": {
		"scope": "source.e2",
		"prefix": "cos",
		"description": "(2 OPS) function normal cos()",
		"body": "cos()"
	},
	"applyOffsetForce(b:vv)": {
		"scope": "source.e2",
		"prefix": "applyOffsetForce",
		"description": "(30 OPS) function void applyOffsetForce(Force, Pos)",
		"body": "applyOffsetForce(${1:Force}, ${2:Pos})"
	},
	"dsSend(ssnv)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"toUnicodeChar(n)": {
		"scope": "source.e2",
		"prefix": "toUnicodeChar",
		"description": "(20 OPS) function string toUnicodeChar()",
		"body": "toUnicodeChar()"
	},
	"propDeleteAll()": {
		"scope": "source.e2",
		"prefix": "propDeleteAll",
		"description": "(30 OPS) function void propDeleteAll()",
		"body": "propDeleteAll()"
	},
	"dsSend(ssv)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSendDirect(srv)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"getGainPI(xsc:)": {
		"scope": "source.e2",
		"prefix": "getGainPI",
		"description": "(3 OPS) function vector2 getGainPI(This)",
		"body": "getGainPI(${1:This})"
	},
	"dsSendDirect(sev)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"writeArray(xwl:nr)": {
		"scope": "source.e2",
		"prefix": "writeArray",
		"description": "(20 OPS) function normal writeArray(Address, Data)",
		"body": "writeArray(${1:Address}, ${2:Data})"
	},
	"dsGetAngle()": {
		"scope": "source.e2",
		"prefix": "dsGetAngle",
		"description": "(5 OPS) function angle dsGetAngle()",
		"body": "dsGetAngle()"
	},
	"op:idx(b=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"dsGetMatrix()": {
		"scope": "source.e2",
		"prefix": "dsGetMatrix",
		"description": "(5 OPS) function matrix dsGetMatrix()",
		"body": "dsGetMatrix()"
	},
	"mix(xv2xv2n)": {
		"scope": "source.e2",
		"prefix": "mix",
		"description": "(4 OPS) function vector2 mix()",
		"body": "mix()"
	},
	"inputs(xwl:)": {
		"scope": "source.e2",
		"prefix": "inputs",
		"description": "(15 OPS) function array inputs(This)",
		"body": "inputs(${1:This})"
	},
	"matrix2(r:n)": {
		"scope": "source.e2",
		"prefix": "matrix2",
		"description": "(5 OPS) function matrix2 matrix2()",
		"body": "matrix2()"
	},
	"teamName(n:)": {
		"scope": "source.e2",
		"prefix": "teamName",
		"description": "(10 OPS) function string teamName(This)",
		"body": "teamName(${1:This})"
	},
	"pushTable(t:t)": {
		"scope": "source.e2",
		"prefix": "pushTable",
		"description": "(10 OPS) function void pushTable()",
		"body": "pushTable()"
	},
	"dsSendDirect(sea)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"dumpItem(xft:s)": {
		"scope": "source.e2",
		"prefix": "dumpItem",
		"description": "(15 OPS) function ftrace dumpItem(Sn)",
		"body": "dumpItem(${1:Sn})"
	},
	"gShare(n)": {
		"scope": "source.e2",
		"prefix": "gShare",
		"description": "(1 OPS) function void gShare(Share)",
		"body": "gShare(${1:Share})"
	},
	"mod(xv4n)": {
		"scope": "source.e2",
		"prefix": "mod",
		"description": "(13 OPS) function vector4 mod()",
		"body": "mod()"
	},
	"insertFtrace(r:nxft)": {
		"scope": "source.e2",
		"prefix": "insertFtrace",
		"description": "(7 OPS) function ftrace insertFtrace()",
		"body": "insertFtrace()"
	},
	"dsSend(ssn)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSendDirect(srn)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"dsSendDirect(sen)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"op:idx(s=xgtns)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"op:idx(b=tsb)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"op:mul(cq)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(6 OPS) function quaternion op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"dsSend(ssnq)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"matType(xrd:)": {
		"scope": "source.e2",
		"prefix": "matType",
		"description": "(2 OPS) function string matType(This)",
		"body": "matType(${1:This})"
	},
	"hideChat(n)": {
		"scope": "source.e2",
		"prefix": "hideChat",
		"description": "(3 OPS) function void hideChat(Hide)",
		"body": "hideChat(${1:Hide})"
	},
	"dsSend(ssq)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSendDirect(srq)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"rayMul(xft:v)": {
		"scope": "source.e2",
		"prefix": "rayMul",
		"description": "(3 OPS) function ftrace rayMul(Vv)",
		"body": "rayMul(${1:Vv})"
	},
	"floor(xv4)": {
		"scope": "source.e2",
		"prefix": "floor",
		"description": "(8 OPS) function vector4 floor(Rv1)",
		"body": "floor(${1:Rv1})"
	},
	"dsSendDirect(seq)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"adj(m)": {
		"scope": "source.e2",
		"prefix": "adj",
		"description": "(5 OPS) function matrix adj(Rv1)",
		"body": "adj(${1:Rv1})"
	},
	"findClipToPlayerProps(e)": {
		"scope": "source.e2",
		"prefix": "findClipToPlayerProps",
		"description": "(5 OPS) function normal findClipToPlayerProps(Ply)",
		"body": "findClipToPlayerProps(${1:Ply})"
	},
	"max(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "max",
		"description": "(13 OPS) function vector4 max()",
		"body": "max()"
	},
	"getTimeDelta(xsc:)": {
		"scope": "source.e2",
		"prefix": "getTimeDelta",
		"description": "(3 OPS) function normal getTimeDelta(This)",
		"body": "getTimeDelta(${1:This})"
	},
	"dsGetArray()": {
		"scope": "source.e2",
		"prefix": "dsGetArray",
		"description": "(5 OPS) function array dsGetArray()",
		"body": "dsGetArray()"
	},
	"op:cnd(n)": {
		"scope": "source.e2",
		"prefix": "op:cnd",
		"description": "(3 OPS) function void op:cnd()",
		"body": "op:cnd()"
	},
	"setMask(xft:n)": {
		"scope": "source.e2",
		"prefix": "setMask",
		"description": "(3 OPS) function ftrace setMask(Nn)",
		"body": "setMask(${1:Nn})"
	},
	"ranger(en)": {
		"scope": "source.e2",
		"prefix": "ranger",
		"description": "(20 OPS) function ranger ranger(Ent, Distance)",
		"body": "ranger(${1:Ent}, ${2:Distance})"
	},
	"printDriver(e:s)": {
		"scope": "source.e2",
		"prefix": "printDriver",
		"description": "(100 OPS) function normal printDriver(Text)",
		"body": "printDriver(${1:Text})"
	},
	"dsSend(ssr)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSendDirect(srr)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"parentBone(e:)": {
		"scope": "source.e2",
		"prefix": "parentBone",
		"description": "(5 OPS) function bone parentBone(This)",
		"body": "parentBone(${1:This})"
	},
	"gDeleteAllStr()": {
		"scope": "source.e2",
		"prefix": "gDeleteAllStr",
		"description": "(5 OPS) function void gDeleteAllStr()",
		"body": "gDeleteAllStr()"
	},
	"dsSend(ssnxft)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSendDirect(srxft)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"cameraRemove(n)": {
		"scope": "source.e2",
		"prefix": "cameraRemove",
		"description": "(10 OPS) function void cameraRemove(Index)",
		"body": "cameraRemove(${1:Index})"
	},
	"dsSendDirect(srxsc)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"op:idx(v=tsv)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"vec(xv2n)": {
		"scope": "source.e2",
		"prefix": "vec",
		"description": "(2 OPS) function vector vec(V2, Z)",
		"body": "vec(${1:V2}, ${2:Z})"
	},
	"removeMatrix(r:n)": {
		"scope": "source.e2",
		"prefix": "removeMatrix",
		"description": "(7 OPS) function matrix removeMatrix()",
		"body": "removeMatrix()"
	},
	"dsGetVector2()": {
		"scope": "source.e2",
		"prefix": "dsGetVector2",
		"description": "(5 OPS) function vector2 dsGetVector2()",
		"body": "dsGetVector2()"
	},
	"op:is(xm4)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(5 OPS) function normal op:is(Rv1)",
		"body": "op:is(${1:Rv1})"
	},
	"egpLineStrip(xwl:nr)": {
		"scope": "source.e2",
		"prefix": "egpLineStrip",
		"description": "(20 OPS) function void egpLineStrip(Index, Args)",
		"body": "egpLineStrip(${1:Index}, ${2:Args})"
	},
	"rayAABBoxIntersection(vvvv)": {
		"scope": "source.e2",
		"prefix": "rayAABBoxIntersection",
		"description": "(20 OPS) function vector rayAABBoxIntersection(Start, Dir, Pos, Size)",
		"body": "rayAABBoxIntersection(${1:Start}, ${2:Dir}, ${3:Pos}, ${4:Size})"
	},
	"op:idx(xtd=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"findClipFromEntity(e)": {
		"scope": "source.e2",
		"prefix": "findClipFromEntity",
		"description": "(5 OPS) function normal findClipFromEntity(Ent)",
		"body": "findClipFromEntity(${1:Ent})"
	},
	"dsSend(ssxv2)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSendDirect(srxv2)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"tsShapeVertices(nvvv)": {
		"scope": "source.e2",
		"prefix": "tsShapeVertices",
		"description": "(20 OPS) function string tsShapeVertices(Index, Vertex1, Vertex2, Vertex3)",
		"body": "tsShapeVertices(${1:Index}, ${2:Vertex1}, ${3:Vertex2}, ${4:Vertex3})"
	},
	"sin(c)": {
		"scope": "source.e2",
		"prefix": "sin",
		"description": "(3 OPS) function complex sin(Z)",
		"body": "sin(${1:Z})"
	},
	"popMatrix(r:)": {
		"scope": "source.e2",
		"prefix": "popMatrix",
		"description": "(7 OPS) function matrix popMatrix()",
		"body": "popMatrix()"
	},
	"matrix2(xwl:s)": {
		"scope": "source.e2",
		"prefix": "matrix2",
		"description": "(5 OPS) function matrix2 matrix2()",
		"body": "matrix2()"
	},
	"playerDamage()": {
		"scope": "source.e2",
		"prefix": "playerDamage",
		"description": "(5 OPS) function normal playerDamage()",
		"body": "playerDamage()"
	},
	"entity(r:n)": {
		"scope": "source.e2",
		"prefix": "entity",
		"description": "(5 OPS) function entity entity()",
		"body": "entity()"
	},
	"dsSendDirect(srxv4)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"maxFrictionMass()": {
		"scope": "source.e2",
		"prefix": "maxFrictionMass",
		"description": "(1 OPS) function normal maxFrictionMass()",
		"body": "maxFrictionMass()"
	},
	"dsGetTable()": {
		"scope": "source.e2",
		"prefix": "dsGetTable",
		"description": "(5 OPS) function table dsGetTable()",
		"body": "dsGetTable()"
	},
	"op:idx(q=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"dsSend(sst)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSendDirect(srt)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"dsSendDirect(set)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"findByClass(s)": {
		"scope": "source.e2",
		"prefix": "findByClass",
		"description": "(30 OPS) function normal findByClass(Class)",
		"body": "findByClass(${1:Class})"
	},
	"npcRelationship(e:esn)": {
		"scope": "source.e2",
		"prefix": "npcRelationship",
		"description": "(5 OPS) function void npcRelationship(Rv2, Rv3, Rv4)",
		"body": "npcRelationship(${1:Rv2}, ${2:Rv3}, ${3:Rv4})"
	},
	"tsRayBoxIntersection(vv)": {
		"scope": "source.e2",
		"prefix": "tsRayBoxIntersection",
		"description": "(20 OPS) function tracedata tsRayBoxIntersection(Start, Dir)",
		"body": "tsRayBoxIntersection(${1:Start}, ${2:Dir})"
	},
	"fileCanLoad()": {
		"scope": "source.e2",
		"prefix": "fileCanLoad",
		"description": "(5 OPS) function normal fileCanLoad()",
		"body": "fileCanLoad()"
	},
	"rangerIgnoreWorld(n)": {
		"scope": "source.e2",
		"prefix": "rangerIgnoreWorld",
		"description": "(1 OPS) function void rangerIgnoreWorld(Ignoreworld)",
		"body": "rangerIgnoreWorld(${1:Ignoreworld})"
	},
	"select(ne...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function entity select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"dsSendDirect(srs)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"dsSendDirect(sextd)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"shiftL(a)": {
		"scope": "source.e2",
		"prefix": "shiftL",
		"description": "(2 OPS) function angle shiftL(Rv1)",
		"body": "shiftL(${1:Rv1})"
	},
	"dsSend(ssnxef)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSend(ssxef)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"exists(r:n)": {
		"scope": "source.e2",
		"prefix": "exists",
		"description": "(1 OPS) function normal exists(Index)",
		"body": "exists(${1:Index})"
	},
	"toString(q)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(15 OPS) function string toString(Q)",
		"body": "toString(${1:Q})"
	},
	"op:add(an)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(2 OPS) function angle op:add(Rv1, Rv2)",
		"body": "op:add(${1:Rv1}, ${2:Rv2})"
	},
	"dsSendDirect(srxef)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"dsSendDirect(sexef)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"op:idx(xft=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"dsSend(ssnxwl)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSend(ssxwl)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"dsSendDirect(srxwl)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"insertNumber(t:nn)": {
		"scope": "source.e2",
		"prefix": "insertNumber",
		"description": "(10 OPS) function void insertNumber()",
		"body": "insertNumber()"
	},
	"dsGetComplex()": {
		"scope": "source.e2",
		"prefix": "dsGetComplex",
		"description": "(5 OPS) function complex dsGetComplex()",
		"body": "dsGetComplex()"
	},
	"lastSaidWhen()": {
		"scope": "source.e2",
		"prefix": "lastSaidWhen",
		"description": "(3 OPS) function normal lastSaidWhen()",
		"body": "lastSaidWhen()"
	},
	"swapRows(m:nn)": {
		"scope": "source.e2",
		"prefix": "swapRows",
		"description": "(5 OPS) function matrix swapRows(Rv2, Rv3)",
		"body": "swapRows(${1:Rv2}, ${2:Rv3})"
	},
	"dsSend(ssc)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"op:add(cn)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(2 OPS) function complex op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"dsSendDirect(src)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"removeMatrix4(r:n)": {
		"scope": "source.e2",
		"prefix": "removeMatrix4",
		"description": "(7 OPS) function matrix4 removeMatrix4()",
		"body": "removeMatrix4()"
	},
	"dsGetRanger()": {
		"scope": "source.e2",
		"prefix": "dsGetRanger",
		"description": "(5 OPS) function ranger dsGetRanger()",
		"body": "dsGetRanger()"
	},
	"changed(e)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"setMatrix4(r:nxm4)": {
		"scope": "source.e2",
		"prefix": "setMatrix4",
		"description": "(5 OPS) function matrix4 setMatrix4()",
		"body": "setMatrix4()"
	},
	"maxVec(vv)": {
		"scope": "source.e2",
		"prefix": "maxVec",
		"description": "(10 OPS) function vector maxVec(Rv1, Rv2)",
		"body": "maxVec(${1:Rv1}, ${2:Rv2})"
	},
	"insertQuaternion(t:nq)": {
		"scope": "source.e2",
		"prefix": "insertQuaternion",
		"description": "(10 OPS) function void insertQuaternion()",
		"body": "insertQuaternion()"
	},
	"getErrorNow(xsc:)": {
		"scope": "source.e2",
		"prefix": "getErrorNow",
		"description": "(3 OPS) function normal getErrorNow(This)",
		"body": "getErrorNow(${1:This})"
	},
	"dsSendDirect(srxrd)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"setComplex(xwl:sc)": {
		"scope": "source.e2",
		"prefix": "setComplex",
		"description": "(5 OPS) function complex setComplex()",
		"body": "setComplex()"
	},
	"pointHasContent(vs)": {
		"scope": "source.e2",
		"prefix": "pointHasContent",
		"description": "(20 OPS) function normal pointHasContent(Point, Has)",
		"body": "pointHasContent(${1:Point}, ${2:Has})"
	},
	"matrix4(xv4xv4xv4xv4)": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(5 OPS) function matrix4 matrix4(Rv1, Rv2, Rv3, Rv4)",
		"body": "matrix4(${1:Rv1}, ${2:Rv2}, ${3:Rv3}, ${4:Rv4})"
	},
	"dot(xv2:xv2)": {
		"scope": "source.e2",
		"prefix": "dot",
		"description": "(3 OPS) function normal dot()",
		"body": "dot()"
	},
	"op:mul(xm2xm2)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function matrix2 op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"op:idx(xv2=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"dsSend(ssnxtd)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"fileListClk(s)": {
		"scope": "source.e2",
		"prefix": "fileListClk",
		"description": "(5 OPS) function normal fileListClk(Dir)",
		"body": "fileListClk(${1:Dir})"
	},
	"dsSend(ssxtd)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"op:fea(nxftt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"dsSendDirect(srxtd)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"dsGetEffect()": {
		"scope": "source.e2",
		"prefix": "dsGetEffect",
		"description": "(5 OPS) function effect dsGetEffect()",
		"body": "dsGetEffect()"
	},
	"op:fea(srt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"playersAdmins()": {
		"scope": "source.e2",
		"prefix": "playersAdmins",
		"description": "(10 OPS) function array playersAdmins()",
		"body": "playersAdmins()"
	},
	"select(nxm4...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function matrix4 select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"npcGiveWeapon(e:)": {
		"scope": "source.e2",
		"prefix": "npcGiveWeapon",
		"description": "(5 OPS) function void npcGiveWeapon(This)",
		"body": "npcGiveWeapon(${1:This})"
	},
	"setRow(xm4:nxv4)": {
		"scope": "source.e2",
		"prefix": "setRow",
		"description": "(5 OPS) function matrix4 setRow(Rv2, Rv3)",
		"body": "setRow(${1:Rv2}, ${2:Rv3})"
	},
	"insertMatrix(t:nm)": {
		"scope": "source.e2",
		"prefix": "insertMatrix",
		"description": "(10 OPS) function void insertMatrix()",
		"body": "insertMatrix()"
	},
	"ioGetInputWirelink(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputWirelink",
		"description": "(5 OPS) function wirelink ioGetInputWirelink()",
		"body": "ioGetInputWirelink()"
	},
	"popMatrix(t:)": {
		"scope": "source.e2",
		"prefix": "popMatrix",
		"description": "(10 OPS) function matrix popMatrix()",
		"body": "popMatrix()"
	},
	"removeMatrix(t:n)": {
		"scope": "source.e2",
		"prefix": "removeMatrix",
		"description": "(8 OPS) function matrix removeMatrix()",
		"body": "removeMatrix()"
	},
	"op:idx(m=tnm)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"propBreak(e:)": {
		"scope": "source.e2",
		"prefix": "propBreak",
		"description": "(10 OPS) function void propBreak(This)",
		"body": "propBreak(${1:This})"
	},
	"tuneAutoZN(xsc:nns)": {
		"scope": "source.e2",
		"prefix": "tuneAutoZN",
		"description": "(7 OPS) function stcontrol tuneAutoZN(Uk, Ut, Sm)",
		"body": "tuneAutoZN(${1:Uk}, ${2:Ut}, ${3:Sm})"
	},
	"op:add(xm4xm4)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(5 OPS) function matrix4 op:add(Rv1, Rv2)",
		"body": "op:add(${1:Rv1}, ${2:Rv2})"
	},
	"insertComplex(r:nc)": {
		"scope": "source.e2",
		"prefix": "insertComplex",
		"description": "(7 OPS) function complex insertComplex()",
		"body": "insertComplex()"
	},
	"quaternion(r:n)": {
		"scope": "source.e2",
		"prefix": "quaternion",
		"description": "(5 OPS) function quaternion quaternion()",
		"body": "quaternion()"
	},
	"teamName(n)": {
		"scope": "source.e2",
		"prefix": "teamName",
		"description": "(5 OPS) function string teamName(Rv1)",
		"body": "teamName(${1:Rv1})"
	},
	"op:fea(nxm2t)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"isWeldedTo(e:)": {
		"scope": "source.e2",
		"prefix": "isWeldedTo",
		"description": "(5 OPS) function entity isWeldedTo(This)",
		"body": "isWeldedTo(${1:This})"
	},
	"op:idx(b=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"vel(e:)": {
		"scope": "source.e2",
		"prefix": "vel",
		"description": "(5 OPS) function vector vel(This)",
		"body": "vel(${1:This})"
	},
	"egpObjectIndexes(xwl:)": {
		"scope": "source.e2",
		"prefix": "egpObjectIndexes",
		"description": "(1 OPS) function array egpObjectIndexes(This)",
		"body": "egpObjectIndexes(${1:This})"
	},
	"sunDirection()": {
		"scope": "source.e2",
		"prefix": "sunDirection",
		"description": "(5 OPS) function vector sunDirection()",
		"body": "sunDirection()"
	},
	"op:fea(sxm2t)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"unshiftMatrix2(t:xm2)": {
		"scope": "source.e2",
		"prefix": "unshiftMatrix2",
		"description": "(10 OPS) function void unshiftMatrix2()",
		"body": "unshiftMatrix2()"
	},
	"npcSetTarget(e:e)": {
		"scope": "source.e2",
		"prefix": "npcSetTarget",
		"description": "(5 OPS) function void npcSetTarget(Ent)",
		"body": "npcSetTarget(${1:Ent})"
	},
	"insertMatrix2(t:nxm2)": {
		"scope": "source.e2",
		"prefix": "insertMatrix2",
		"description": "(10 OPS) function void insertMatrix2()",
		"body": "insertMatrix2()"
	},
	"min(nn)": {
		"scope": "source.e2",
		"prefix": "min",
		"description": "(1 OPS) function normal min()",
		"body": "min()"
	},
	"setConstant(e:nn)": {
		"scope": "source.e2",
		"prefix": "setConstant",
		"description": "(5 OPS) function void setConstant(Index, Constant)",
		"body": "setConstant(${1:Index}, ${2:Constant})"
	},
	"timeQuota()": {
		"scope": "source.e2",
		"prefix": "timeQuota",
		"description": "(1 OPS) function normal timeQuota()",
		"body": "timeQuota()"
	},
	"vec4(xv2)": {
		"scope": "source.e2",
		"prefix": "vec4",
		"description": "(4 OPS) function vector4 vec4()",
		"body": "vec4()"
	},
	"popMatrix2(t:)": {
		"scope": "source.e2",
		"prefix": "popMatrix2",
		"description": "(10 OPS) function matrix2 popMatrix2()",
		"body": "popMatrix2()"
	},
	"pushMatrix2(t:xm2)": {
		"scope": "source.e2",
		"prefix": "pushMatrix2",
		"description": "(10 OPS) function void pushMatrix2()",
		"body": "pushMatrix2()"
	},
	"writeString(xwl:snnvn)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y, Textcolor, Bgcolor)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor})"
	},
	"removeString(r:n)": {
		"scope": "source.e2",
		"prefix": "removeString",
		"description": "(7 OPS) function string removeString()",
		"body": "removeString()"
	},
	"removeMatrix2(t:n)": {
		"scope": "source.e2",
		"prefix": "removeMatrix2",
		"description": "(8 OPS) function matrix2 removeMatrix2()",
		"body": "removeMatrix2()"
	},
	"isAllSolid(xft:)": {
		"scope": "source.e2",
		"prefix": "isAllSolid",
		"description": "(3 OPS) function normal isAllSolid(This)",
		"body": "isAllSolid(${1:This})"
	},
	"removeMatrix2(t:s)": {
		"scope": "source.e2",
		"prefix": "removeMatrix2",
		"description": "(8 OPS) function matrix2 removeMatrix2()",
		"body": "removeMatrix2()"
	},
	"findResult(n)": {
		"scope": "source.e2",
		"prefix": "findResult",
		"description": "(2 OPS) function entity findResult(Index)",
		"body": "findResult(${1:Index})"
	},
	"op:idx(xm2=tnxm2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"steamIDTo64(s)": {
		"scope": "source.e2",
		"prefix": "steamIDTo64",
		"description": "(5 OPS) function string steamIDTo64(Id)",
		"body": "steamIDTo64(${1:Id})"
	},
	"op:idx(xm2=tsxm2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xm2=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"identity4()": {
		"scope": "source.e2",
		"prefix": "identity4",
		"description": "(5 OPS) function matrix4 identity4()",
		"body": "identity4()"
	},
	"inNoclip(e:)": {
		"scope": "source.e2",
		"prefix": "inNoclip",
		"description": "(5 OPS) function normal inNoclip(This)",
		"body": "inNoclip(${1:This})"
	},
	"teamScore(n)": {
		"scope": "source.e2",
		"prefix": "teamScore",
		"description": "(5 OPS) function normal teamScore(Rv1)",
		"body": "teamScore(${1:Rv1})"
	},
	"clear(r:)": {
		"scope": "source.e2",
		"prefix": "clear",
		"description": "(1 OPS) function void clear(This)",
		"body": "clear(${1:This})"
	},
	"op:idx(xwln)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx(Address)",
		"body": "op:idx(${1:Address})"
	},
	"hsv2rgb(nnn)": {
		"scope": "source.e2",
		"prefix": "hsv2rgb",
		"description": "(2 OPS) function vector hsv2rgb(H, S, V)",
		"body": "hsv2rgb(${1:H}, ${2:S}, ${3:V})"
	},
	"op:idx(n=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"op:ass(a)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(2 OPS) function angle op:ass()",
		"body": "op:ass()"
	},
	"op:idx(xm2=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"insertArray(t:nr)": {
		"scope": "source.e2",
		"prefix": "insertArray",
		"description": "(10 OPS) function void insertArray()",
		"body": "insertArray()"
	},
	"op:idx(xft=rnxft)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"op:idx(e=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"dsSend(ssnxrd)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"isHitWorld(xft:)": {
		"scope": "source.e2",
		"prefix": "isHitWorld",
		"description": "(3 OPS) function normal isHitWorld(This)",
		"body": "isHitWorld(${1:This})"
	},
	"findClosest(v)": {
		"scope": "source.e2",
		"prefix": "findClosest",
		"description": "(2 OPS) function entity findClosest(Position)",
		"body": "findClosest(${1:Position})"
	},
	"insertBone(t:nb)": {
		"scope": "source.e2",
		"prefix": "insertBone",
		"description": "(10 OPS) function void insertBone()",
		"body": "insertBone()"
	},
	"lastDeathAttacker()": {
		"scope": "source.e2",
		"prefix": "lastDeathAttacker",
		"description": "(5 OPS) function entity lastDeathAttacker()",
		"body": "lastDeathAttacker()"
	},
	"popBone(t:)": {
		"scope": "source.e2",
		"prefix": "popBone",
		"description": "(10 OPS) function bone popBone()",
		"body": "popBone()"
	},
	"pushBone(t:b)": {
		"scope": "source.e2",
		"prefix": "pushBone",
		"description": "(10 OPS) function void pushBone()",
		"body": "pushBone()"
	},
	"setMass(n)": {
		"scope": "source.e2",
		"prefix": "setMass",
		"description": "(10 OPS) function void setMass(Mass)",
		"body": "setMass(${1:Mass})"
	},
	"removeBone(t:n)": {
		"scope": "source.e2",
		"prefix": "removeBone",
		"description": "(8 OPS) function bone removeBone()",
		"body": "removeBone()"
	},
	"setIsIntegrating(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setIsIntegrating",
		"description": "(3 OPS) function stcontrol setIsIntegrating(Nn)",
		"body": "setIsIntegrating(${1:Nn})"
	},
	"op:neg(xv4)": {
		"scope": "source.e2",
		"prefix": "op:neg",
		"description": "(4 OPS) function vector4 op:neg()",
		"body": "op:neg()"
	},
	"dsGetQuaternion()": {
		"scope": "source.e2",
		"prefix": "dsGetQuaternion",
		"description": "(5 OPS) function quaternion dsGetQuaternion()",
		"body": "dsGetQuaternion()"
	},
	"shift(r:)": {
		"scope": "source.e2",
		"prefix": "shift",
		"description": "(3 OPS) function normal shift(This)",
		"body": "shift(${1:This})"
	},
	"unshiftFtrace(t:xft)": {
		"scope": "source.e2",
		"prefix": "unshiftFtrace",
		"description": "(10 OPS) function void unshiftFtrace()",
		"body": "unshiftFtrace()"
	},
	"minIndex(r:)": {
		"scope": "source.e2",
		"prefix": "minIndex",
		"description": "(1 OPS) function normal minIndex(This)",
		"body": "minIndex(${1:This})"
	},
	"op:fea(nxm4t)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"unshiftMatrix4(t:xm4)": {
		"scope": "source.e2",
		"prefix": "unshiftMatrix4",
		"description": "(10 OPS) function void unshiftMatrix4()",
		"body": "unshiftMatrix4()"
	},
	"insertMatrix4(t:nxm4)": {
		"scope": "source.e2",
		"prefix": "insertMatrix4",
		"description": "(10 OPS) function void insertMatrix4()",
		"body": "insertMatrix4()"
	},
	"writeUnicodeString(xwl:snnvvn)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y, Textcolor, Bgcolor, Flash)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor}, ${6:Flash})"
	},
	"popMatrix4(t:)": {
		"scope": "source.e2",
		"prefix": "popMatrix4",
		"description": "(10 OPS) function matrix4 popMatrix4()",
		"body": "popMatrix4()"
	},
	"merge(t:t)": {
		"scope": "source.e2",
		"prefix": "merge",
		"description": "(5 OPS) function table merge(Rv2)",
		"body": "merge(${1:Rv2})"
	},
	"ops(e:)": {
		"scope": "source.e2",
		"prefix": "ops",
		"description": "(1 OPS) function normal ops(This)",
		"body": "ops(${1:This})"
	},
	"op:sub(nv)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(2 OPS) function vector op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"pushMatrix4(t:xm4)": {
		"scope": "source.e2",
		"prefix": "pushMatrix4",
		"description": "(10 OPS) function void pushMatrix4()",
		"body": "pushMatrix4()"
	},
	"fileName()": {
		"scope": "source.e2",
		"prefix": "fileName",
		"description": "(5 OPS) function string fileName()",
		"body": "fileName()"
	},
	"smpLocal(xft:va)": {
		"scope": "source.e2",
		"prefix": "smpLocal",
		"description": "(12 OPS) function ftrace smpLocal(Vp, Va)",
		"body": "smpLocal(${1:Vp}, ${2:Va})"
	},
	"removeMatrix(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeMatrix",
		"description": "(5 OPS) function matrix removeMatrix()",
		"body": "removeMatrix()"
	},
	"removeMatrix4(t:n)": {
		"scope": "source.e2",
		"prefix": "removeMatrix4",
		"description": "(8 OPS) function matrix4 removeMatrix4()",
		"body": "removeMatrix4()"
	},
	"removeMatrix4(t:s)": {
		"scope": "source.e2",
		"prefix": "removeMatrix4",
		"description": "(8 OPS) function matrix4 removeMatrix4()",
		"body": "removeMatrix4()"
	},
	"z(xv4:)": {
		"scope": "source.e2",
		"prefix": "z",
		"description": "(2 OPS) function normal z()",
		"body": "z()"
	},
	"toTable(xrd:)": {
		"scope": "source.e2",
		"prefix": "toTable",
		"description": "(2 OPS) function table toTable(This)",
		"body": "toTable(${1:This})"
	},
	"op:idx(xm4=tnxm4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xm4=tsxm4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"nlerp(qqn)": {
		"scope": "source.e2",
		"prefix": "nlerp",
		"description": "(13 OPS) function quaternion nlerp(Q0, Q1, T)",
		"body": "nlerp(${1:Q0}, ${2:Q1}, ${3:T})"
	},
	"op:exp(mn)": {
		"scope": "source.e2",
		"prefix": "op:exp",
		"description": "(5 OPS) function matrix op:exp(Rv1, Rv2)",
		"body": "op:exp(${1:Rv1}, ${2:Rv2})"
	},
	"op:idx(xm4=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xm4=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"x(xv2:)": {
		"scope": "source.e2",
		"prefix": "x",
		"description": "(1 OPS) function normal x()",
		"body": "x()"
	},
	"setDir(xft:v)": {
		"scope": "source.e2",
		"prefix": "setDir",
		"description": "(3 OPS) function ftrace setDir(Vd)",
		"body": "setDir(${1:Vd})"
	},
	"setZ(v:n)": {
		"scope": "source.e2",
		"prefix": "setZ",
		"description": "(2 OPS) function vector setZ(Z)",
		"body": "setZ(${1:Z})"
	},
	"op:fea(net)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"removeVector4(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeVector4",
		"description": "(5 OPS) function vector4 removeVector4()",
		"body": "removeVector4()"
	},
	"aabbSize(e:)": {
		"scope": "source.e2",
		"prefix": "aabbSize",
		"description": "(10 OPS) function vector aabbSize(This)",
		"body": "aabbSize(${1:This})"
	},
	"minIndex(t:)": {
		"scope": "source.e2",
		"prefix": "minIndex",
		"description": "(5 OPS) function normal minIndex(This)",
		"body": "minIndex(${1:This})"
	},
	"op:idx(xm2=xwlsxm2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"tsRayFaceIntersection(vv)": {
		"scope": "source.e2",
		"prefix": "tsRayFaceIntersection",
		"description": "(20 OPS) function tracedata tsRayFaceIntersection(Start, Dir)",
		"body": "tsRayFaceIntersection(${1:Start}, ${2:Dir})"
	},
	"unshiftEntity(t:e)": {
		"scope": "source.e2",
		"prefix": "unshiftEntity",
		"description": "(10 OPS) function void unshiftEntity()",
		"body": "unshiftEntity()"
	},
	"insertEntity(t:ne)": {
		"scope": "source.e2",
		"prefix": "insertEntity",
		"description": "(10 OPS) function void insertEntity()",
		"body": "insertEntity()"
	},
	"addHitOnly(xft:sn)": {
		"scope": "source.e2",
		"prefix": "addHitOnly",
		"description": "(3 OPS) function ftrace addHitOnly(Sm, Vn)",
		"body": "addHitOnly(${1:Sm}, ${2:Vn})"
	},
	"jsonError()": {
		"scope": "source.e2",
		"prefix": "jsonError",
		"description": "(1 OPS) function string jsonError()",
		"body": "jsonError()"
	},
	"findCanQuery()": {
		"scope": "source.e2",
		"prefix": "findCanQuery",
		"description": "(2 OPS) function normal findCanQuery()",
		"body": "findCanQuery()"
	},
	"pushEntity(t:e)": {
		"scope": "source.e2",
		"prefix": "pushEntity",
		"description": "(10 OPS) function void pushEntity()",
		"body": "pushEntity()"
	},
	"removeEntity(t:n)": {
		"scope": "source.e2",
		"prefix": "removeEntity",
		"description": "(8 OPS) function entity removeEntity()",
		"body": "removeEntity()"
	},
	"select(nxgt...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function gtable select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"op:idx(e=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"gRemoveAllComplexs(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllComplexs",
		"description": "(5 OPS) function void gRemoveAllComplexs()",
		"body": "gRemoveAllComplexs()"
	},
	"length2(xv4:)": {
		"scope": "source.e2",
		"prefix": "length2",
		"description": "(7 OPS) function normal length2()",
		"body": "length2()"
	},
	"findIncludePlayerProps(s)": {
		"scope": "source.e2",
		"prefix": "findIncludePlayerProps",
		"description": "(10 OPS) function void findIncludePlayerProps(Name)",
		"body": "findIncludePlayerProps(${1:Name})"
	},
	"toWorldAxis(e:v)": {
		"scope": "source.e2",
		"prefix": "toWorldAxis",
		"description": "(15 OPS) function vector toWorldAxis(Localaxis)",
		"body": "toWorldAxis(${1:Localaxis})"
	},
	"unshiftVector(t:v)": {
		"scope": "source.e2",
		"prefix": "unshiftVector",
		"description": "(10 OPS) function void unshiftVector()",
		"body": "unshiftVector()"
	},
	"insertVector(t:nv)": {
		"scope": "source.e2",
		"prefix": "insertVector",
		"description": "(10 OPS) function void insertVector()",
		"body": "insertVector()"
	},
	"hardQuota()": {
		"scope": "source.e2",
		"prefix": "hardQuota",
		"description": "(1 OPS) function normal hardQuota()",
		"body": "hardQuota()"
	},
	"gRemoveAllComplexs()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllComplexs",
		"description": "(5 OPS) function void gRemoveAllComplexs()",
		"body": "gRemoveAllComplexs()"
	},
	"op:ass(q)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(2 OPS) function quaternion op:ass()",
		"body": "op:ass()"
	},
	"popVector(t:)": {
		"scope": "source.e2",
		"prefix": "popVector",
		"description": "(10 OPS) function vector popVector()",
		"body": "popVector()"
	},
	"pushVector(t:v)": {
		"scope": "source.e2",
		"prefix": "pushVector",
		"description": "(10 OPS) function void pushVector()",
		"body": "pushVector()"
	},
	"removeVector(t:n)": {
		"scope": "source.e2",
		"prefix": "removeVector",
		"description": "(8 OPS) function vector removeVector()",
		"body": "removeVector()"
	},
	"index(s:n)": {
		"scope": "source.e2",
		"prefix": "index",
		"description": "(20 OPS) function string index()",
		"body": "index()"
	},
	"index(xtd:n)": {
		"scope": "source.e2",
		"prefix": "index",
		"description": "(20 OPS) function normal index(Index)",
		"body": "index(${1:Index})"
	},
	"op:idx(e=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"op:idx(v=tnv)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"remHit(xft:)": {
		"scope": "source.e2",
		"prefix": "remHit",
		"description": "(3 OPS) function ftrace remHit(This)",
		"body": "remHit(${1:This})"
	},
	"lastDeathInflictor(e)": {
		"scope": "source.e2",
		"prefix": "lastDeathInflictor",
		"description": "(5 OPS) function entity lastDeathInflictor(Ply)",
		"body": "lastDeathInflictor(${1:Ply})"
	},
	"removeWirelink(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeWirelink",
		"description": "(5 OPS) function wirelink removeWirelink()",
		"body": "removeWirelink()"
	},
	"exp(n)": {
		"scope": "source.e2",
		"prefix": "exp",
		"description": "(2 OPS) function normal exp()",
		"body": "exp()"
	},
	"op:idx(v=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"op:fea(sat)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"rangerOffsetHull(vvvv)": {
		"scope": "source.e2",
		"prefix": "rangerOffsetHull",
		"description": "(20 OPS) function ranger rangerOffsetHull(Startpos, Endpos, Mins, Maxs)",
		"body": "rangerOffsetHull(${1:Startpos}, ${2:Endpos}, ${3:Mins}, ${4:Maxs})"
	},
	"dsSend(ssne)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"pushVector(r:v)": {
		"scope": "source.e2",
		"prefix": "pushVector",
		"description": "(7 OPS) function vector pushVector()",
		"body": "pushVector()"
	},
	"insertAngle(t:na)": {
		"scope": "source.e2",
		"prefix": "insertAngle",
		"description": "(10 OPS) function void insertAngle()",
		"body": "insertAngle()"
	},
	"popAngle(t:)": {
		"scope": "source.e2",
		"prefix": "popAngle",
		"description": "(10 OPS) function angle popAngle()",
		"body": "popAngle()"
	},
	"pushAngle(t:a)": {
		"scope": "source.e2",
		"prefix": "pushAngle",
		"description": "(10 OPS) function void pushAngle()",
		"body": "pushAngle()"
	},
	"removeAngle(t:n)": {
		"scope": "source.e2",
		"prefix": "removeAngle",
		"description": "(8 OPS) function angle removeAngle()",
		"body": "removeAngle()"
	},
	"removeAngle(t:s)": {
		"scope": "source.e2",
		"prefix": "removeAngle",
		"description": "(8 OPS) function angle removeAngle()",
		"body": "removeAngle()"
	},
	"op:idx(a=tna)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"swapRows(xm2:)": {
		"scope": "source.e2",
		"prefix": "swapRows",
		"description": "(5 OPS) function matrix2 swapRows(This)",
		"body": "swapRows(${1:This})"
	},
	"remove(t:n)": {
		"scope": "source.e2",
		"prefix": "remove",
		"description": "(5 OPS) function normal remove(Index)",
		"body": "remove(${1:Index})"
	},
	"op:idx(a=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"teamDeaths(n)": {
		"scope": "source.e2",
		"prefix": "teamDeaths",
		"description": "(5 OPS) function normal teamDeaths(Rv1)",
		"body": "teamDeaths(${1:Rv1})"
	},
	"isPlayerHolding(e:)": {
		"scope": "source.e2",
		"prefix": "isPlayerHolding",
		"description": "(10 OPS) function normal isPlayerHolding(This)",
		"body": "isPlayerHolding(${1:This})"
	},
	"massCenter(b:)": {
		"scope": "source.e2",
		"prefix": "massCenter",
		"description": "(1 OPS) function vector massCenter(This)",
		"body": "massCenter(${1:This})"
	},
	"matrix4(nnnnnnnnnnnnnnnn)": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(5 OPS) function matrix4 matrix4(Rv1, Rv2, Rv3, Rv4, Rv5, Rv6, Rv7, Rv8, Rv9, Rv10, Rv11, Rv12, Rv13, Rv14, Rv15, Rv16)",
		"body": "matrix4(${1:Rv1}, ${2:Rv2}, ${3:Rv3}, ${4:Rv4}, ${5:Rv5}, ${6:Rv6}, ${7:Rv7}, ${8:Rv8}, ${9:Rv9}, ${10:Rv10}, ${11:Rv11}, ${12:Rv12}, ${13:Rv13}, ${14:Rv14}, ${15:Rv15}, ${16:Rv16})"
	},
	"op:fea(nnt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"dsSendDirect(sexwl)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"popNumber(t:)": {
		"scope": "source.e2",
		"prefix": "popNumber",
		"description": "(10 OPS) function normal popNumber()",
		"body": "popNumber()"
	},
	"gRemoveAllMatrix4s()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllMatrix4s",
		"description": "(5 OPS) function void gRemoveAllMatrix4s()",
		"body": "gRemoveAllMatrix4s()"
	},
	"getCopy(xft:v)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Vp)",
		"body": "getCopy(${1:Vp})"
	},
	"setArray(xwl:sr)": {
		"scope": "source.e2",
		"prefix": "setArray",
		"description": "(5 OPS) function array setArray()",
		"body": "setArray()"
	},
	"op:is(xv2)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(2 OPS) function normal op:is()",
		"body": "op:is()"
	},
	"average(r:)": {
		"scope": "source.e2",
		"prefix": "average",
		"description": "(1 OPS) function normal average(This)",
		"body": "average(${1:This})"
	},
	"gDeleteStr(s)": {
		"scope": "source.e2",
		"prefix": "gDeleteStr",
		"description": "(8 OPS) function string gDeleteStr()",
		"body": "gDeleteStr()"
	},
	"op:fea(nqt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"setAttachment(xef:n)": {
		"scope": "source.e2",
		"prefix": "setAttachment",
		"description": "(1 OPS) function effect setAttachment(Index)",
		"body": "setAttachment(${1:Index})"
	},
	"setPowerI(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setPowerI",
		"description": "(8 OPS) function stcontrol setPowerI(Ni)",
		"body": "setPowerI(${1:Ni})"
	},
	"op:mul(xm4xv4)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function vector4 op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"rgb2digi(vn)": {
		"scope": "source.e2",
		"prefix": "rgb2digi",
		"description": "(2 OPS) function normal rgb2digi(Rgb, Mode)",
		"body": "rgb2digi(${1:Rgb}, ${2:Mode})"
	},
	"vec4(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "vec4",
		"description": "(4 OPS) function vector4 vec4()",
		"body": "vec4()"
	},
	"isCombined(xsc:)": {
		"scope": "source.e2",
		"prefix": "isCombined",
		"description": "(3 OPS) function normal isCombined(This)",
		"body": "isCombined(${1:This})"
	},
	"cameraAng(n)": {
		"scope": "source.e2",
		"prefix": "cameraAng",
		"description": "(2 OPS) function angle cameraAng(Index)",
		"body": "cameraAng(${1:Index})"
	},
	"unshiftQuaternion(t:q)": {
		"scope": "source.e2",
		"prefix": "unshiftQuaternion",
		"description": "(10 OPS) function void unshiftQuaternion()",
		"body": "unshiftQuaternion()"
	},
	"op:fea(nbt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"pushQuaternion(t:q)": {
		"scope": "source.e2",
		"prefix": "pushQuaternion",
		"description": "(10 OPS) function void pushQuaternion()",
		"body": "pushQuaternion()"
	},
	"toChar(n)": {
		"scope": "source.e2",
		"prefix": "toChar",
		"description": "(20 OPS) function string toChar()",
		"body": "toChar()"
	},
	"setVector2(xwl:sxv2)": {
		"scope": "source.e2",
		"prefix": "setVector2",
		"description": "(5 OPS) function vector2 setVector2()",
		"body": "setVector2()"
	},
	"removeQuaternion(t:s)": {
		"scope": "source.e2",
		"prefix": "removeQuaternion",
		"description": "(8 OPS) function quaternion removeQuaternion()",
		"body": "removeQuaternion()"
	},
	"op:idx(q=tnq)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"gRemoveAllArrays(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllArrays",
		"description": "(5 OPS) function void gRemoveAllArrays()",
		"body": "gRemoveAllArrays()"
	},
	"pos(b:)": {
		"scope": "source.e2",
		"prefix": "pos",
		"description": "(1 OPS) function vector pos(This)",
		"body": "pos(${1:This})"
	},
	"op:fea(nrt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:fea(nmt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"popArray(t:)": {
		"scope": "source.e2",
		"prefix": "popArray",
		"description": "(10 OPS) function array popArray()",
		"body": "popArray()"
	},
	"toDeg(v)": {
		"scope": "source.e2",
		"prefix": "toDeg",
		"description": "(3 OPS) function vector toDeg(Rv1)",
		"body": "toDeg(${1:Rv1})"
	},
	"writeString(xwl:snnnn)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y, Textcolor, Bgcolor)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor})"
	},
	"removeArray(t:s)": {
		"scope": "source.e2",
		"prefix": "removeArray",
		"description": "(8 OPS) function array removeArray()",
		"body": "removeArray()"
	},
	"propStatic(e:n)": {
		"scope": "source.e2",
		"prefix": "propStatic",
		"description": "(10 OPS) function void propStatic(Static)",
		"body": "propStatic(${1:Static})"
	},
	"op:idx(xm2=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"removeNumber(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeNumber",
		"description": "(5 OPS) function normal removeNumber()",
		"body": "removeNumber()"
	},
	"gGetAng(s)": {
		"scope": "source.e2",
		"prefix": "gGetAng",
		"description": "(8 OPS) function angle gGetAng()",
		"body": "gGetAng()"
	},
	"setGainID(xsc:r)": {
		"scope": "source.e2",
		"prefix": "setGainID",
		"description": "(7 OPS) function stcontrol setGainID(Aa)",
		"body": "setGainID(${1:Aa})"
	},
	"op:idx(r=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function array op:idx()",
		"body": "op:idx()"
	},
	"op:idx(r=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function array op:idx()",
		"body": "op:idx()"
	},
	"coth(n)": {
		"scope": "source.e2",
		"prefix": "coth",
		"description": "(2 OPS) function normal coth()",
		"body": "coth()"
	},
	"findAllowModel(s)": {
		"scope": "source.e2",
		"prefix": "findAllowModel",
		"description": "(10 OPS) function void findAllowModel(Model)",
		"body": "findAllowModel(${1:Model})"
	},
	"op:fea(sxftt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"vec(xv2)": {
		"scope": "source.e2",
		"prefix": "vec",
		"description": "(2 OPS) function vector vec(V2)",
		"body": "vec(${1:V2})"
	},
	"op:idx(b=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"getTimers()": {
		"scope": "source.e2",
		"prefix": "getTimers",
		"description": "(1 OPS) function array getTimers()",
		"body": "getTimers()"
	},
	"rayAAEllipsoidIntersection(vvvv)": {
		"scope": "source.e2",
		"prefix": "rayAAEllipsoidIntersection",
		"description": "(20 OPS) function vector rayAAEllipsoidIntersection(Start, Dir, Pos, Size)",
		"body": "rayAAEllipsoidIntersection(${1:Start}, ${2:Dir}, ${3:Pos}, ${4:Size})"
	},
	"remGainP(xsc:)": {
		"scope": "source.e2",
		"prefix": "remGainP",
		"description": "(7 OPS) function stcontrol remGainP(This)",
		"body": "remGainP(${1:This})"
	},
	"findClearWhiteEntityList()": {
		"scope": "source.e2",
		"prefix": "findClearWhiteEntityList",
		"description": "(10 OPS) function void findClearWhiteEntityList()",
		"body": "findClearWhiteEntityList()"
	},
	"findClipToEntity(e)": {
		"scope": "source.e2",
		"prefix": "findClipToEntity",
		"description": "(5 OPS) function normal findClipToEntity(Ent)",
		"body": "findClipToEntity(${1:Ent})"
	},
	"op:sub(nn)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(1 OPS) function normal op:sub()",
		"body": "op:sub()"
	},
	"op:fea(ncr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"distance(xtd:n)": {
		"scope": "source.e2",
		"prefix": "distance",
		"description": "(20 OPS) function normal distance(Index)",
		"body": "distance(${1:Index})"
	},
	"insertFtrace(t:nxft)": {
		"scope": "source.e2",
		"prefix": "insertFtrace",
		"description": "(10 OPS) function void insertFtrace()",
		"body": "insertFtrace()"
	},
	"popFtrace(t:)": {
		"scope": "source.e2",
		"prefix": "popFtrace",
		"description": "(10 OPS) function ftrace popFtrace()",
		"body": "popFtrace()"
	},
	"getCodeIncludes()": {
		"scope": "source.e2",
		"prefix": "getCodeIncludes",
		"description": "(20 OPS) function table getCodeIncludes()",
		"body": "getCodeIncludes()"
	},
	"pushFtrace(t:xft)": {
		"scope": "source.e2",
		"prefix": "pushFtrace",
		"description": "(10 OPS) function void pushFtrace()",
		"body": "pushFtrace()"
	},
	"removeFtrace(t:n)": {
		"scope": "source.e2",
		"prefix": "removeFtrace",
		"description": "(8 OPS) function ftrace removeFtrace()",
		"body": "removeFtrace()"
	},
	"op:idx(xft=tnxft)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xft=tsxft)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"smpLocal(xft:ea)": {
		"scope": "source.e2",
		"prefix": "smpLocal",
		"description": "(12 OPS) function ftrace smpLocal(Ve, Va)",
		"body": "smpLocal(${1:Ve}, ${2:Va})"
	},
	"positive(xv2)": {
		"scope": "source.e2",
		"prefix": "positive",
		"description": "(3 OPS) function vector2 positive()",
		"body": "positive()"
	},
	"dupefinished()": {
		"scope": "source.e2",
		"prefix": "dupefinished",
		"description": "(1 OPS) function normal dupefinished()",
		"body": "dupefinished()"
	},
	"distance(xv4:xv4)": {
		"scope": "source.e2",
		"prefix": "distance",
		"description": "(7 OPS) function normal distance()",
		"body": "distance()"
	},
	"op:idx(xft=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"op:fea(nxsct)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"explode(s:s)": {
		"scope": "source.e2",
		"prefix": "explode",
		"description": "(5 OPS) function array explode(Delim)",
		"body": "explode(${1:Delim})"
	},
	"op:fea(sxsct)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"unshiftStcontrol(t:xsc)": {
		"scope": "source.e2",
		"prefix": "unshiftStcontrol",
		"description": "(10 OPS) function void unshiftStcontrol()",
		"body": "unshiftStcontrol()"
	},
	"owner()": {
		"scope": "source.e2",
		"prefix": "owner",
		"description": "(1 OPS) function entity owner()",
		"body": "owner()"
	},
	"op:ass(xv4)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(4 OPS) function vector4 op:ass()",
		"body": "op:ass()"
	},
	"setNormal(xef:v)": {
		"scope": "source.e2",
		"prefix": "setNormal",
		"description": "(1 OPS) function effect setNormal(Norm)",
		"body": "setNormal(${1:Norm})"
	},
	"insertStcontrol(t:nxsc)": {
		"scope": "source.e2",
		"prefix": "insertStcontrol",
		"description": "(10 OPS) function void insertStcontrol()",
		"body": "insertStcontrol()"
	},
	"pushStcontrol(t:xsc)": {
		"scope": "source.e2",
		"prefix": "pushStcontrol",
		"description": "(10 OPS) function void pushStcontrol()",
		"body": "pushStcontrol()"
	},
	"normalized(v:)": {
		"scope": "source.e2",
		"prefix": "normalized",
		"description": "(5 OPS) function vector normalized(This)",
		"body": "normalized(${1:This})"
	},
	"findExcludePlayerProps(s)": {
		"scope": "source.e2",
		"prefix": "findExcludePlayerProps",
		"description": "(10 OPS) function void findExcludePlayerProps(Name)",
		"body": "findExcludePlayerProps(${1:Name})"
	},
	"aabbWorldMax(e:)": {
		"scope": "source.e2",
		"prefix": "aabbWorldMax",
		"description": "(10 OPS) function vector aabbWorldMax(This)",
		"body": "aabbWorldMax(${1:This})"
	},
	"matrix2(nnnn)": {
		"scope": "source.e2",
		"prefix": "matrix2",
		"description": "(5 OPS) function matrix2 matrix2(Rv1, Rv2, Rv3, Rv4)",
		"body": "matrix2(${1:Rv1}, ${2:Rv2}, ${3:Rv3}, ${4:Rv4})"
	},
	"inverseA(xm4)": {
		"scope": "source.e2",
		"prefix": "inverseA",
		"description": "(5 OPS) function matrix4 inverseA(Rv1)",
		"body": "inverseA(${1:Rv1})"
	},
	"op:idx(xsc=tnxsc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xsc=tsxsc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xsc=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"shiftEntity(r:)": {
		"scope": "source.e2",
		"prefix": "shiftEntity",
		"description": "(7 OPS) function entity shiftEntity()",
		"body": "shiftEntity()"
	},
	"op:idx(xsc=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"op:fea(nxv2t)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"tsRayEllipsoidIntersection(vv)": {
		"scope": "source.e2",
		"prefix": "tsRayEllipsoidIntersection",
		"description": "(20 OPS) function tracedata tsRayEllipsoidIntersection(Start, Dir)",
		"body": "tsRayEllipsoidIntersection(${1:Start}, ${2:Dir})"
	},
	"propSpawn(ean)": {
		"scope": "source.e2",
		"prefix": "propSpawn",
		"description": "(40 OPS) function entity propSpawn(Template, Rot, Frozen)",
		"body": "propSpawn(${1:Template}, ${2:Rot}, ${3:Frozen})"
	},
	"toRad(a)": {
		"scope": "source.e2",
		"prefix": "toRad",
		"description": "(5 OPS) function angle toRad(Rv1)",
		"body": "toRad(${1:Rv1})"
	},
	"op:fea(sxv2t)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"unshiftVector2(t:xv2)": {
		"scope": "source.e2",
		"prefix": "unshiftVector2",
		"description": "(10 OPS) function void unshiftVector2()",
		"body": "unshiftVector2()"
	},
	"insertVector2(t:nxv2)": {
		"scope": "source.e2",
		"prefix": "insertVector2",
		"description": "(10 OPS) function void insertVector2()",
		"body": "insertVector2()"
	},
	"popVector2(t:)": {
		"scope": "source.e2",
		"prefix": "popVector2",
		"description": "(10 OPS) function vector2 popVector2()",
		"body": "popVector2()"
	},
	"pushVector2(t:xv2)": {
		"scope": "source.e2",
		"prefix": "pushVector2",
		"description": "(10 OPS) function void pushVector2()",
		"body": "pushVector2()"
	},
	"removeVector2(t:n)": {
		"scope": "source.e2",
		"prefix": "removeVector2",
		"description": "(8 OPS) function vector2 removeVector2()",
		"body": "removeVector2()"
	},
	"removeVector2(t:s)": {
		"scope": "source.e2",
		"prefix": "removeVector2",
		"description": "(8 OPS) function vector2 removeVector2()",
		"body": "removeVector2()"
	},
	"op:idx(q=rnq)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"findPlayerBySteamID64(s)": {
		"scope": "source.e2",
		"prefix": "findPlayerBySteamID64",
		"description": "(30 OPS) function entity findPlayerBySteamID64(Id)",
		"body": "findPlayerBySteamID64(${1:Id})"
	},
	"isVehicle(e:)": {
		"scope": "source.e2",
		"prefix": "isVehicle",
		"description": "(10 OPS) function normal isVehicle(This)",
		"body": "isVehicle(${1:This})"
	},
	"op:idx(xv2=tnxv2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"acos(n)": {
		"scope": "source.e2",
		"prefix": "acos",
		"description": "(2 OPS) function normal acos()",
		"body": "acos()"
	},
	"op:idx(xv2=tsxv2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"dsGetTracedata()": {
		"scope": "source.e2",
		"prefix": "dsGetTracedata",
		"description": "(5 OPS) function tracedata dsGetTracedata()",
		"body": "dsGetTracedata()"
	},
	"op:idx(xv2=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xsc=xgtsxsc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"setOrigin(xef:v)": {
		"scope": "source.e2",
		"prefix": "setOrigin",
		"description": "(1 OPS) function effect setOrigin(Pos)",
		"body": "setOrigin(${1:Pos})"
	},
	"unshiftVector4(t:xv4)": {
		"scope": "source.e2",
		"prefix": "unshiftVector4",
		"description": "(10 OPS) function void unshiftVector4()",
		"body": "unshiftVector4()"
	},
	"insertVector4(t:nxv4)": {
		"scope": "source.e2",
		"prefix": "insertVector4",
		"description": "(10 OPS) function void insertVector4()",
		"body": "insertVector4()"
	},
	"ioSetOutput(sq)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function quaternion ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"wirelink()": {
		"scope": "source.e2",
		"prefix": "wirelink",
		"description": "(5 OPS) function wirelink wirelink()",
		"body": "wirelink()"
	},
	"popVector4(t:)": {
		"scope": "source.e2",
		"prefix": "popVector4",
		"description": "(10 OPS) function vector4 popVector4()",
		"body": "popVector4()"
	},
	"shiftComplex(r:)": {
		"scope": "source.e2",
		"prefix": "shiftComplex",
		"description": "(7 OPS) function complex shiftComplex()",
		"body": "shiftComplex()"
	},
	"op:idx(xv4=rnxv4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"toString(b)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(10 OPS) function string toString(B)",
		"body": "toString(${1:B})"
	},
	"pushVector4(t:xv4)": {
		"scope": "source.e2",
		"prefix": "pushVector4",
		"description": "(10 OPS) function void pushVector4()",
		"body": "pushVector4()"
	},
	"removeVector4(t:n)": {
		"scope": "source.e2",
		"prefix": "removeVector4",
		"description": "(8 OPS) function vector4 removeVector4()",
		"body": "removeVector4()"
	},
	"propSetBuoyancy(e:n)": {
		"scope": "source.e2",
		"prefix": "propSetBuoyancy",
		"description": "(10 OPS) function void propSetBuoyancy(Buoyancy)",
		"body": "propSetBuoyancy(${1:Buoyancy})"
	},
	"egpNumObjects(xwl:)": {
		"scope": "source.e2",
		"prefix": "egpNumObjects",
		"description": "(10 OPS) function normal egpNumObjects(This)",
		"body": "egpNumObjects(${1:This})"
	},
	"setAngles(xef:a)": {
		"scope": "source.e2",
		"prefix": "setAngles",
		"description": "(1 OPS) function effect setAngles(Ang)",
		"body": "setAngles(${1:Ang})"
	},
	"op:idx(xv4=tnxv4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xv4=tsxv4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xv4=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"popTable(t:)": {
		"scope": "source.e2",
		"prefix": "popTable",
		"description": "(10 OPS) function table popTable()",
		"body": "popTable()"
	},
	"rayPlaneIntersection(vvvv)": {
		"scope": "source.e2",
		"prefix": "rayPlaneIntersection",
		"description": "(20 OPS) function vector rayPlaneIntersection(Start, Dir, Pos, Normal)",
		"body": "rayPlaneIntersection(${1:Start}, ${2:Dir}, ${3:Pos}, ${4:Normal})"
	},
	"popWirelink(r:)": {
		"scope": "source.e2",
		"prefix": "popWirelink",
		"description": "(7 OPS) function wirelink popWirelink()",
		"body": "popWirelink()"
	},
	"op:fea(ntt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"vec2(nn)": {
		"scope": "source.e2",
		"prefix": "vec2",
		"description": "(2 OPS) function vector2 vec2()",
		"body": "vec2()"
	},
	"fileLoaded()": {
		"scope": "source.e2",
		"prefix": "fileLoaded",
		"description": "(5 OPS) function normal fileLoaded()",
		"body": "fileLoaded()"
	},
	"unshiftTable(t:t)": {
		"scope": "source.e2",
		"prefix": "unshiftTable",
		"description": "(10 OPS) function void unshiftTable()",
		"body": "unshiftTable()"
	},
	"applyTorque(e:v)": {
		"scope": "source.e2",
		"prefix": "applyTorque",
		"description": "(30 OPS) function void applyTorque(Torque)",
		"body": "applyTorque(${1:Torque})"
	},
	"hasOutput(xwl:s)": {
		"scope": "source.e2",
		"prefix": "hasOutput",
		"description": "(2 OPS) function normal hasOutput(Portname)",
		"body": "hasOutput(${1:Portname})"
	},
	"setStcontrol(xwl:sxsc)": {
		"scope": "source.e2",
		"prefix": "setStcontrol",
		"description": "(5 OPS) function stcontrol setStcontrol()",
		"body": "setStcontrol()"
	},
	"insertTable(t:nt)": {
		"scope": "source.e2",
		"prefix": "insertTable",
		"description": "(10 OPS) function void insertTable()",
		"body": "insertTable()"
	},
	"op:idx(xv4=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"op:add(as)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(10 OPS) function string op:add()",
		"body": "op:add()"
	},
	"dsSendDirect(sra)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(15 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"op:idx(t=tnt)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function table op:idx()",
		"body": "op:idx()"
	},
	"op:idx(t=tst)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function table op:idx()",
		"body": "op:idx()"
	},
	"setColumn(xm4:nnnnn)": {
		"scope": "source.e2",
		"prefix": "setColumn",
		"description": "(5 OPS) function matrix4 setColumn(Rv2, Rv3, Rv4, Rv5, Rv6)",
		"body": "setColumn(${1:Rv2}, ${2:Rv3}, ${3:Rv4}, ${4:Rv5}, ${5:Rv6})"
	},
	"op:idx(t=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function table op:idx()",
		"body": "op:idx()"
	},
	"op:idx(t=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function table op:idx()",
		"body": "op:idx()"
	},
	"runOnHTTP(n)": {
		"scope": "source.e2",
		"prefix": "runOnHTTP",
		"description": "(5 OPS) function void runOnHTTP(Rohttp)",
		"body": "runOnHTTP(${1:Rohttp})"
	},
	"egpSetText(xwl:ns)": {
		"scope": "source.e2",
		"prefix": "egpSetText",
		"description": "(10 OPS) function void egpSetText(Index, Text)",
		"body": "egpSetText(${1:Index}, ${2:Text})"
	},
	"setElement(xm4:nnn)": {
		"scope": "source.e2",
		"prefix": "setElement",
		"description": "(5 OPS) function matrix4 setElement(Rv2, Rv3, Rv4)",
		"body": "setElement(${1:Rv2}, ${2:Rv3}, ${3:Rv4})"
	},
	"isfinite(n)": {
		"scope": "source.e2",
		"prefix": "isfinite",
		"description": "(2 OPS) function normal isfinite(Value)",
		"body": "isfinite(${1:Value})"
	},
	"transpose(xm4)": {
		"scope": "source.e2",
		"prefix": "transpose",
		"description": "(5 OPS) function matrix4 transpose(Rv1)",
		"body": "transpose(${1:Rv1})"
	},
	"gGetNum(n)": {
		"scope": "source.e2",
		"prefix": "gGetNum",
		"description": "(8 OPS) function normal gGetNum()",
		"body": "gGetNum()"
	},
	"unshiftString(t:s)": {
		"scope": "source.e2",
		"prefix": "unshiftString",
		"description": "(10 OPS) function void unshiftString()",
		"body": "unshiftString()"
	},
	"getGainI(xsc:)": {
		"scope": "source.e2",
		"prefix": "getGainI",
		"description": "(3 OPS) function normal getGainI(This)",
		"body": "getGainI(${1:This})"
	},
	"holoClipsAvailable()": {
		"scope": "source.e2",
		"prefix": "holoClipsAvailable",
		"description": "(1 OPS) function normal holoClipsAvailable()",
		"body": "holoClipsAvailable()"
	},
	"insertString(t:ns)": {
		"scope": "source.e2",
		"prefix": "insertString",
		"description": "(10 OPS) function void insertString()",
		"body": "insertString()"
	},
	"pushString(t:s)": {
		"scope": "source.e2",
		"prefix": "pushString",
		"description": "(10 OPS) function void pushString()",
		"body": "pushString()"
	},
	"rangerAngleHull(nnnv)": {
		"scope": "source.e2",
		"prefix": "rangerAngleHull",
		"description": "(20 OPS) function ranger rangerAngleHull(Distance, Xangle, Yangle, Size)",
		"body": "rangerAngleHull(${1:Distance}, ${2:Xangle}, ${3:Yangle}, ${4:Size})"
	},
	"popComplex(r:)": {
		"scope": "source.e2",
		"prefix": "popComplex",
		"description": "(7 OPS) function complex popComplex()",
		"body": "popComplex()"
	},
	"removeString(t:s)": {
		"scope": "source.e2",
		"prefix": "removeString",
		"description": "(8 OPS) function string removeString()",
		"body": "removeString()"
	},
	"setStart(xef:v)": {
		"scope": "source.e2",
		"prefix": "setStart",
		"description": "(1 OPS) function effect setStart(Pos)",
		"body": "setStart(${1:Pos})"
	},
	"runOnKeys(en)": {
		"scope": "source.e2",
		"prefix": "runOnKeys",
		"description": "(20 OPS) function void runOnKeys(Ply, On)",
		"body": "runOnKeys(${1:Ply}, ${2:On})"
	},
	"removeBone(r:n)": {
		"scope": "source.e2",
		"prefix": "removeBone",
		"description": "(7 OPS) function bone removeBone()",
		"body": "removeBone()"
	},
	"getLen(xft:)": {
		"scope": "source.e2",
		"prefix": "getLen",
		"description": "(3 OPS) function normal getLen(This)",
		"body": "getLen(${1:This})"
	},
	"removeStcontrol(r:n)": {
		"scope": "source.e2",
		"prefix": "removeStcontrol",
		"description": "(7 OPS) function stcontrol removeStcontrol()",
		"body": "removeStcontrol()"
	},
	"op:idx(s=tss)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"clear(xgt:)": {
		"scope": "source.e2",
		"prefix": "clear",
		"description": "(5 OPS) function void clear(This)",
		"body": "clear(${1:This})"
	},
	"op:is(n)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(0 OPS) function normal op:is()",
		"body": "op:is()"
	},
	"op:idx(s=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"steamIDFrom64(s)": {
		"scope": "source.e2",
		"prefix": "steamIDFrom64",
		"description": "(5 OPS) function string steamIDFrom64(Community_id)",
		"body": "steamIDFrom64(${1:Community_id})"
	},
	"convertUnit(ssn)": {
		"scope": "source.e2",
		"prefix": "convertUnit",
		"description": "(2 OPS) function normal convertUnit(Rv1, Rv2, Rv3)",
		"body": "convertUnit(${1:Rv1}, ${2:Rv2}, ${3:Rv3})"
	},
	"transpose(m)": {
		"scope": "source.e2",
		"prefix": "transpose",
		"description": "(5 OPS) function matrix transpose(Rv1)",
		"body": "transpose(${1:Rv1})"
	},
	"qk()": {
		"scope": "source.e2",
		"prefix": "qk",
		"description": "(1 OPS) function quaternion qk()",
		"body": "qk()"
	},
	"op:fea(sxeft)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:neg(m)": {
		"scope": "source.e2",
		"prefix": "op:neg",
		"description": "(5 OPS) function matrix op:neg(Rv1)",
		"body": "op:neg(${1:Rv1})"
	},
	"difference(t:t)": {
		"scope": "source.e2",
		"prefix": "difference",
		"description": "(5 OPS) function table difference(Rv2)",
		"body": "difference(${1:Rv2})"
	},
	"setBias(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setBias",
		"description": "(3 OPS) function stcontrol setBias(Nn)",
		"body": "setBias(${1:Nn})"
	},
	"unshiftEffect(t:xef)": {
		"scope": "source.e2",
		"prefix": "unshiftEffect",
		"description": "(10 OPS) function void unshiftEffect()",
		"body": "unshiftEffect()"
	},
	"getDirLocal(xft:)": {
		"scope": "source.e2",
		"prefix": "getDirLocal",
		"description": "(3 OPS) function vector getDirLocal(This)",
		"body": "getDirLocal(${1:This})"
	},
	"vec(q)": {
		"scope": "source.e2",
		"prefix": "vec",
		"description": "(3 OPS) function vector vec(Q)",
		"body": "vec(${1:Q})"
	},
	"findAllowPlayerProps(e)": {
		"scope": "source.e2",
		"prefix": "findAllowPlayerProps",
		"description": "(10 OPS) function void findAllowPlayerProps(Ply)",
		"body": "findAllowPlayerProps(${1:Ply})"
	},
	"op:idx(m=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"insertEffect(t:nxef)": {
		"scope": "source.e2",
		"prefix": "insertEffect",
		"description": "(10 OPS) function void insertEffect()",
		"body": "insertEffect()"
	},
	"findClipToClass(s)": {
		"scope": "source.e2",
		"prefix": "findClipToClass",
		"description": "(5 OPS) function normal findClipToClass(Class)",
		"body": "findClipToClass(${1:Class})"
	},
	"pushEffect(t:xef)": {
		"scope": "source.e2",
		"prefix": "pushEffect",
		"description": "(10 OPS) function void pushEffect()",
		"body": "pushEffect()"
	},
	"removeEffect(t:n)": {
		"scope": "source.e2",
		"prefix": "removeEffect",
		"description": "(8 OPS) function effect removeEffect()",
		"body": "removeEffect()"
	},
	"op:idx(m=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"op:idx(r=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function array op:idx()",
		"body": "op:idx()"
	},
	"removeEffect(t:s)": {
		"scope": "source.e2",
		"prefix": "removeEffect",
		"description": "(8 OPS) function effect removeEffect()",
		"body": "removeEffect()"
	},
	"constraintBreak(e:)": {
		"scope": "source.e2",
		"prefix": "constraintBreak",
		"description": "(5 OPS) function void constraintBreak(This)",
		"body": "constraintBreak(${1:This})"
	},
	"rgb2hsl(nnn)": {
		"scope": "source.e2",
		"prefix": "rgb2hsl",
		"description": "(2 OPS) function vector rgb2hsl(R, G, B)",
		"body": "rgb2hsl(${1:R}, ${2:G}, ${3:B})"
	},
	"op:idx(xef=tnxef)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xef=tsxef)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xef=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"matrix4(xm2)": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(5 OPS) function matrix4 matrix4(Rv1)",
		"body": "matrix4(${1:Rv1})"
	},
	"op:idx(xef=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"op:fea(nxwlt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"getCopy(xft:)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(This)",
		"body": "getCopy(${1:This})"
	},
	"bearing(e:v)": {
		"scope": "source.e2",
		"prefix": "bearing",
		"description": "(15 OPS) function normal bearing(Pos)",
		"body": "bearing(${1:Pos})"
	},
	"unshiftWirelink(t:xwl)": {
		"scope": "source.e2",
		"prefix": "unshiftWirelink",
		"description": "(10 OPS) function void unshiftWirelink()",
		"body": "unshiftWirelink()"
	},
	"insertWirelink(t:nxwl)": {
		"scope": "source.e2",
		"prefix": "insertWirelink",
		"description": "(10 OPS) function void insertWirelink()",
		"body": "insertWirelink()"
	},
	"findClearBlackClassList()": {
		"scope": "source.e2",
		"prefix": "findClearBlackClassList",
		"description": "(10 OPS) function void findClearBlackClassList()",
		"body": "findClearBlackClassList()"
	},
	"matrix4(e)": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(5 OPS) function matrix4 matrix4(Rv1)",
		"body": "matrix4(${1:Rv1})"
	},
	"inrange(xv2xv2xv2)": {
		"scope": "source.e2",
		"prefix": "inrange",
		"description": "(2 OPS) function normal inrange()",
		"body": "inrange()"
	},
	"op:idx(xef=rnxef)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"pushWirelink(t:xwl)": {
		"scope": "source.e2",
		"prefix": "pushWirelink",
		"description": "(10 OPS) function void pushWirelink()",
		"body": "pushWirelink()"
	},
	"ioInputEntity(s)": {
		"scope": "source.e2",
		"prefix": "ioInputEntity",
		"description": "(10 OPS) function entity ioInputEntity(Input)",
		"body": "ioInputEntity(${1:Input})"
	},
	"op:idx(r=xwlsr)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function array op:idx()",
		"body": "op:idx()"
	},
	"removeWirelink(t:n)": {
		"scope": "source.e2",
		"prefix": "removeWirelink",
		"description": "(8 OPS) function wirelink removeWirelink()",
		"body": "removeWirelink()"
	},
	"index(xtd:)": {
		"scope": "source.e2",
		"prefix": "index",
		"description": "(20 OPS) function normal index(This)",
		"body": "index(${1:This})"
	},
	"tsShapeClear()": {
		"scope": "source.e2",
		"prefix": "tsShapeClear",
		"description": "(20 OPS) function void tsShapeClear()",
		"body": "tsShapeClear()"
	},
	"op:idx(xwl=tnxwl)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"vector4(xwl:s)": {
		"scope": "source.e2",
		"prefix": "vector4",
		"description": "(5 OPS) function vector4 vector4()",
		"body": "vector4()"
	},
	"op:idx(xwl=tsxwl)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xwl=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"cschr(n)": {
		"scope": "source.e2",
		"prefix": "cschr",
		"description": "(2 OPS) function normal cschr()",
		"body": "cschr()"
	},
	"holoModelList()": {
		"scope": "source.e2",
		"prefix": "holoModelList",
		"description": "(10 OPS) function array holoModelList()",
		"body": "holoModelList()"
	},
	"op:idx(xwl=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"op:fea(nct)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"length(xv2:)": {
		"scope": "source.e2",
		"prefix": "length",
		"description": "(3 OPS) function normal length()",
		"body": "length()"
	},
	"trim(s:)": {
		"scope": "source.e2",
		"prefix": "trim",
		"description": "(20 OPS) function string trim()",
		"body": "trim()"
	},
	"egpLineStrip(xwl:n...)": {
		"scope": "source.e2",
		"prefix": "egpLineStrip",
		"description": "(20 OPS) function void egpLineStrip(Index)",
		"body": "egpLineStrip(${1:Index})"
	},
	"ranger(r:n)": {
		"scope": "source.e2",
		"prefix": "ranger",
		"description": "(5 OPS) function ranger ranger()",
		"body": "ranger()"
	},
	"unshiftComplex(t:c)": {
		"scope": "source.e2",
		"prefix": "unshiftComplex",
		"description": "(10 OPS) function void unshiftComplex()",
		"body": "unshiftComplex()"
	},
	"insertComplex(t:nc)": {
		"scope": "source.e2",
		"prefix": "insertComplex",
		"description": "(10 OPS) function void insertComplex()",
		"body": "insertComplex()"
	},
	"pushComplex(t:c)": {
		"scope": "source.e2",
		"prefix": "pushComplex",
		"description": "(10 OPS) function void pushComplex()",
		"body": "pushComplex()"
	},
	"removeComplex(t:s)": {
		"scope": "source.e2",
		"prefix": "removeComplex",
		"description": "(8 OPS) function complex removeComplex()",
		"body": "removeComplex()"
	},
	"op:idx(c=tsc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"ioSetOutput(sc)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function complex ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"i(n)": {
		"scope": "source.e2",
		"prefix": "i",
		"description": "(2 OPS) function complex i(B)",
		"body": "i(${1:B})"
	},
	"op:idx(c=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"isManual(xsc:)": {
		"scope": "source.e2",
		"prefix": "isManual",
		"description": "(3 OPS) function normal isManual(This)",
		"body": "isManual(${1:This})"
	},
	"op:fea(sxrdt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"unshiftRanger(t:xrd)": {
		"scope": "source.e2",
		"prefix": "unshiftRanger",
		"description": "(10 OPS) function void unshiftRanger()",
		"body": "unshiftRanger()"
	},
	"insertRanger(t:nxrd)": {
		"scope": "source.e2",
		"prefix": "insertRanger",
		"description": "(10 OPS) function void insertRanger()",
		"body": "insertRanger()"
	},
	"vec4(n)": {
		"scope": "source.e2",
		"prefix": "vec4",
		"description": "(4 OPS) function vector4 vec4()",
		"body": "vec4()"
	},
	"pushRanger(t:xrd)": {
		"scope": "source.e2",
		"prefix": "pushRanger",
		"description": "(10 OPS) function void pushRanger()",
		"body": "pushRanger()"
	},
	"qj()": {
		"scope": "source.e2",
		"prefix": "qj",
		"description": "(1 OPS) function quaternion qj()",
		"body": "qj()"
	},
	"random()": {
		"scope": "source.e2",
		"prefix": "random",
		"description": "(2 OPS) function normal random()",
		"body": "random()"
	},
	"removeRanger(t:n)": {
		"scope": "source.e2",
		"prefix": "removeRanger",
		"description": "(8 OPS) function ranger removeRanger()",
		"body": "removeRanger()"
	},
	"setWindupD(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setWindupD",
		"description": "(3 OPS) function stcontrol setWindupD(Nd)",
		"body": "setWindupD(${1:Nd})"
	},
	"removeRanger(r:n)": {
		"scope": "source.e2",
		"prefix": "removeRanger",
		"description": "(7 OPS) function ranger removeRanger()",
		"body": "removeRanger()"
	},
	"positive(v)": {
		"scope": "source.e2",
		"prefix": "positive",
		"description": "(5 OPS) function vector positive(Rv1)",
		"body": "positive(${1:Rv1})"
	},
	"op:add(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(2 OPS) function vector2 op:add()",
		"body": "op:add()"
	},
	"toDeg(xv4)": {
		"scope": "source.e2",
		"prefix": "toDeg",
		"description": "(5 OPS) function vector4 toDeg(Xv4)",
		"body": "toDeg(${1:Xv4})"
	},
	"op:idx(xrd=tnxrd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"dsGetBone()": {
		"scope": "source.e2",
		"prefix": "dsGetBone",
		"description": "(5 OPS) function bone dsGetBone()",
		"body": "dsGetBone()"
	},
	"egpSize(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpSize",
		"description": "(10 OPS) function void egpSize(Index, Size)",
		"body": "egpSize(${1:Index}, ${2:Size})"
	},
	"op:idx(xrd=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xrd=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"rangerHitWater(n)": {
		"scope": "source.e2",
		"prefix": "rangerHitWater",
		"description": "(1 OPS) function void rangerHitWater(Hitwater)",
		"body": "rangerHitWater(${1:Hitwater})"
	},
	"atan(nn)": {
		"scope": "source.e2",
		"prefix": "atan",
		"description": "(2 OPS) function normal atan()",
		"body": "atan()"
	},
	"popBone(r:)": {
		"scope": "source.e2",
		"prefix": "popBone",
		"description": "(7 OPS) function bone popBone()",
		"body": "popBone()"
	},
	"npcRelationship(e:ssn)": {
		"scope": "source.e2",
		"prefix": "npcRelationship",
		"description": "(5 OPS) function void npcRelationship(Rv2, Rv3, Rv4)",
		"body": "npcRelationship(${1:Rv2}, ${2:Rv3}, ${3:Rv4})"
	},
	"op:fea(sxtdt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"setPowerID(xsc:nn)": {
		"scope": "source.e2",
		"prefix": "setPowerID",
		"description": "(8 OPS) function stcontrol setPowerID(Ni, Nd)",
		"body": "setPowerID(${1:Ni}, ${2:Nd})"
	},
	"lightRemove(n)": {
		"scope": "source.e2",
		"prefix": "lightRemove",
		"description": "(15 OPS) function void lightRemove(Index)",
		"body": "lightRemove(${1:Index})"
	},
	"ioSetOutput(sxtd)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function tracedata ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"gRemoveAllVectors(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllVectors",
		"description": "(5 OPS) function void gRemoveAllVectors()",
		"body": "gRemoveAllVectors()"
	},
	"changed(xef)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"fileCanList()": {
		"scope": "source.e2",
		"prefix": "fileCanList",
		"description": "(5 OPS) function normal fileCanList()",
		"body": "fileCanList()"
	},
	"assert(n)": {
		"scope": "source.e2",
		"prefix": "assert",
		"description": "(2 OPS) function void assert(Condition)",
		"body": "assert(${1:Condition})"
	},
	"unshiftTracedata(t:xtd)": {
		"scope": "source.e2",
		"prefix": "unshiftTracedata",
		"description": "(10 OPS) function void unshiftTracedata()",
		"body": "unshiftTracedata()"
	},
	"insertTracedata(t:nxtd)": {
		"scope": "source.e2",
		"prefix": "insertTracedata",
		"description": "(10 OPS) function void insertTracedata()",
		"body": "insertTracedata()"
	},
	"popTracedata(t:)": {
		"scope": "source.e2",
		"prefix": "popTracedata",
		"description": "(10 OPS) function tracedata popTracedata()",
		"body": "popTracedata()"
	},
	"pushTracedata(t:xtd)": {
		"scope": "source.e2",
		"prefix": "pushTracedata",
		"description": "(10 OPS) function void pushTracedata()",
		"body": "pushTracedata()"
	},
	"removeTracedata(t:s)": {
		"scope": "source.e2",
		"prefix": "removeTracedata",
		"description": "(8 OPS) function tracedata removeTracedata()",
		"body": "removeTracedata()"
	},
	"getGain(xsc:)": {
		"scope": "source.e2",
		"prefix": "getGain",
		"description": "(3 OPS) function vector getGain(This)",
		"body": "getGain(${1:This})"
	},
	"op:idx(xtd=tnxtd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xtd=tsxtd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xtd=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xtd=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"gDeleteEnt(n)": {
		"scope": "source.e2",
		"prefix": "gDeleteEnt",
		"description": "(8 OPS) function entity gDeleteEnt()",
		"body": "gDeleteEnt()"
	},
	"findClipFromBox(vv)": {
		"scope": "source.e2",
		"prefix": "findClipFromBox",
		"description": "(5 OPS) function normal findClipFromBox(Min, Max)",
		"body": "findClipFromBox(${1:Min}, ${2:Max})"
	},
	"gDeleteEnt(s)": {
		"scope": "source.e2",
		"prefix": "gDeleteEnt",
		"description": "(8 OPS) function entity gDeleteEnt()",
		"body": "gDeleteEnt()"
	},
	"gSetEnt(ne)": {
		"scope": "source.e2",
		"prefix": "gSetEnt",
		"description": "(8 OPS) function void gSetEnt()",
		"body": "gSetEnt()"
	},
	"op:idx(xm4=xwlsxm4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"inVehicle(e:)": {
		"scope": "source.e2",
		"prefix": "inVehicle",
		"description": "(5 OPS) function normal inVehicle(This)",
		"body": "inVehicle(${1:This})"
	},
	"fileLoadedList()": {
		"scope": "source.e2",
		"prefix": "fileLoadedList",
		"description": "(5 OPS) function normal fileLoadedList()",
		"body": "fileLoadedList()"
	},
	"runOnDeath(n)": {
		"scope": "source.e2",
		"prefix": "runOnDeath",
		"description": "(5 OPS) function void runOnDeath(Active)",
		"body": "runOnDeath(${1:Active})"
	},
	"swapColumns(m:nn)": {
		"scope": "source.e2",
		"prefix": "swapColumns",
		"description": "(5 OPS) function matrix swapColumns(Rv2, Rv3)",
		"body": "swapColumns(${1:Rv2}, ${2:Rv3})"
	},
	"max(nn)": {
		"scope": "source.e2",
		"prefix": "max",
		"description": "(1 OPS) function normal max()",
		"body": "max()"
	},
	"gSetEnt(se)": {
		"scope": "source.e2",
		"prefix": "gSetEnt",
		"description": "(8 OPS) function void gSetEnt()",
		"body": "gSetEnt()"
	},
	"remHitSkip(xft:sn)": {
		"scope": "source.e2",
		"prefix": "remHitSkip",
		"description": "(3 OPS) function ftrace remHitSkip(Sm, Vn)",
		"body": "remHitSkip(${1:Sm}, ${2:Vn})"
	},
	"values(t:)": {
		"scope": "source.e2",
		"prefix": "values",
		"description": "(5 OPS) function array values(This)",
		"body": "values(${1:This})"
	},
	"gDeleteAllNum()": {
		"scope": "source.e2",
		"prefix": "gDeleteAllNum",
		"description": "(5 OPS) function void gDeleteAllNum()",
		"body": "gDeleteAllNum()"
	},
	"min(r:)": {
		"scope": "source.e2",
		"prefix": "min",
		"description": "(1 OPS) function normal min(This)",
		"body": "min(${1:This})"
	},
	"gDeleteNum(s)": {
		"scope": "source.e2",
		"prefix": "gDeleteNum",
		"description": "(8 OPS) function normal gDeleteNum()",
		"body": "gDeleteNum()"
	},
	"runOnChat(n)": {
		"scope": "source.e2",
		"prefix": "runOnChat",
		"description": "(3 OPS) function void runOnChat(Activate)",
		"body": "runOnChat(${1:Activate})"
	},
	"op:fea(sst)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"gGetNum(s)": {
		"scope": "source.e2",
		"prefix": "gGetNum",
		"description": "(8 OPS) function normal gGetNum()",
		"body": "gGetNum()"
	},
	"clamp(xv2xv2xv2)": {
		"scope": "source.e2",
		"prefix": "clamp",
		"description": "(4 OPS) function vector2 clamp()",
		"body": "clamp()"
	},
	"isWeapon(e:)": {
		"scope": "source.e2",
		"prefix": "isWeapon",
		"description": "(10 OPS) function normal isWeapon(This)",
		"body": "isWeapon(${1:This})"
	},
	"gSetNum(sn)": {
		"scope": "source.e2",
		"prefix": "gSetNum",
		"description": "(8 OPS) function void gSetNum()",
		"body": "gSetNum()"
	},
	"getCode()": {
		"scope": "source.e2",
		"prefix": "getCode",
		"description": "(20 OPS) function string getCode()",
		"body": "getCode()"
	},
	"fileClk(s)": {
		"scope": "source.e2",
		"prefix": "fileClk",
		"description": "(5 OPS) function normal fileClk(Filename)",
		"body": "fileClk(${1:Filename})"
	},
	"owner(e:)": {
		"scope": "source.e2",
		"prefix": "owner",
		"description": "(5 OPS) function entity owner(This)",
		"body": "owner(${1:This})"
	},
	"gDeleteAng(n)": {
		"scope": "source.e2",
		"prefix": "gDeleteAng",
		"description": "(8 OPS) function angle gDeleteAng()",
		"body": "gDeleteAng()"
	},
	"op:fea(sxftxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"surfaceArea(e:)": {
		"scope": "source.e2",
		"prefix": "surfaceArea",
		"description": "(10 OPS) function normal surfaceArea(This)",
		"body": "surfaceArea(${1:This})"
	},
	"gGetAng(n)": {
		"scope": "source.e2",
		"prefix": "gGetAng",
		"description": "(8 OPS) function angle gGetAng()",
		"body": "gGetAng()"
	},
	"remEntHitSkip(xft:e)": {
		"scope": "source.e2",
		"prefix": "remEntHitSkip",
		"description": "(3 OPS) function ftrace remEntHitSkip(Ve)",
		"body": "remEntHitSkip(${1:Ve})"
	},
	"gSetAng(na)": {
		"scope": "source.e2",
		"prefix": "gSetAng",
		"description": "(8 OPS) function void gSetAng()",
		"body": "gSetAng()"
	},
	"lightToggle(n)": {
		"scope": "source.e2",
		"prefix": "lightToggle",
		"description": "(2 OPS) function normal lightToggle(Index)",
		"body": "lightToggle(${1:Index})"
	},
	"dsGetFtrace()": {
		"scope": "source.e2",
		"prefix": "dsGetFtrace",
		"description": "(5 OPS) function ftrace dsGetFtrace()",
		"body": "dsGetFtrace()"
	},
	"propSpawn(evn)": {
		"scope": "source.e2",
		"prefix": "propSpawn",
		"description": "(40 OPS) function entity propSpawn(Template, Pos, Frozen)",
		"body": "propSpawn(${1:Template}, ${2:Pos}, ${3:Frozen})"
	},
	"cameraParent(ne)": {
		"scope": "source.e2",
		"prefix": "cameraParent",
		"description": "(10 OPS) function void cameraParent(Index, Parent)",
		"body": "cameraParent(${1:Index}, ${2:Parent})"
	},
	"gGetStr(n)": {
		"scope": "source.e2",
		"prefix": "gGetStr",
		"description": "(8 OPS) function string gGetStr()",
		"body": "gGetStr()"
	},
	"gSetStr(ns)": {
		"scope": "source.e2",
		"prefix": "gSetStr",
		"description": "(8 OPS) function void gSetStr()",
		"body": "gSetStr()"
	},
	"ang(xtd:)": {
		"scope": "source.e2",
		"prefix": "ang",
		"description": "(20 OPS) function angle ang(This)",
		"body": "ang(${1:This})"
	},
	"setY(v:n)": {
		"scope": "source.e2",
		"prefix": "setY",
		"description": "(2 OPS) function vector setY(Y)",
		"body": "setY(${1:Y})"
	},
	"gGetStr(s)": {
		"scope": "source.e2",
		"prefix": "gGetStr",
		"description": "(8 OPS) function string gGetStr()",
		"body": "gGetStr()"
	},
	"op:idx(vn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(2 OPS) function normal op:idx(Index)",
		"body": "op:idx(${1:Index})"
	},
	"gSetStr(ss)": {
		"scope": "source.e2",
		"prefix": "gSetStr",
		"description": "(8 OPS) function void gSetStr()",
		"body": "gSetStr()"
	},
	"lightCreate(n)": {
		"scope": "source.e2",
		"prefix": "lightCreate",
		"description": "(25 OPS) function void lightCreate(Index)",
		"body": "lightCreate(${1:Index})"
	},
	"lastDeathInflictor()": {
		"scope": "source.e2",
		"prefix": "lastDeathInflictor",
		"description": "(5 OPS) function entity lastDeathInflictor()",
		"body": "lastDeathInflictor()"
	},
	"toUnicodeChar(...)": {
		"scope": "source.e2",
		"prefix": "toUnicodeChar",
		"description": "(1 OPS) function string toUnicodeChar()",
		"body": "toUnicodeChar()"
	},
	"gDeleteVec(n)": {
		"scope": "source.e2",
		"prefix": "gDeleteVec",
		"description": "(8 OPS) function vector gDeleteVec()",
		"body": "gDeleteVec()"
	},
	"soundPitch(sn)": {
		"scope": "source.e2",
		"prefix": "soundPitch",
		"description": "(5 OPS) function void soundPitch(Index, Pitch)",
		"body": "soundPitch(${1:Index}, ${2:Pitch})"
	},
	"ceil(an)": {
		"scope": "source.e2",
		"prefix": "ceil",
		"description": "(5 OPS) function angle ceil(Rv1, Decimals)",
		"body": "ceil(${1:Rv1}, ${2:Decimals})"
	},
	"cross(xv2:xv2)": {
		"scope": "source.e2",
		"prefix": "cross",
		"description": "(3 OPS) function normal cross()",
		"body": "cross()"
	},
	"op:fea(nxv2r)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"dsSend(ssxm4)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"op:is(a)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(2 OPS) function normal op:is(Rv1)",
		"body": "op:is(${1:Rv1})"
	},
	"removeQuaternion(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeQuaternion",
		"description": "(5 OPS) function quaternion removeQuaternion()",
		"body": "removeQuaternion()"
	},
	"npcFace(e:v)": {
		"scope": "source.e2",
		"prefix": "npcFace",
		"description": "(5 OPS) function void npcFace(Rv2)",
		"body": "npcFace(${1:Rv2})"
	},
	"gGetVec(n)": {
		"scope": "source.e2",
		"prefix": "gGetVec",
		"description": "(8 OPS) function vector gGetVec()",
		"body": "gGetVec()"
	},
	"gSetVec(nv)": {
		"scope": "source.e2",
		"prefix": "gSetVec",
		"description": "(8 OPS) function void gSetVec()",
		"body": "gSetVec()"
	},
	"acos(c)": {
		"scope": "source.e2",
		"prefix": "acos",
		"description": "(5 OPS) function complex acos(Z)",
		"body": "acos(${1:Z})"
	},
	"op:idx(xtd=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"gGetVec(s)": {
		"scope": "source.e2",
		"prefix": "gGetVec",
		"description": "(8 OPS) function vector gGetVec()",
		"body": "gGetVec()"
	},
	"gSetVec(sv)": {
		"scope": "source.e2",
		"prefix": "gSetVec",
		"description": "(8 OPS) function void gSetVec()",
		"body": "gSetVec()"
	},
	"op:fea(smxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"holoUnparent(n)": {
		"scope": "source.e2",
		"prefix": "holoUnparent",
		"description": "(40 OPS) function void holoUnparent(Index)",
		"body": "holoUnparent(${1:Index})"
	},
	"inertia(e:)": {
		"scope": "source.e2",
		"prefix": "inertia",
		"description": "(30 OPS) function vector inertia(This)",
		"body": "inertia(${1:This})"
	},
	"op:is(xrd)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(1 OPS) function normal op:is(Walker)",
		"body": "op:is(${1:Walker})"
	},
	"error(s)": {
		"scope": "source.e2",
		"prefix": "error",
		"description": "(2 OPS) function void error(Reason)",
		"body": "error(${1:Reason})"
	},
	"gRemoveAllMatrixs()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllMatrixs",
		"description": "(5 OPS) function void gRemoveAllMatrixs()",
		"body": "gRemoveAllMatrixs()"
	},
	"op:idx(n=xgtsn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"setBodygroup(e:nn)": {
		"scope": "source.e2",
		"prefix": "setBodygroup",
		"description": "(10 OPS) function void setBodygroup(Bgrp_id, Bgrp_subid)",
		"body": "setBodygroup(${1:Bgrp_id}, ${2:Bgrp_subid})"
	},
	"op:idx(m=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"op:fea(sxm2xgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"setPower(xsc:v)": {
		"scope": "source.e2",
		"prefix": "setPower",
		"description": "(8 OPS) function stcontrol setPower(Vv)",
		"body": "setPower(${1:Vv})"
	},
	"op:neq(ss)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(3 OPS) function normal op:neq()",
		"body": "op:neq()"
	},
	"signalSetOnRemove(sn)": {
		"scope": "source.e2",
		"prefix": "signalSetOnRemove",
		"description": "(10 OPS) function void signalSetOnRemove(Name, Scope)",
		"body": "signalSetOnRemove(${1:Name}, ${2:Scope})"
	},
	"gRemoveAllMatrix2s(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllMatrix2s",
		"description": "(5 OPS) function void gRemoveAllMatrix2s()",
		"body": "gRemoveAllMatrix2s()"
	},
	"noranger()": {
		"scope": "source.e2",
		"prefix": "noranger",
		"description": "(1 OPS) function ranger noranger()",
		"body": "noranger()"
	},
	"gRemoveAllMatrix2s()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllMatrix2s",
		"description": "(5 OPS) function void gRemoveAllMatrix2s()",
		"body": "gRemoveAllMatrix2s()"
	},
	"removeMatrix2(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeMatrix2",
		"description": "(5 OPS) function matrix2 removeMatrix2()",
		"body": "removeMatrix2()"
	},
	"op:idx(xm2=xgtnxm2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"isHitNoDraw(xft:)": {
		"scope": "source.e2",
		"prefix": "isHitNoDraw",
		"description": "(3 OPS) function normal isHitNoDraw(This)",
		"body": "isHitNoDraw(${1:This})"
	},
	"op:idx(xm2=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xm2=xgtsxm2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"setName(s)": {
		"scope": "source.e2",
		"prefix": "setName",
		"description": "(5 OPS) function void setName(Name)",
		"body": "setName(${1:Name})"
	},
	"op:fea(sbxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:eq(aa)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(3 OPS) function normal op:eq(Rv1, Rv2)",
		"body": "op:eq(${1:Rv1}, ${2:Rv2})"
	},
	"setXyz(xwl:v)": {
		"scope": "source.e2",
		"prefix": "setXyz",
		"description": "(15 OPS) function void setXyz(Value)",
		"body": "setXyz(${1:Value})"
	},
	"gRemoveAllBones()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllBones",
		"description": "(5 OPS) function void gRemoveAllBones()",
		"body": "gRemoveAllBones()"
	},
	"op:eq(tt)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(1 OPS) function normal op:eq(Rv1, Rv2)",
		"body": "op:eq(${1:Rv1}, ${2:Rv2})"
	},
	"removeBone(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeBone",
		"description": "(5 OPS) function bone removeBone()",
		"body": "removeBone()"
	},
	"tool(e:)": {
		"scope": "source.e2",
		"prefix": "tool",
		"description": "(2 OPS) function string tool(This)",
		"body": "tool(${1:This})"
	},
	"op:idx(b=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"writeString(xwl:ns)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function normal writeString(Address, Data)",
		"body": "writeString(${1:Address}, ${2:Data})"
	},
	"op:fea(sxm4xgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"removeMatrix4(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeMatrix4",
		"description": "(5 OPS) function matrix4 removeMatrix4()",
		"body": "removeMatrix4()"
	},
	"gRemoveAllStcontrols()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllStcontrols",
		"description": "(5 OPS) function void gRemoveAllStcontrols()",
		"body": "gRemoveAllStcontrols()"
	},
	"rangerHull(nv)": {
		"scope": "source.e2",
		"prefix": "rangerHull",
		"description": "(20 OPS) function ranger rangerHull(Distance, Size)",
		"body": "rangerHull(${1:Distance}, ${2:Size})"
	},
	"op:idx(xm4=xgtnxm4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"toByte(s)": {
		"scope": "source.e2",
		"prefix": "toByte",
		"description": "(20 OPS) function normal toByte()",
		"body": "toByte()"
	},
	"op:idx(xm4=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xm4=xgtsxm4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"op:fea(nvr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:fea(sexgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"forward(a:)": {
		"scope": "source.e2",
		"prefix": "forward",
		"description": "(5 OPS) function vector forward(This)",
		"body": "forward(${1:This})"
	},
	"op:idx(e=xgtne)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"op:idx(e=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"op:fea(svxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:idx(n=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"op:idx(v=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"op:idx(v=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"op:fea(saxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"deparent(e:)": {
		"scope": "source.e2",
		"prefix": "deparent",
		"description": "(5 OPS) function void deparent(This)",
		"body": "deparent(${1:This})"
	},
	"gRemoveAllAngles(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllAngles",
		"description": "(5 OPS) function void gRemoveAllAngles()",
		"body": "gRemoveAllAngles()"
	},
	"format(s...)": {
		"scope": "source.e2",
		"prefix": "format",
		"description": "(10 OPS) function string format(Fmt)",
		"body": "format(${1:Fmt})"
	},
	"getWeaponColor(e:)": {
		"scope": "source.e2",
		"prefix": "getWeaponColor",
		"description": "(2 OPS) function vector getWeaponColor(This)",
		"body": "getWeaponColor(${1:This})"
	},
	"removeAngle(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeAngle",
		"description": "(5 OPS) function angle removeAngle()",
		"body": "removeAngle()"
	},
	"keyJump(e:)": {
		"scope": "source.e2",
		"prefix": "keyJump",
		"description": "(2 OPS) function normal keyJump(This)",
		"body": "keyJump(${1:This})"
	},
	"op:fea(nnr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:idx(a=xgtsa)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"op:idx(a=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"op:fea(snxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"popFtrace(r:)": {
		"scope": "source.e2",
		"prefix": "popFtrace",
		"description": "(7 OPS) function ftrace popFtrace()",
		"body": "popFtrace()"
	},
	"findMax()": {
		"scope": "source.e2",
		"prefix": "findMax",
		"description": "(2 OPS) function normal findMax()",
		"body": "findMax()"
	},
	"atanr(nn)": {
		"scope": "source.e2",
		"prefix": "atanr",
		"description": "(2 OPS) function normal atanr()",
		"body": "atanr()"
	},
	"gRemoveAllNumbers()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllNumbers",
		"description": "(5 OPS) function void gRemoveAllNumbers()",
		"body": "gRemoveAllNumbers()"
	},
	"op:idx(r=tnr)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function array op:idx()",
		"body": "op:idx()"
	},
	"runOnKeys(rnr)": {
		"scope": "source.e2",
		"prefix": "runOnKeys",
		"description": "(20 OPS) function void runOnKeys(Plys, On, Filter)",
		"body": "runOnKeys(${1:Plys}, ${2:On}, ${3:Filter})"
	},
	"op:idx(m=xgtsm)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"op:fea(sqxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:fea(sxefxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"gRemoveAllQuaternions()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllQuaternions",
		"description": "(5 OPS) function void gRemoveAllQuaternions()",
		"body": "gRemoveAllQuaternions()"
	},
	"op:idx(q=xgtnq)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"propSpawn(en)": {
		"scope": "source.e2",
		"prefix": "propSpawn",
		"description": "(40 OPS) function entity propSpawn(Template, Frozen)",
		"body": "propSpawn(${1:Template}, ${2:Frozen})"
	},
	"op:idx(q=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"fileCanWrite()": {
		"scope": "source.e2",
		"prefix": "fileCanWrite",
		"description": "(5 OPS) function normal fileCanWrite()",
		"body": "fileCanWrite()"
	},
	"popAngle(r:)": {
		"scope": "source.e2",
		"prefix": "popAngle",
		"description": "(7 OPS) function angle popAngle()",
		"body": "popAngle()"
	},
	"op:idx(q=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"op:fea(srxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:idx(q=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"constraintBreak(e:s)": {
		"scope": "source.e2",
		"prefix": "constraintBreak",
		"description": "(5 OPS) function void constraintBreak(Type)",
		"body": "constraintBreak(${1:Type})"
	},
	"gRemoveAllArrays()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllArrays",
		"description": "(5 OPS) function void gRemoveAllArrays()",
		"body": "gRemoveAllArrays()"
	},
	"op:idx(r=xgtnr)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function array op:idx()",
		"body": "op:idx()"
	},
	"op:idx(r=xgtsr)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function array op:idx()",
		"body": "op:idx()"
	},
	"popVector(r:)": {
		"scope": "source.e2",
		"prefix": "popVector",
		"description": "(7 OPS) function vector popVector()",
		"body": "popVector()"
	},
	"isUnderWater(e:)": {
		"scope": "source.e2",
		"prefix": "isUnderWater",
		"description": "(10 OPS) function normal isUnderWater(This)",
		"body": "isUnderWater(${1:This})"
	},
	"swapElements(xm2:nnnn)": {
		"scope": "source.e2",
		"prefix": "swapElements",
		"description": "(5 OPS) function matrix2 swapElements(Rv2, Rv3, Rv4, Rv5)",
		"body": "swapElements(${1:Rv2}, ${2:Rv3}, ${3:Rv4}, ${4:Rv5})"
	},
	"op:idx(r=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function array op:idx()",
		"body": "op:idx()"
	},
	"heading(vav)": {
		"scope": "source.e2",
		"prefix": "heading",
		"description": "(15 OPS) function angle heading(Originpos, Originangle, Pos)",
		"body": "heading(${1:Originpos}, ${2:Originangle}, ${3:Pos})"
	},
	"holoReset(nsvvs)": {
		"scope": "source.e2",
		"prefix": "holoReset",
		"description": "(20 OPS) function void holoReset(Index, Model, Scale, Color, Material)",
		"body": "holoReset(${1:Index}, ${2:Model}, ${3:Scale}, ${4:Color}, ${5:Material})"
	},
	"gDeleteAng(s)": {
		"scope": "source.e2",
		"prefix": "gDeleteAng",
		"description": "(8 OPS) function angle gDeleteAng()",
		"body": "gDeleteAng()"
	},
	"fromUnit(sn)": {
		"scope": "source.e2",
		"prefix": "fromUnit",
		"description": "(2 OPS) function normal fromUnit(Rv1, Rv2)",
		"body": "fromUnit(${1:Rv1}, ${2:Rv2})"
	},
	"gRemoveAllFtraces(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllFtraces",
		"description": "(5 OPS) function void gRemoveAllFtraces()",
		"body": "gRemoveAllFtraces()"
	},
	"isFrozen(b:)": {
		"scope": "source.e2",
		"prefix": "isFrozen",
		"description": "(2 OPS) function normal isFrozen(This)",
		"body": "isFrozen(${1:This})"
	},
	"op:idx(xft=xgtnxft)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xft=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xft=xgtsxft)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"op:fea(sxscxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"rayNudge(xft:vn)": {
		"scope": "source.e2",
		"prefix": "rayNudge",
		"description": "(3 OPS) function ftrace rayNudge(Vv, Nl)",
		"body": "rayNudge(${1:Vv}, ${2:Nl})"
	},
	"gRemoveAllStcontrols(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllStcontrols",
		"description": "(5 OPS) function void gRemoveAllStcontrols()",
		"body": "gRemoveAllStcontrols()"
	},
	"removeStcontrol(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeStcontrol",
		"description": "(5 OPS) function stcontrol removeStcontrol()",
		"body": "removeStcontrol()"
	},
	"op:idx(xsc=xgtnxsc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xsc=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"op:fea(sxv4t)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:idx(xsc=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"createWire(e:essnvs)": {
		"scope": "source.e2",
		"prefix": "createWire",
		"description": "(30 OPS) function normal createWire(Ent2, Inputname, Outputname, Width, Color, Mat)",
		"body": "createWire(${1:Ent2}, ${2:Inputname}, ${3:Outputname}, ${4:Width}, ${5:Color}, ${6:Mat})"
	},
	"op:fea(sxv2xgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"gRemoveAllVector2s(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllVector2s",
		"description": "(5 OPS) function void gRemoveAllVector2s()",
		"body": "gRemoveAllVector2s()"
	},
	"op:div(an)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function angle op:div(Rv1, Rv2)",
		"body": "op:div(${1:Rv1}, ${2:Rv2})"
	},
	"gRemoveAllVector2s()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllVector2s",
		"description": "(5 OPS) function void gRemoveAllVector2s()",
		"body": "gRemoveAllVector2s()"
	},
	"setGainID(xsc:nn)": {
		"scope": "source.e2",
		"prefix": "setGainID",
		"description": "(7 OPS) function stcontrol setGainID(Ni, Nd)",
		"body": "setGainID(${1:Ni}, ${2:Nd})"
	},
	"removeVector2(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeVector2",
		"description": "(5 OPS) function vector2 removeVector2()",
		"body": "removeVector2()"
	},
	"shiftL(xv4)": {
		"scope": "source.e2",
		"prefix": "shiftL",
		"description": "(4 OPS) function vector4 shiftL()",
		"body": "shiftL()"
	},
	"op:idx(xv2=xgtnxv2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xv2=xgtsxv2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"randvec4(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "randvec4",
		"description": "(7 OPS) function vector4 randvec4(Min, Max)",
		"body": "randvec4(${1:Min}, ${2:Max})"
	},
	"holoGetPose(ns)": {
		"scope": "source.e2",
		"prefix": "holoGetPose",
		"description": "(20 OPS) function normal holoGetPose(Index, Pose)",
		"body": "holoGetPose(${1:Index}, ${2:Pose})"
	},
	"op:idx(xv2=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"matrix(xwl:s)": {
		"scope": "source.e2",
		"prefix": "matrix",
		"description": "(5 OPS) function matrix matrix()",
		"body": "matrix()"
	},
	"isIntegrating(xsc:)": {
		"scope": "source.e2",
		"prefix": "isIntegrating",
		"description": "(3 OPS) function normal isIntegrating(This)",
		"body": "isIntegrating(${1:This})"
	},
	"length(v:)": {
		"scope": "source.e2",
		"prefix": "length",
		"description": "(5 OPS) function normal length(This)",
		"body": "length(${1:This})"
	},
	"op:fea(sxv4xgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"gRemoveAllVector4s()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllVector4s",
		"description": "(5 OPS) function void gRemoveAllVector4s()",
		"body": "gRemoveAllVector4s()"
	},
	"op:idx(xv4=xgtnxv4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xv4=xgtsxv4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xv4=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"op:fea(stxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:fea(sxwlxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"gRemoveAllTables()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllTables",
		"description": "(5 OPS) function void gRemoveAllTables()",
		"body": "gRemoveAllTables()"
	},
	"smpLocal(xft:e)": {
		"scope": "source.e2",
		"prefix": "smpLocal",
		"description": "(12 OPS) function ftrace smpLocal(Ve)",
		"body": "smpLocal(${1:Ve})"
	},
	"holoVisible(nrn)": {
		"scope": "source.e2",
		"prefix": "holoVisible",
		"description": "(10 OPS) function void holoVisible(Index, Players, Visible)",
		"body": "holoVisible(${1:Index}, ${2:Players}, ${3:Visible})"
	},
	"vec(n)": {
		"scope": "source.e2",
		"prefix": "vec",
		"description": "(2 OPS) function vector vec(X)",
		"body": "vec(${1:X})"
	},
	"op:idx(t=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function table op:idx()",
		"body": "op:idx()"
	},
	"det(xm2)": {
		"scope": "source.e2",
		"prefix": "det",
		"description": "(5 OPS) function normal det(Rv1)",
		"body": "det(${1:Rv1})"
	},
	"y(xv2:)": {
		"scope": "source.e2",
		"prefix": "y",
		"description": "(1 OPS) function normal y()",
		"body": "y()"
	},
	"op:fea(ssxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"gRemoveAllStrings(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllStrings",
		"description": "(5 OPS) function void gRemoveAllStrings()",
		"body": "gRemoveAllStrings()"
	},
	"gRemoveAllStrings()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllStrings",
		"description": "(5 OPS) function void gRemoveAllStrings()",
		"body": "gRemoveAllStrings()"
	},
	"bearing(vav)": {
		"scope": "source.e2",
		"prefix": "bearing",
		"description": "(15 OPS) function normal bearing(Originpos, Originangle, Pos)",
		"body": "bearing(${1:Originpos}, ${2:Originangle}, ${3:Pos})"
	},
	"removeString(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeString",
		"description": "(5 OPS) function string removeString()",
		"body": "removeString()"
	},
	"op:idx(xv4=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(s=xgtss)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"op:idx(s=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"eye(e:)": {
		"scope": "source.e2",
		"prefix": "eye",
		"description": "(8 OPS) function vector eye(This)",
		"body": "eye(${1:This})"
	},
	"gRemoveAllQuaternions(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllQuaternions",
		"description": "(5 OPS) function void gRemoveAllQuaternions()",
		"body": "gRemoveAllQuaternions()"
	},
	"gRemoveAllEffects(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllEffects",
		"description": "(5 OPS) function void gRemoveAllEffects()",
		"body": "gRemoveAllEffects()"
	},
	"lastDeathTime()": {
		"scope": "source.e2",
		"prefix": "lastDeathTime",
		"description": "(5 OPS) function normal lastDeathTime()",
		"body": "lastDeathTime()"
	},
	"op:idx(xef=xgtnxef)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xef=xgtsxef)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xef=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"gRemoveAllTables(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllTables",
		"description": "(5 OPS) function void gRemoveAllTables()",
		"body": "gRemoveAllTables()"
	},
	"left(s:n)": {
		"scope": "source.e2",
		"prefix": "left",
		"description": "(20 OPS) function string left()",
		"body": "left()"
	},
	"gRemoveAllWirelinks()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllWirelinks",
		"description": "(5 OPS) function void gRemoveAllWirelinks()",
		"body": "gRemoveAllWirelinks()"
	},
	"egpRoundedBox(xwl:nxv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpRoundedBox",
		"description": "(15 OPS) function void egpRoundedBox(Index, Pos, Size)",
		"body": "egpRoundedBox(${1:Index}, ${2:Pos}, ${3:Size})"
	},
	"op:idx(xwl=xgtnxwl)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xwl=xgtsxwl)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"op:idx(e=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"op:for()": {
		"scope": "source.e2",
		"prefix": "op:for",
		"description": "(0 OPS) function void op:for()",
		"body": "op:for()"
	},
	"vec2()": {
		"scope": "source.e2",
		"prefix": "vec2",
		"description": "(1 OPS) function vector2 vec2()",
		"body": "vec2()"
	},
	"pi()": {
		"scope": "source.e2",
		"prefix": "pi",
		"description": "(2 OPS) function normal pi()",
		"body": "pi()"
	},
	"rangerOffset(vv)": {
		"scope": "source.e2",
		"prefix": "rangerOffset",
		"description": "(20 OPS) function ranger rangerOffset(From, To)",
		"body": "rangerOffset(${1:From}, ${2:To})"
	},
	"removeComplex(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeComplex",
		"description": "(5 OPS) function complex removeComplex()",
		"body": "removeComplex()"
	},
	"floor(xv2)": {
		"scope": "source.e2",
		"prefix": "floor",
		"description": "(4 OPS) function vector2 floor(Rv1)",
		"body": "floor(${1:Rv1})"
	},
	"op:idx(c=xgtnc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"toLocal(b:v)": {
		"scope": "source.e2",
		"prefix": "toLocal",
		"description": "(1 OPS) function vector toLocal(Pos)",
		"body": "toLocal(${1:Pos})"
	},
	"op:mul(xm2xv2)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function vector2 op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"setRow(m:nv)": {
		"scope": "source.e2",
		"prefix": "setRow",
		"description": "(5 OPS) function matrix setRow(Rv2, Rv3)",
		"body": "setRow(${1:Rv2}, ${2:Rv3})"
	},
	"pop(t:)": {
		"scope": "source.e2",
		"prefix": "pop",
		"description": "(3 OPS) function normal pop(This)",
		"body": "pop(${1:This})"
	},
	"op:idx(c=xgts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"op:fea(sxrdxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"hsl2rgb(nnn)": {
		"scope": "source.e2",
		"prefix": "hsl2rgb",
		"description": "(2 OPS) function vector hsl2rgb(H, S, L)",
		"body": "hsl2rgb(${1:H}, ${2:S}, ${3:L})"
	},
	"holoSetPose(nsn)": {
		"scope": "source.e2",
		"prefix": "holoSetPose",
		"description": "(20 OPS) function void holoSetPose(Index, Pose, Value)",
		"body": "holoSetPose(${1:Index}, ${2:Pose}, ${3:Value})"
	},
	"unshiftMatrix2(r:xm2)": {
		"scope": "source.e2",
		"prefix": "unshiftMatrix2",
		"description": "(7 OPS) function matrix2 unshiftMatrix2()",
		"body": "unshiftMatrix2()"
	},
	"deleteWire(e:s)": {
		"scope": "source.e2",
		"prefix": "deleteWire",
		"description": "(30 OPS) function normal deleteWire(Inputname)",
		"body": "deleteWire(${1:Inputname})"
	},
	"vonEncode(t)": {
		"scope": "source.e2",
		"prefix": "vonEncode",
		"description": "(10 OPS) function string vonEncode(Data)",
		"body": "vonEncode(${1:Data})"
	},
	"secr(n)": {
		"scope": "source.e2",
		"prefix": "secr",
		"description": "(2 OPS) function normal secr()",
		"body": "secr()"
	},
	"op:idx(xrd=xgtnxrd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"isPlayer(e:)": {
		"scope": "source.e2",
		"prefix": "isPlayer",
		"description": "(10 OPS) function normal isPlayer(This)",
		"body": "isPlayer(${1:This})"
	},
	"op:or(nn)": {
		"scope": "source.e2",
		"prefix": "op:or",
		"description": "(1 OPS) function normal op:or()",
		"body": "op:or()"
	},
	"op:idx(xrd=xgtsxrd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"findIncludeModel(s)": {
		"scope": "source.e2",
		"prefix": "findIncludeModel",
		"description": "(10 OPS) function void findIncludeModel(Model)",
		"body": "findIncludeModel(${1:Model})"
	},
	"op:fea(sxtdxgt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(1 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"signalSendDirect(se)": {
		"scope": "source.e2",
		"prefix": "signalSendDirect",
		"description": "(10 OPS) function void signalSendDirect(Name, Receiver)",
		"body": "signalSendDirect(${1:Name}, ${2:Receiver})"
	},
	"gRemoveAllTracedatas()": {
		"scope": "source.e2",
		"prefix": "gRemoveAllTracedatas",
		"description": "(5 OPS) function void gRemoveAllTracedatas()",
		"body": "gRemoveAllTracedatas()"
	},
	"removeTracedata(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeTracedata",
		"description": "(5 OPS) function tracedata removeTracedata()",
		"body": "removeTracedata()"
	},
	"op:idx(xtd=xgtnxtd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"holoScaleUnits(nv)": {
		"scope": "source.e2",
		"prefix": "holoScaleUnits",
		"description": "(15 OPS) function void holoScaleUnits(Index, Size)",
		"body": "holoScaleUnits(${1:Index}, ${2:Size})"
	},
	"getGainPD(xsc:)": {
		"scope": "source.e2",
		"prefix": "getGainPD",
		"description": "(3 OPS) function vector2 getGainPD(This)",
		"body": "getGainPD(${1:This})"
	},
	"getFractionLenLS(xft:)": {
		"scope": "source.e2",
		"prefix": "getFractionLenLS",
		"description": "(3 OPS) function normal getFractionLenLS(This)",
		"body": "getFractionLenLS(${1:This})"
	},
	"dsSend(ssnxv2)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"op:idx(xtd=xgtsxtd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"propSpawn(sn)": {
		"scope": "source.e2",
		"prefix": "propSpawn",
		"description": "(40 OPS) function entity propSpawn(Model, Frozen)",
		"body": "propSpawn(${1:Model}, ${2:Frozen})"
	},
	"lightBrightness(nn)": {
		"scope": "source.e2",
		"prefix": "lightBrightness",
		"description": "(8 OPS) function void lightBrightness(Index, Brightness)",
		"body": "lightBrightness(${1:Index}, ${2:Brightness})"
	},
	"op:idx(m=xwlsm)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"op:div(cc)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function complex op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"setMatrix(xwl:sm)": {
		"scope": "source.e2",
		"prefix": "setMatrix",
		"description": "(5 OPS) function matrix setMatrix()",
		"body": "setMatrix()"
	},
	"setMatrix2(xwl:sxm2)": {
		"scope": "source.e2",
		"prefix": "setMatrix2",
		"description": "(5 OPS) function matrix2 setMatrix2()",
		"body": "setMatrix2()"
	},
	"op:idx(xm2=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"setTrails(e:nnnsvn)": {
		"scope": "source.e2",
		"prefix": "setTrails",
		"description": "(30 OPS) function void setTrails(Startsize, Endsize, Length, Material, Color, Alpha)",
		"body": "setTrails(${1:Startsize}, ${2:Endsize}, ${3:Length}, ${4:Material}, ${5:Color}, ${6:Alpha})"
	},
	"jsonEncode(t)": {
		"scope": "source.e2",
		"prefix": "jsonEncode",
		"description": "(50 OPS) function string jsonEncode(Data)",
		"body": "jsonEncode(${1:Data})"
	},
	"op:idx(xft=esxft)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"isValidPhysics(e:)": {
		"scope": "source.e2",
		"prefix": "isValidPhysics",
		"description": "(10 OPS) function normal isValidPhysics(This)",
		"body": "isValidPhysics(${1:This})"
	},
	"getChip(xft:)": {
		"scope": "source.e2",
		"prefix": "getChip",
		"description": "(3 OPS) function entity getChip(This)",
		"body": "getChip(${1:This})"
	},
	"httpUrlEncode(s)": {
		"scope": "source.e2",
		"prefix": "httpUrlEncode",
		"description": "(5 OPS) function string httpUrlEncode(Data)",
		"body": "httpUrlEncode(${1:Data})"
	},
	"toLocal(e:v)": {
		"scope": "source.e2",
		"prefix": "toLocal",
		"description": "(15 OPS) function vector toLocal(Worldposition)",
		"body": "toLocal(${1:Worldposition})"
	},
	"dehomogenized(v:)": {
		"scope": "source.e2",
		"prefix": "dehomogenized",
		"description": "(5 OPS) function vector2 dehomogenized(This)",
		"body": "dehomogenized(${1:This})"
	},
	"ceil(xv2)": {
		"scope": "source.e2",
		"prefix": "ceil",
		"description": "(4 OPS) function vector2 ceil(Rv1)",
		"body": "ceil(${1:Rv1})"
	},
	"bezier(xv2xv2xv2n)": {
		"scope": "source.e2",
		"prefix": "bezier",
		"description": "(4 OPS) function vector2 bezier(Startvec, Control, Endvec, Ratio)",
		"body": "bezier(${1:Startvec}, ${2:Control}, ${3:Endvec}, ${4:Ratio})"
	},
	"gGetEnt(s)": {
		"scope": "source.e2",
		"prefix": "gGetEnt",
		"description": "(8 OPS) function entity gGetEnt()",
		"body": "gGetEnt()"
	},
	"inrange(nnn)": {
		"scope": "source.e2",
		"prefix": "inrange",
		"description": "(2 OPS) function normal inrange(Value, Min, Max)",
		"body": "inrange(${1:Value}, ${2:Min}, ${3:Max})"
	},
	"getMaterial(e:)": {
		"scope": "source.e2",
		"prefix": "getMaterial",
		"description": "(10 OPS) function string getMaterial(This)",
		"body": "getMaterial(${1:This})"
	},
	"op:is(xv4)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(4 OPS) function normal op:is()",
		"body": "op:is()"
	},
	"propGetElasticity(e:)": {
		"scope": "source.e2",
		"prefix": "propGetElasticity",
		"description": "(10 OPS) function normal propGetElasticity(This)",
		"body": "propGetElasticity(${1:This})"
	},
	"op:idx(xm4=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"getCopy(xft:evvn)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Ee, Vp, Vd, Nl)",
		"body": "getCopy(${1:Ee}, ${2:Vp}, ${3:Vd}, ${4:Nl})"
	},
	"op:idx(e=xwlse)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"tuneProcCHRLR(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "tuneProcCHRLR",
		"description": "(7 OPS) function stcontrol tuneProcCHRLR(Nk, Nt, Nl)",
		"body": "tuneProcCHRLR(${1:Nk}, ${2:Nt}, ${3:Nl})"
	},
	"op:idx(xsc=rnxsc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"op:idx(e=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"egpCursor(xwl:e)": {
		"scope": "source.e2",
		"prefix": "egpCursor",
		"description": "(20 OPS) function vector2 egpCursor(Ply)",
		"body": "egpCursor(${1:Ply})"
	},
	"op:dat()": {
		"scope": "source.e2",
		"prefix": "op:dat",
		"description": "(1 OPS) function void op:dat()",
		"body": "op:dat()"
	},
	"insertAngle(r:na)": {
		"scope": "source.e2",
		"prefix": "insertAngle",
		"description": "(7 OPS) function angle insertAngle()",
		"body": "insertAngle()"
	},
	"dsSendDirect(sexsc)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"pushEntity(r:e)": {
		"scope": "source.e2",
		"prefix": "pushEntity",
		"description": "(7 OPS) function entity pushEntity()",
		"body": "pushEntity()"
	},
	"op:idx(a=xwlsa)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"setAngle(xwl:sa)": {
		"scope": "source.e2",
		"prefix": "setAngle",
		"description": "(5 OPS) function angle setAngle()",
		"body": "setAngle()"
	},
	"op:idx(n=xwlsn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xm4=rnxm4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(q=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"op:sub(an)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(2 OPS) function angle op:sub(Rv1, Rv2)",
		"body": "op:sub(${1:Rv1}, ${2:Rv2})"
	},
	"slider(evev)": {
		"scope": "source.e2",
		"prefix": "slider",
		"description": "(30 OPS) function void slider(Ent1, V1, Ent2, V2)",
		"body": "slider(${1:Ent1}, ${2:V1}, ${3:Ent2}, ${4:V2})"
	},
	"pos(e:)": {
		"scope": "source.e2",
		"prefix": "pos",
		"description": "(5 OPS) function vector pos(This)",
		"body": "pos(${1:This})"
	},
	"quaternion(xwl:s)": {
		"scope": "source.e2",
		"prefix": "quaternion",
		"description": "(5 OPS) function quaternion quaternion()",
		"body": "quaternion()"
	},
	"op:ass(r)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(1 OPS) function array op:ass()",
		"body": "op:ass()"
	},
	"angnorm(n)": {
		"scope": "source.e2",
		"prefix": "angnorm",
		"description": "(5 OPS) function normal angnorm(Rv1)",
		"body": "angnorm(${1:Rv1})"
	},
	"stcontrol(xwl:s)": {
		"scope": "source.e2",
		"prefix": "stcontrol",
		"description": "(5 OPS) function stcontrol stcontrol()",
		"body": "stcontrol()"
	},
	"insertRanger(r:nxrd)": {
		"scope": "source.e2",
		"prefix": "insertRanger",
		"description": "(7 OPS) function ranger insertRanger()",
		"body": "insertRanger()"
	},
	"op:idx(xv2=xwlsxv2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"vector2(xwl:s)": {
		"scope": "source.e2",
		"prefix": "vector2",
		"description": "(5 OPS) function vector2 vector2()",
		"body": "vector2()"
	},
	"op:idx(xv4=xwlsxv4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(s=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"right(a:)": {
		"scope": "source.e2",
		"prefix": "right",
		"description": "(5 OPS) function vector right(This)",
		"body": "right(${1:This})"
	},
	"table(xwl:s)": {
		"scope": "source.e2",
		"prefix": "table",
		"description": "(5 OPS) function table table()",
		"body": "table()"
	},
	"unshiftVector2(r:xv2)": {
		"scope": "source.e2",
		"prefix": "unshiftVector2",
		"description": "(7 OPS) function vector2 unshiftVector2()",
		"body": "unshiftVector2()"
	},
	"setString(xwl:ss)": {
		"scope": "source.e2",
		"prefix": "setString",
		"description": "(5 OPS) function string setString()",
		"body": "setString()"
	},
	"op:div(nc)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function complex op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"remHit(xft:s)": {
		"scope": "source.e2",
		"prefix": "remHit",
		"description": "(3 OPS) function ftrace remHit(Sm)",
		"body": "remHit(${1:Sm})"
	},
	"ln(n)": {
		"scope": "source.e2",
		"prefix": "ln",
		"description": "(2 OPS) function normal ln()",
		"body": "ln()"
	},
	"concat(r:nn)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(Startindex, Endindex)",
		"body": "concat(${1:Startindex}, ${2:Endindex})"
	},
	"getBodygroups(e:n)": {
		"scope": "source.e2",
		"prefix": "getBodygroups",
		"description": "(10 OPS) function normal getBodygroups(Bgrp_id)",
		"body": "getBodygroups(${1:Bgrp_id})"
	},
	"egpFiltering(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpFiltering",
		"description": "(10 OPS) function void egpFiltering(Index, Filtering)",
		"body": "egpFiltering(${1:Index}, ${2:Filtering})"
	},
	"distance(v:v)": {
		"scope": "source.e2",
		"prefix": "distance",
		"description": "(5 OPS) function normal distance(Other)",
		"body": "distance(${1:Other})"
	},
	"setWindupU(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setWindupU",
		"description": "(3 OPS) function stcontrol setWindupU(Nu)",
		"body": "setWindupU(${1:Nu})"
	},
	"op:idx(xwl=xwlsxwl)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"newFTrace(vvn)": {
		"scope": "source.e2",
		"prefix": "newFTrace",
		"description": "(20 OPS) function ftrace newFTrace(Vp, Vd, Nl)",
		"body": "newFTrace(${1:Vp}, ${2:Vd}, ${3:Nl})"
	},
	"setDiagonal(m:v)": {
		"scope": "source.e2",
		"prefix": "setDiagonal",
		"description": "(5 OPS) function matrix setDiagonal(Rv2)",
		"body": "setDiagonal(${1:Rv2})"
	},
	"op:idx(xgt=xwlsxgt)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function gtable op:idx()",
		"body": "op:idx()"
	},
	"setGtable(xwl:sxgt)": {
		"scope": "source.e2",
		"prefix": "setGtable",
		"description": "(5 OPS) function gtable setGtable()",
		"body": "setGtable()"
	},
	"gtable(xwl:s)": {
		"scope": "source.e2",
		"prefix": "gtable",
		"description": "(5 OPS) function gtable gtable()",
		"body": "gtable()"
	},
	"holoRemainingSpawns()": {
		"scope": "source.e2",
		"prefix": "holoRemainingSpawns",
		"description": "(2 OPS) function normal holoRemainingSpawns()",
		"body": "holoRemainingSpawns()"
	},
	"hashNoComments()": {
		"scope": "source.e2",
		"prefix": "hashNoComments",
		"description": "(5 OPS) function normal hashNoComments()",
		"body": "hashNoComments()"
	},
	"dsSendDirect(sexrd)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"complex(xwl:s)": {
		"scope": "source.e2",
		"prefix": "complex",
		"description": "(5 OPS) function complex complex()",
		"body": "complex()"
	},
	"op:seq()": {
		"scope": "source.e2",
		"prefix": "op:seq",
		"description": "(0 OPS) function void op:seq()",
		"body": "op:seq()"
	},
	"op:sub(vv)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(2 OPS) function vector op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"sinr(n)": {
		"scope": "source.e2",
		"prefix": "sinr",
		"description": "(2 OPS) function normal sinr()",
		"body": "sinr()"
	},
	"op:idx(xrd=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"shiftMatrix2(r:)": {
		"scope": "source.e2",
		"prefix": "shiftMatrix2",
		"description": "(7 OPS) function matrix2 shiftMatrix2()",
		"body": "shiftMatrix2()"
	},
	"newFTrace(v)": {
		"scope": "source.e2",
		"prefix": "newFTrace",
		"description": "(20 OPS) function ftrace newFTrace(Vp)",
		"body": "newFTrace(${1:Vp})"
	},
	"setTracedata(xwl:sxtd)": {
		"scope": "source.e2",
		"prefix": "setTracedata",
		"description": "(5 OPS) function tracedata setTracedata()",
		"body": "setTracedata()"
	},
	"tracedata(xwl:s)": {
		"scope": "source.e2",
		"prefix": "tracedata",
		"description": "(5 OPS) function tracedata tracedata()",
		"body": "tracedata()"
	},
	"changed(xgt)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"op:neg(n)": {
		"scope": "source.e2",
		"prefix": "op:neg",
		"description": "(0.5 OPS) function normal op:neg()",
		"body": "op:neg()"
	},
	"applyForce(e:v)": {
		"scope": "source.e2",
		"prefix": "applyForce",
		"description": "(30 OPS) function void applyForce(Force)",
		"body": "applyForce(${1:Force})"
	},
	"changed(xm2)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"changed(xft)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"changed(xwl)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"cameraToggle(nn)": {
		"scope": "source.e2",
		"prefix": "cameraToggle",
		"description": "(15 OPS) function void cameraToggle(Index, Toggle)",
		"body": "cameraToggle(${1:Index}, ${2:Toggle})"
	},
	"changed(xsc)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"boxCenterW(e:)": {
		"scope": "source.e2",
		"prefix": "boxCenterW",
		"description": "(10 OPS) function vector boxCenterW(This)",
		"body": "boxCenterW(${1:This})"
	},
	"removeVector(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeVector",
		"description": "(5 OPS) function vector removeVector()",
		"body": "removeVector()"
	},
	"changed(m)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"changed(xrd)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"changed(s)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"changed(b)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"egpPoly(xwl:n...)": {
		"scope": "source.e2",
		"prefix": "egpPoly",
		"description": "(20 OPS) function void egpPoly(Index)",
		"body": "egpPoly(${1:Index})"
	},
	"writeUnicodeString(xwl:snnvn)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y, Textcolor, Bgcolor)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor})"
	},
	"op:neq(cc)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(2 OPS) function normal op:neq(Lhs, Rhs)",
		"body": "op:neq(${1:Lhs}, ${2:Rhs})"
	},
	"op:idx(v=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"keyReload(e:)": {
		"scope": "source.e2",
		"prefix": "keyReload",
		"description": "(2 OPS) function normal keyReload(This)",
		"body": "keyReload(${1:This})"
	},
	"op:switch()": {
		"scope": "source.e2",
		"prefix": "op:switch",
		"description": "(3 OPS) function void op:switch()",
		"body": "op:switch()"
	},
	"ioGetInputMatrix2(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputMatrix2",
		"description": "(5 OPS) function matrix2 ioGetInputMatrix2()",
		"body": "ioGetInputMatrix2()"
	},
	"ioSetOutput(sxm2)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function matrix2 ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"ioGetInputBone(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputBone",
		"description": "(5 OPS) function bone ioGetInputBone()",
		"body": "ioGetInputBone()"
	},
	"unshiftEffect(r:xef)": {
		"scope": "source.e2",
		"prefix": "unshiftEffect",
		"description": "(7 OPS) function effect unshiftEffect()",
		"body": "unshiftEffect()"
	},
	"ioSetOutput(sb)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function bone ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"vector4(r:n)": {
		"scope": "source.e2",
		"prefix": "vector4",
		"description": "(5 OPS) function vector4 vector4()",
		"body": "vector4()"
	},
	"ioGetInputEntity(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputEntity",
		"description": "(5 OPS) function entity ioGetInputEntity()",
		"body": "ioGetInputEntity()"
	},
	"op:idx(xwl=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"tuneProcZN(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "tuneProcZN",
		"description": "(7 OPS) function stcontrol tuneProcZN(Uk, Ut, Ul)",
		"body": "tuneProcZN(${1:Uk}, ${2:Ut}, ${3:Ul})"
	},
	"ioSetOutput(sv)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function vector ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"ioGetInputAngle(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputAngle",
		"description": "(5 OPS) function angle ioGetInputAngle()",
		"body": "ioGetInputAngle()"
	},
	"setBone(r:nb)": {
		"scope": "source.e2",
		"prefix": "setBone",
		"description": "(5 OPS) function bone setBone()",
		"body": "setBone()"
	},
	"ioGetInputArray(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputArray",
		"description": "(5 OPS) function array ioGetInputArray()",
		"body": "ioGetInputArray()"
	},
	"findDisallowClass(s)": {
		"scope": "source.e2",
		"prefix": "findDisallowClass",
		"description": "(10 OPS) function void findDisallowClass(Class)",
		"body": "findDisallowClass(${1:Class})"
	},
	"ioSetOutput(sr)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function array ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"holoParentAttachment(nes)": {
		"scope": "source.e2",
		"prefix": "holoParentAttachment",
		"description": "(40 OPS) function void holoParentAttachment(Index, Ent, Attachmentname)",
		"body": "holoParentAttachment(${1:Index}, ${2:Ent}, ${3:Attachmentname})"
	},
	"spawnClk()": {
		"scope": "source.e2",
		"prefix": "spawnClk",
		"description": "(5 OPS) function normal spawnClk()",
		"body": "spawnClk()"
	},
	"ioSetOutput(sxft)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function ftrace ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"ioGetInputStcontrol(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputStcontrol",
		"description": "(5 OPS) function stcontrol ioGetInputStcontrol()",
		"body": "ioGetInputStcontrol()"
	},
	"ioGetInputVector2(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputVector2",
		"description": "(5 OPS) function vector2 ioGetInputVector2()",
		"body": "ioGetInputVector2()"
	},
	"ioSetOutput(sxv2)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function vector2 ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"parentTo(e:)": {
		"scope": "source.e2",
		"prefix": "parentTo",
		"description": "(5 OPS) function void parentTo(This)",
		"body": "parentTo(${1:This})"
	},
	"ioSetOutput(sxv4)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function vector4 ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"frac(n)": {
		"scope": "source.e2",
		"prefix": "frac",
		"description": "(2 OPS) function normal frac(Rv1)",
		"body": "frac(${1:Rv1})"
	},
	"ioGetInputString(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputString",
		"description": "(5 OPS) function string ioGetInputString()",
		"body": "ioGetInputString()"
	},
	"shift(t:)": {
		"scope": "source.e2",
		"prefix": "shift",
		"description": "(3 OPS) function normal shift(This)",
		"body": "shift(${1:This})"
	},
	"keyDuck(e:)": {
		"scope": "source.e2",
		"prefix": "keyDuck",
		"description": "(2 OPS) function normal keyDuck(This)",
		"body": "keyDuck(${1:This})"
	},
	"tanh(n)": {
		"scope": "source.e2",
		"prefix": "tanh",
		"description": "(2 OPS) function normal tanh()",
		"body": "tanh()"
	},
	"adj(xm2)": {
		"scope": "source.e2",
		"prefix": "adj",
		"description": "(5 OPS) function matrix2 adj(Rv1)",
		"body": "adj(${1:Rv1})"
	},
	"entity(n)": {
		"scope": "source.e2",
		"prefix": "entity",
		"description": "(5 OPS) function entity entity(Id)",
		"body": "entity(${1:Id})"
	},
	"ioGetInputComplex(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputComplex",
		"description": "(5 OPS) function complex ioGetInputComplex()",
		"body": "ioGetInputComplex()"
	},
	"ioGetInputRanger(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputRanger",
		"description": "(5 OPS) function ranger ioGetInputRanger()",
		"body": "ioGetInputRanger()"
	},
	"findIncludeEntity(e)": {
		"scope": "source.e2",
		"prefix": "findIncludeEntity",
		"description": "(10 OPS) function void findIncludeEntity(Ent)",
		"body": "findIncludeEntity(${1:Ent})"
	},
	"smpWorld(xft:e)": {
		"scope": "source.e2",
		"prefix": "smpWorld",
		"description": "(12 OPS) function ftrace smpWorld(Ve)",
		"body": "smpWorld(${1:Ve})"
	},
	"holoParent(ne)": {
		"scope": "source.e2",
		"prefix": "holoParent",
		"description": "(40 OPS) function void holoParent(Index, Ent)",
		"body": "holoParent(${1:Index}, ${2:Ent})"
	},
	"holoColor(nvn)": {
		"scope": "source.e2",
		"prefix": "holoColor",
		"description": "(15 OPS) function void holoColor(Index, Color, Alpha)",
		"body": "holoColor(${1:Index}, ${2:Color}, ${3:Alpha})"
	},
	"op:add(qq)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(4 OPS) function quaternion op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"findDisallowPlayer(s)": {
		"scope": "source.e2",
		"prefix": "findDisallowPlayer",
		"description": "(10 OPS) function void findDisallowPlayer(Name)",
		"body": "findDisallowPlayer(${1:Name})"
	},
	"keyRightTurn(e:)": {
		"scope": "source.e2",
		"prefix": "keyRightTurn",
		"description": "(2 OPS) function normal keyRightTurn(This)",
		"body": "keyRightTurn(${1:This})"
	},
	"op:idx(xm2=esxm2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"smpWorld(xft:va)": {
		"scope": "source.e2",
		"prefix": "smpWorld",
		"description": "(12 OPS) function ftrace smpWorld(Vp, Va)",
		"body": "smpWorld(${1:Vp}, ${2:Va})"
	},
	"op:idx(xm2=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(b=esb)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xm4=esxm4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xm4=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"seatSpawn(sn)": {
		"scope": "source.e2",
		"prefix": "seatSpawn",
		"description": "(60 OPS) function entity seatSpawn(Model, Frozen)",
		"body": "seatSpawn(${1:Model}, ${2:Frozen})"
	},
	"swapElements(m:nnnn)": {
		"scope": "source.e2",
		"prefix": "swapElements",
		"description": "(5 OPS) function matrix swapElements(Rv2, Rv3, Rv4, Rv5)",
		"body": "swapElements(${1:Rv2}, ${2:Rv3}, ${3:Rv4}, ${4:Rv5})"
	},
	"op:idx(e=ese)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"op:idx(v=esv)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"op:idx(v=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"op:idx(q=esq)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"op:idx(q=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function quaternion op:idx()",
		"body": "op:idx()"
	},
	"noentity()": {
		"scope": "source.e2",
		"prefix": "noentity",
		"description": "(5 OPS) function entity noentity()",
		"body": "noentity()"
	},
	"setBone(xwl:sb)": {
		"scope": "source.e2",
		"prefix": "setBone",
		"description": "(5 OPS) function bone setBone()",
		"body": "setBone()"
	},
	"propManipulate(e:vannn)": {
		"scope": "source.e2",
		"prefix": "propManipulate",
		"description": "(10 OPS) function void propManipulate(Pos, Rot, Freeze, Gravity, Notsolid)",
		"body": "propManipulate(${1:Pos}, ${2:Rot}, ${3:Freeze}, ${4:Gravity}, ${5:Notsolid})"
	},
	"dsGetWirelink()": {
		"scope": "source.e2",
		"prefix": "dsGetWirelink",
		"description": "(5 OPS) function wirelink dsGetWirelink()",
		"body": "dsGetWirelink()"
	},
	"op:idx(xsc=esxsc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"getWireInputs(e:)": {
		"scope": "source.e2",
		"prefix": "getWireInputs",
		"description": "(10 OPS) function array getWireInputs(This)",
		"body": "getWireInputs(${1:This})"
	},
	"op:idx(xsc=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xv2=esxv2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xv2=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xv4=esxv4)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xv4=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"holoBoneScale(nn)": {
		"scope": "source.e2",
		"prefix": "holoBoneScale",
		"description": "(15 OPS) function vector holoBoneScale(Index, Boneindex)",
		"body": "holoBoneScale(${1:Index}, ${2:Boneindex})"
	},
	"op:idx(xef=esxef)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"cameraRemoveAll()": {
		"scope": "source.e2",
		"prefix": "cameraRemoveAll",
		"description": "(1 OPS) function void cameraRemoveAll()",
		"body": "cameraRemoveAll()"
	},
	"vec2(xv4)": {
		"scope": "source.e2",
		"prefix": "vec2",
		"description": "(2 OPS) function vector2 vec2()",
		"body": "vec2()"
	},
	"dsGetScope()": {
		"scope": "source.e2",
		"prefix": "dsGetScope",
		"description": "(5 OPS) function normal dsGetScope()",
		"body": "dsGetScope()"
	},
	"op:fea(nxwlr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"lightColor(nv)": {
		"scope": "source.e2",
		"prefix": "lightColor",
		"description": "(10 OPS) function void lightColor(Index, Color)",
		"body": "lightColor(${1:Index}, ${2:Color})"
	},
	"op:idx(xwl=esxwl)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"op:idx(c=esc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"rayOEllipsoidIntersection(vvvva)": {
		"scope": "source.e2",
		"prefix": "rayOEllipsoidIntersection",
		"description": "(20 OPS) function vector rayOEllipsoidIntersection(Start, Dir, Pos, Size, Ang)",
		"body": "rayOEllipsoidIntersection(${1:Start}, ${2:Dir}, ${3:Pos}, ${4:Size}, ${5:Ang})"
	},
	"intersect(t:t)": {
		"scope": "source.e2",
		"prefix": "intersect",
		"description": "(5 OPS) function table intersect(Rv2)",
		"body": "intersect(${1:Rv2})"
	},
	"getWindupD(xsc:)": {
		"scope": "source.e2",
		"prefix": "getWindupD",
		"description": "(3 OPS) function normal getWindupD(This)",
		"body": "getWindupD(${1:This})"
	},
	"op:idx(c=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"getPowerP(xsc:)": {
		"scope": "source.e2",
		"prefix": "getPowerP",
		"description": "(3 OPS) function normal getPowerP(This)",
		"body": "getPowerP(${1:This})"
	},
	"setPowerPI(xsc:nn)": {
		"scope": "source.e2",
		"prefix": "setPowerPI",
		"description": "(8 OPS) function stcontrol setPowerPI(Np, Ni)",
		"body": "setPowerPI(${1:Np}, ${2:Ni})"
	},
	"weapons(e:)": {
		"scope": "source.e2",
		"prefix": "weapons",
		"description": "(2 OPS) function array weapons(This)",
		"body": "weapons(${1:This})"
	},
	"op:idx(xrd=esxrd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"op:idx(xrd=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"signalName()": {
		"scope": "source.e2",
		"prefix": "signalName",
		"description": "(4 OPS) function string signalName()",
		"body": "signalName()"
	},
	"op:idx(xtd=esxtd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"mod(vn)": {
		"scope": "source.e2",
		"prefix": "mod",
		"description": "(10 OPS) function vector mod(Rv1, Rv2)",
		"body": "mod(${1:Rv1}, ${2:Rv2})"
	},
	"removeQuaternion(r:n)": {
		"scope": "source.e2",
		"prefix": "removeQuaternion",
		"description": "(7 OPS) function quaternion removeQuaternion()",
		"body": "removeQuaternion()"
	},
	"unshiftMatrix(r:m)": {
		"scope": "source.e2",
		"prefix": "unshiftMatrix",
		"description": "(7 OPS) function matrix unshiftMatrix()",
		"body": "unshiftMatrix()"
	},
	"pushComplex(r:c)": {
		"scope": "source.e2",
		"prefix": "pushComplex",
		"description": "(7 OPS) function complex pushComplex()",
		"body": "pushComplex()"
	},
	"smpWorld(xft:ea)": {
		"scope": "source.e2",
		"prefix": "smpWorld",
		"description": "(12 OPS) function ftrace smpWorld(Ve, Va)",
		"body": "smpWorld(${1:Ve}, ${2:Va})"
	},
	"op:idx(m=rnm)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"boxMax(e:)": {
		"scope": "source.e2",
		"prefix": "boxMax",
		"description": "(10 OPS) function vector boxMax(This)",
		"body": "boxMax(${1:This})"
	},
	"matrix(r:n)": {
		"scope": "source.e2",
		"prefix": "matrix",
		"description": "(5 OPS) function matrix matrix()",
		"body": "matrix()"
	},
	"removeMatrix2(r:n)": {
		"scope": "source.e2",
		"prefix": "removeMatrix2",
		"description": "(7 OPS) function matrix2 removeMatrix2()",
		"body": "removeMatrix2()"
	},
	"ranger(xwl:s)": {
		"scope": "source.e2",
		"prefix": "ranger",
		"description": "(5 OPS) function ranger ranger()",
		"body": "ranger()"
	},
	"op:sub(vn)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(2 OPS) function vector op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"holoCreate(nvva)": {
		"scope": "source.e2",
		"prefix": "holoCreate",
		"description": "(30 OPS) function entity holoCreate(Index, Position, Scale, Ang)",
		"body": "holoCreate(${1:Index}, ${2:Position}, ${3:Scale}, ${4:Ang})"
	},
	"gRemoveAllRangers(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllRangers",
		"description": "(5 OPS) function void gRemoveAllRangers()",
		"body": "gRemoveAllRangers()"
	},
	"popMatrix2(r:)": {
		"scope": "source.e2",
		"prefix": "popMatrix2",
		"description": "(7 OPS) function matrix2 popMatrix2()",
		"body": "popMatrix2()"
	},
	"setColor(e:nnn)": {
		"scope": "source.e2",
		"prefix": "setColor",
		"description": "(2 OPS) function void setColor(R, G, B)",
		"body": "setColor(${1:R}, ${2:G}, ${3:B})"
	},
	"insertMatrix2(r:nxm2)": {
		"scope": "source.e2",
		"prefix": "insertMatrix2",
		"description": "(7 OPS) function matrix2 insertMatrix2()",
		"body": "insertMatrix2()"
	},
	"op:sub(qn)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(4 OPS) function quaternion op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"setMatrix2(r:nxm2)": {
		"scope": "source.e2",
		"prefix": "setMatrix2",
		"description": "(5 OPS) function matrix2 setMatrix2()",
		"body": "setMatrix2()"
	},
	"op:idx(xm2=rnxm2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"op:exp(nq)": {
		"scope": "source.e2",
		"prefix": "op:exp",
		"description": "(4 OPS) function quaternion op:exp(Lhs, Rhs)",
		"body": "op:exp(${1:Lhs}, ${2:Rhs})"
	},
	"op:idx(xm2=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix2 op:idx()",
		"body": "op:idx()"
	},
	"cameraCreate(nv)": {
		"scope": "source.e2",
		"prefix": "cameraCreate",
		"description": "(25 OPS) function void cameraCreate(Index, Position)",
		"body": "cameraCreate(${1:Index}, ${2:Position})"
	},
	"column(xm2:n)": {
		"scope": "source.e2",
		"prefix": "column",
		"description": "(5 OPS) function vector2 column(Rv2)",
		"body": "column(${1:Rv2})"
	},
	"findClearWhiteModelList()": {
		"scope": "source.e2",
		"prefix": "findClearWhiteModelList",
		"description": "(10 OPS) function void findClearWhiteModelList()",
		"body": "findClearWhiteModelList()"
	},
	"bNot(n)": {
		"scope": "source.e2",
		"prefix": "bNot",
		"description": "(2 OPS) function normal bNot(N)",
		"body": "bNot(${1:N})"
	},
	"op:idx(s=tns)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"isWeldedTo(e:n)": {
		"scope": "source.e2",
		"prefix": "isWeldedTo",
		"description": "(5 OPS) function entity isWeldedTo(Index)",
		"body": "isWeldedTo(${1:Index})"
	},
	"findPlayerBySteamID(s)": {
		"scope": "source.e2",
		"prefix": "findPlayerBySteamID",
		"description": "(30 OPS) function entity findPlayerBySteamID(Id)",
		"body": "findPlayerBySteamID(${1:Id})"
	},
	"holoAnim(nn)": {
		"scope": "source.e2",
		"prefix": "holoAnim",
		"description": "(20 OPS) function void holoAnim(Index, Animation)",
		"body": "holoAnim(${1:Index}, ${2:Animation})"
	},
	"hitSky(xrd:)": {
		"scope": "source.e2",
		"prefix": "hitSky",
		"description": "(2 OPS) function normal hitSky(This)",
		"body": "hitSky(${1:This})"
	},
	"insertBone(r:nb)": {
		"scope": "source.e2",
		"prefix": "insertBone",
		"description": "(7 OPS) function bone insertBone()",
		"body": "insertBone()"
	},
	"ioSetOutput(sn)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function normal ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"op:idx(b=rnb)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"op:div(nv)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function vector op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"op:idx(b=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function bone op:idx()",
		"body": "op:idx()"
	},
	"propDelete(t:)": {
		"scope": "source.e2",
		"prefix": "propDelete",
		"description": "(30 OPS) function normal propDelete(This)",
		"body": "propDelete(${1:This})"
	},
	"op:neg(xm2)": {
		"scope": "source.e2",
		"prefix": "op:neg",
		"description": "(5 OPS) function matrix2 op:neg(Rv1)",
		"body": "op:neg(${1:Rv1})"
	},
	"ioSetOutput(st)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function table ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"weld(ee)": {
		"scope": "source.e2",
		"prefix": "weld",
		"description": "(30 OPS) function void weld(Ent1, Ent2)",
		"body": "weld(${1:Ent1}, ${2:Ent2})"
	},
	"lastSpawnTime()": {
		"scope": "source.e2",
		"prefix": "lastSpawnTime",
		"description": "(5 OPS) function normal lastSpawnTime()",
		"body": "lastSpawnTime()"
	},
	"shiftMatrix4(r:)": {
		"scope": "source.e2",
		"prefix": "shiftMatrix4",
		"description": "(7 OPS) function matrix4 shiftMatrix4()",
		"body": "shiftMatrix4()"
	},
	"getNormal(xft:)": {
		"scope": "source.e2",
		"prefix": "getNormal",
		"description": "(8 OPS) function vector getNormal(This)",
		"body": "getNormal(${1:This})"
	},
	"unshiftMatrix4(r:xm4)": {
		"scope": "source.e2",
		"prefix": "unshiftMatrix4",
		"description": "(7 OPS) function matrix4 unshiftMatrix4()",
		"body": "unshiftMatrix4()"
	},
	"insertMatrix4(r:nxm4)": {
		"scope": "source.e2",
		"prefix": "insertMatrix4",
		"description": "(7 OPS) function matrix4 insertMatrix4()",
		"body": "insertMatrix4()"
	},
	"timer(sn)": {
		"scope": "source.e2",
		"prefix": "timer",
		"description": "(20 OPS) function void timer(Rv1, Rv2)",
		"body": "timer(${1:Rv1}, ${2:Rv2})"
	},
	"removeString(t:n)": {
		"scope": "source.e2",
		"prefix": "removeString",
		"description": "(8 OPS) function string removeString()",
		"body": "removeString()"
	},
	"number(xwl:s)": {
		"scope": "source.e2",
		"prefix": "number",
		"description": "(5 OPS) function normal number()",
		"body": "number()"
	},
	"dsSetScope(n)": {
		"scope": "source.e2",
		"prefix": "dsSetScope",
		"description": "(5 OPS) function void dsSetScope(Scope)",
		"body": "dsSetScope(${1:Scope})"
	},
	"lastSpoke()": {
		"scope": "source.e2",
		"prefix": "lastSpoke",
		"description": "(3 OPS) function entity lastSpoke()",
		"body": "lastSpoke()"
	},
	"signalClk(s)": {
		"scope": "source.e2",
		"prefix": "signalClk",
		"description": "(1 OPS) function normal signalClk(Name)",
		"body": "signalClk(${1:Name})"
	},
	"popEntity(r:)": {
		"scope": "source.e2",
		"prefix": "popEntity",
		"description": "(7 OPS) function entity popEntity()",
		"body": "popEntity()"
	},
	"ioGetInputMatrix(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputMatrix",
		"description": "(5 OPS) function matrix ioGetInputMatrix()",
		"body": "ioGetInputMatrix()"
	},
	"httpRequest(s)": {
		"scope": "source.e2",
		"prefix": "httpRequest",
		"description": "(20 OPS) function void httpRequest(Url)",
		"body": "httpRequest(${1:Url})"
	},
	"op:idx(e=rne)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"dsGetVector4()": {
		"scope": "source.e2",
		"prefix": "dsGetVector4",
		"description": "(5 OPS) function vector4 dsGetVector4()",
		"body": "dsGetVector4()"
	},
	"unshiftStcontrol(r:xsc)": {
		"scope": "source.e2",
		"prefix": "unshiftStcontrol",
		"description": "(7 OPS) function stcontrol unshiftStcontrol()",
		"body": "unshiftStcontrol()"
	},
	"removeVector(r:n)": {
		"scope": "source.e2",
		"prefix": "removeVector",
		"description": "(7 OPS) function vector removeVector()",
		"body": "removeVector()"
	},
	"runOnLast(n)": {
		"scope": "source.e2",
		"prefix": "runOnLast",
		"description": "(1 OPS) function void runOnLast(Activate)",
		"body": "runOnLast(${1:Activate})"
	},
	"ceil(xv4)": {
		"scope": "source.e2",
		"prefix": "ceil",
		"description": "(8 OPS) function vector4 ceil(Rv1)",
		"body": "ceil(${1:Rv1})"
	},
	"first()": {
		"scope": "source.e2",
		"prefix": "first",
		"description": "(1 OPS) function normal first()",
		"body": "first()"
	},
	"unshiftVector(r:v)": {
		"scope": "source.e2",
		"prefix": "unshiftVector",
		"description": "(7 OPS) function vector unshiftVector()",
		"body": "unshiftVector()"
	},
	"findToArray()": {
		"scope": "source.e2",
		"prefix": "findToArray",
		"description": "(2 OPS) function array findToArray()",
		"body": "findToArray()"
	},
	"insertVector(r:nv)": {
		"scope": "source.e2",
		"prefix": "insertVector",
		"description": "(7 OPS) function vector insertVector()",
		"body": "insertVector()"
	},
	"op:trg()": {
		"scope": "source.e2",
		"prefix": "op:trg",
		"description": "(1 OPS) function normal op:trg()",
		"body": "op:trg()"
	},
	"keyUse(e:)": {
		"scope": "source.e2",
		"prefix": "keyUse",
		"description": "(2 OPS) function normal keyUse(This)",
		"body": "keyUse(${1:This})"
	},
	"vector(r:n)": {
		"scope": "source.e2",
		"prefix": "vector",
		"description": "(5 OPS) function vector vector()",
		"body": "vector()"
	},
	"holoScaleUnits(n)": {
		"scope": "source.e2",
		"prefix": "holoScaleUnits",
		"description": "(15 OPS) function vector holoScaleUnits(Index)",
		"body": "holoScaleUnits(${1:Index})"
	},
	"op:idx(v=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"getPosLocal(xft:va)": {
		"scope": "source.e2",
		"prefix": "getPosLocal",
		"description": "(7 OPS) function vector getPosLocal(Vp, Va)",
		"body": "getPosLocal(${1:Vp}, ${2:Va})"
	},
	"unshiftTracedata(r:xtd)": {
		"scope": "source.e2",
		"prefix": "unshiftTracedata",
		"description": "(7 OPS) function tracedata unshiftTracedata()",
		"body": "unshiftTracedata()"
	},
	"op:fea(nar)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"removeAngle(r:n)": {
		"scope": "source.e2",
		"prefix": "removeAngle",
		"description": "(7 OPS) function angle removeAngle()",
		"body": "removeAngle()"
	},
	"holoAnim(ns)": {
		"scope": "source.e2",
		"prefix": "holoAnim",
		"description": "(20 OPS) function void holoAnim(Index, Animation)",
		"body": "holoAnim(${1:Index}, ${2:Animation})"
	},
	"removeVector4(r:n)": {
		"scope": "source.e2",
		"prefix": "removeVector4",
		"description": "(7 OPS) function vector4 removeVector4()",
		"body": "removeVector4()"
	},
	"shiftAngle(r:)": {
		"scope": "source.e2",
		"prefix": "shiftAngle",
		"description": "(7 OPS) function angle shiftAngle()",
		"body": "shiftAngle()"
	},
	"noCollide(ee)": {
		"scope": "source.e2",
		"prefix": "noCollide",
		"description": "(30 OPS) function void noCollide(Ent1, Ent2)",
		"body": "noCollide(${1:Ent1}, ${2:Ent2})"
	},
	"unshiftAngle(r:a)": {
		"scope": "source.e2",
		"prefix": "unshiftAngle",
		"description": "(7 OPS) function angle unshiftAngle()",
		"body": "unshiftAngle()"
	},
	"findExcludePlayer(e)": {
		"scope": "source.e2",
		"prefix": "findExcludePlayer",
		"description": "(10 OPS) function void findExcludePlayer(Ent)",
		"body": "findExcludePlayer(${1:Ent})"
	},
	"pushAngle(r:a)": {
		"scope": "source.e2",
		"prefix": "pushAngle",
		"description": "(7 OPS) function angle pushAngle()",
		"body": "pushAngle()"
	},
	"setDiagonal(m:nnn)": {
		"scope": "source.e2",
		"prefix": "setDiagonal",
		"description": "(5 OPS) function matrix setDiagonal(Rv2, Rv3, Rv4)",
		"body": "setDiagonal(${1:Rv2}, ${2:Rv3}, ${3:Rv4})"
	},
	"setAngle(r:na)": {
		"scope": "source.e2",
		"prefix": "setAngle",
		"description": "(5 OPS) function angle setAngle()",
		"body": "setAngle()"
	},
	"op:idx(a=rna)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"angle(r:n)": {
		"scope": "source.e2",
		"prefix": "angle",
		"description": "(5 OPS) function angle angle()",
		"body": "angle()"
	},
	"insertVector4(r:nxv4)": {
		"scope": "source.e2",
		"prefix": "insertVector4",
		"description": "(7 OPS) function vector4 insertVector4()",
		"body": "insertVector4()"
	},
	"op:idx(a=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"removeNumber(r:n)": {
		"scope": "source.e2",
		"prefix": "removeNumber",
		"description": "(7 OPS) function normal removeNumber()",
		"body": "removeNumber()"
	},
	"unshiftNumber(r:n)": {
		"scope": "source.e2",
		"prefix": "unshiftNumber",
		"description": "(7 OPS) function normal unshiftNumber()",
		"body": "unshiftNumber()"
	},
	"x(v:)": {
		"scope": "source.e2",
		"prefix": "x",
		"description": "(1 OPS) function normal x(This)",
		"body": "x(${1:This})"
	},
	"insertNumber(r:nn)": {
		"scope": "source.e2",
		"prefix": "insertNumber",
		"description": "(7 OPS) function normal insertNumber()",
		"body": "insertNumber()"
	},
	"count(xtd:)": {
		"scope": "source.e2",
		"prefix": "count",
		"description": "(20 OPS) function normal count(This)",
		"body": "count(${1:This})"
	},
	"setNumber(r:nn)": {
		"scope": "source.e2",
		"prefix": "setNumber",
		"description": "(5 OPS) function normal setNumber()",
		"body": "setNumber()"
	},
	"op:idx(n=rnn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"toDeg(n)": {
		"scope": "source.e2",
		"prefix": "toDeg",
		"description": "(2 OPS) function normal toDeg()",
		"body": "toDeg()"
	},
	"getStop(xft:)": {
		"scope": "source.e2",
		"prefix": "getStop",
		"description": "(3 OPS) function vector getStop(This)",
		"body": "getStop(${1:This})"
	},
	"slider(evevn)": {
		"scope": "source.e2",
		"prefix": "slider",
		"description": "(30 OPS) function void slider(Ent1, V1, Ent2, V2, Width)",
		"body": "slider(${1:Ent1}, ${2:V1}, ${3:Ent2}, ${4:V2}, ${5:Width})"
	},
	"op:fea(nqr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"boneCount(e:)": {
		"scope": "source.e2",
		"prefix": "boneCount",
		"description": "(3 OPS) function normal boneCount(This)",
		"body": "boneCount(${1:This})"
	},
	"shiftMatrix(r:)": {
		"scope": "source.e2",
		"prefix": "shiftMatrix",
		"description": "(7 OPS) function matrix shiftMatrix()",
		"body": "shiftMatrix()"
	},
	"op:eq(ss)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(3 OPS) function normal op:eq()",
		"body": "op:eq()"
	},
	"shiftQuaternion(r:)": {
		"scope": "source.e2",
		"prefix": "shiftQuaternion",
		"description": "(7 OPS) function quaternion shiftQuaternion()",
		"body": "shiftQuaternion()"
	},
	"popQuaternion(r:)": {
		"scope": "source.e2",
		"prefix": "popQuaternion",
		"description": "(7 OPS) function quaternion popQuaternion()",
		"body": "popQuaternion()"
	},
	"diagonal(m)": {
		"scope": "source.e2",
		"prefix": "diagonal",
		"description": "(5 OPS) function vector diagonal(Rv1)",
		"body": "diagonal(${1:Rv1})"
	},
	"getCopy(xft:ev)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Ee, Vp)",
		"body": "getCopy(${1:Ee}, ${2:Vp})"
	},
	"exists(t:n)": {
		"scope": "source.e2",
		"prefix": "exists",
		"description": "(1 OPS) function normal exists(Index)",
		"body": "exists(${1:Index})"
	},
	"setRenderMode(e:n)": {
		"scope": "source.e2",
		"prefix": "setRenderMode",
		"description": "(2 OPS) function void setRenderMode(Mode)",
		"body": "setRenderMode(${1:Mode})"
	},
	"dsLeaveGroup(s)": {
		"scope": "source.e2",
		"prefix": "dsLeaveGroup",
		"description": "(10 OPS) function void dsLeaveGroup(Groupname)",
		"body": "dsLeaveGroup(${1:Groupname})"
	},
	"insertQuaternion(r:nq)": {
		"scope": "source.e2",
		"prefix": "insertQuaternion",
		"description": "(7 OPS) function quaternion insertQuaternion()",
		"body": "insertQuaternion()"
	},
	"op:idx(m=ts)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"hitGroup(xrd:)": {
		"scope": "source.e2",
		"prefix": "hitGroup",
		"description": "(2 OPS) function string hitGroup(This)",
		"body": "hitGroup(${1:This})"
	},
	"op:ass(xtd)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(20 OPS) function tracedata op:ass(Lhs, Rhs)",
		"body": "op:ass(${1:Lhs}, ${2:Rhs})"
	},
	"dsSend(ssnt)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"shiftFtrace(r:)": {
		"scope": "source.e2",
		"prefix": "shiftFtrace",
		"description": "(7 OPS) function ftrace shiftFtrace()",
		"body": "shiftFtrace()"
	},
	"getStart(xft:)": {
		"scope": "source.e2",
		"prefix": "getStart",
		"description": "(3 OPS) function vector getStart(This)",
		"body": "getStart(${1:This})"
	},
	"dsSend(ssnn)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"pushFtrace(r:xft)": {
		"scope": "source.e2",
		"prefix": "pushFtrace",
		"description": "(7 OPS) function ftrace pushFtrace()",
		"body": "pushFtrace()"
	},
	"ftrace(r:n)": {
		"scope": "source.e2",
		"prefix": "ftrace",
		"description": "(5 OPS) function ftrace ftrace()",
		"body": "ftrace()"
	},
	"op:idx(xft=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"writeUnicodeString(xwl:snnnn)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y, Textcolor, Bgcolor)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor})"
	},
	"maxVec(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "maxVec",
		"description": "(13 OPS) function vector4 maxVec()",
		"body": "maxVec()"
	},
	"op:if(n)": {
		"scope": "source.e2",
		"prefix": "op:if",
		"description": "(3 OPS) function void op:if()",
		"body": "op:if()"
	},
	"size(xtd:)": {
		"scope": "source.e2",
		"prefix": "size",
		"description": "(20 OPS) function vector size(This)",
		"body": "size(${1:This})"
	},
	"getCollideGroup(xft:)": {
		"scope": "source.e2",
		"prefix": "getCollideGroup",
		"description": "(3 OPS) function normal getCollideGroup(This)",
		"body": "getCollideGroup(${1:This})"
	},
	"pushStcontrol(r:xsc)": {
		"scope": "source.e2",
		"prefix": "pushStcontrol",
		"description": "(7 OPS) function stcontrol pushStcontrol()",
		"body": "pushStcontrol()"
	},
	"setStcontrol(r:nxsc)": {
		"scope": "source.e2",
		"prefix": "setStcontrol",
		"description": "(5 OPS) function stcontrol setStcontrol()",
		"body": "setStcontrol()"
	},
	"op:add(vv)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(2 OPS) function vector op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"op:idx(s=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"getPowerPD(xsc:)": {
		"scope": "source.e2",
		"prefix": "getPowerPD",
		"description": "(3 OPS) function vector2 getPowerPD(This)",
		"body": "getPowerPD(${1:This})"
	},
	"table(...)": {
		"scope": "source.e2",
		"prefix": "table",
		"description": "(1 OPS) function table table()",
		"body": "table()"
	},
	"removeVector2(r:n)": {
		"scope": "source.e2",
		"prefix": "removeVector2",
		"description": "(7 OPS) function vector2 removeVector2()",
		"body": "removeVector2()"
	},
	"propGravity()": {
		"scope": "source.e2",
		"prefix": "propGravity",
		"description": "(1 OPS) function vector propGravity()",
		"body": "propGravity()"
	},
	"shiftVector2(r:)": {
		"scope": "source.e2",
		"prefix": "shiftVector2",
		"description": "(7 OPS) function vector2 shiftVector2()",
		"body": "shiftVector2()"
	},
	"popVector2(r:)": {
		"scope": "source.e2",
		"prefix": "popVector2",
		"description": "(7 OPS) function vector2 popVector2()",
		"body": "popVector2()"
	},
	"insertVector2(r:nxv2)": {
		"scope": "source.e2",
		"prefix": "insertVector2",
		"description": "(7 OPS) function vector2 insertVector2()",
		"body": "insertVector2()"
	},
	"rayPolygonIntersection(vvvvv)": {
		"scope": "source.e2",
		"prefix": "rayPolygonIntersection",
		"description": "(20 OPS) function vector rayPolygonIntersection(Start, Dir, Vertex1, Vertex2, Vertex3)",
		"body": "rayPolygonIntersection(${1:Start}, ${2:Dir}, ${3:Vertex1}, ${4:Vertex2}, ${5:Vertex3})"
	},
	"ping(e:)": {
		"scope": "source.e2",
		"prefix": "ping",
		"description": "(5 OPS) function normal ping(This)",
		"body": "ping(${1:This})"
	},
	"propSpawn(evan)": {
		"scope": "source.e2",
		"prefix": "propSpawn",
		"description": "(40 OPS) function entity propSpawn(Template, Pos, Rot, Frozen)",
		"body": "propSpawn(${1:Template}, ${2:Pos}, ${3:Rot}, ${4:Frozen})"
	},
	"op:idx(xv2=rnxv2)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"atanr(n)": {
		"scope": "source.e2",
		"prefix": "atanr",
		"description": "(2 OPS) function normal atanr()",
		"body": "atanr()"
	},
	"op:idx(xv2=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector2 op:idx()",
		"body": "op:idx()"
	},
	"imag(c)": {
		"scope": "source.e2",
		"prefix": "imag",
		"description": "(2 OPS) function normal imag(Z)",
		"body": "imag(${1:Z})"
	},
	"op:add(nv)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(2 OPS) function vector op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"op:ass(t)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(5 OPS) function table op:ass()",
		"body": "op:ass()"
	},
	"setVector4(r:nxv4)": {
		"scope": "source.e2",
		"prefix": "setVector4",
		"description": "(5 OPS) function vector4 setVector4()",
		"body": "setVector4()"
	},
	"op:idx(xv4=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector4 op:idx()",
		"body": "op:idx()"
	},
	"op:fea(nsr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:eq(qq)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(6 OPS) function normal op:eq(Lhs, Rhs)",
		"body": "op:eq(${1:Lhs}, ${2:Rhs})"
	},
	"shiftString(r:)": {
		"scope": "source.e2",
		"prefix": "shiftString",
		"description": "(7 OPS) function string shiftString()",
		"body": "shiftString()"
	},
	"unshiftString(r:s)": {
		"scope": "source.e2",
		"prefix": "unshiftString",
		"description": "(7 OPS) function string unshiftString()",
		"body": "unshiftString()"
	},
	"deaths(e:)": {
		"scope": "source.e2",
		"prefix": "deaths",
		"description": "(5 OPS) function normal deaths(This)",
		"body": "deaths(${1:This})"
	},
	"setString(r:ns)": {
		"scope": "source.e2",
		"prefix": "setString",
		"description": "(5 OPS) function string setString()",
		"body": "setString()"
	},
	"lightDistance(n)": {
		"scope": "source.e2",
		"prefix": "lightDistance",
		"description": "(2 OPS) function normal lightDistance(Index)",
		"body": "lightDistance(${1:Index})"
	},
	"string(r:n)": {
		"scope": "source.e2",
		"prefix": "string",
		"description": "(5 OPS) function string string()",
		"body": "string()"
	},
	"length(xv4:)": {
		"scope": "source.e2",
		"prefix": "length",
		"description": "(7 OPS) function normal length()",
		"body": "length()"
	},
	"right(s:n)": {
		"scope": "source.e2",
		"prefix": "right",
		"description": "(20 OPS) function string right()",
		"body": "right()"
	},
	"cameraRemainingSpawns()": {
		"scope": "source.e2",
		"prefix": "cameraRemainingSpawns",
		"description": "(2 OPS) function normal cameraRemainingSpawns()",
		"body": "cameraRemainingSpawns()"
	},
	"mRotation(vn)": {
		"scope": "source.e2",
		"prefix": "mRotation",
		"description": "(5 OPS) function matrix mRotation(Rv1, Rv2)",
		"body": "mRotation(${1:Rv1}, ${2:Rv2})"
	},
	"findClipFromClass(s)": {
		"scope": "source.e2",
		"prefix": "findClipFromClass",
		"description": "(5 OPS) function normal findClipFromClass(Class)",
		"body": "findClipFromClass(${1:Class})"
	},
	"insertString(r:ns)": {
		"scope": "source.e2",
		"prefix": "insertString",
		"description": "(7 OPS) function string insertString()",
		"body": "insertString()"
	},
	"pushEffect(r:xef)": {
		"scope": "source.e2",
		"prefix": "pushEffect",
		"description": "(7 OPS) function effect pushEffect()",
		"body": "pushEffect()"
	},
	"setEffect(r:nxef)": {
		"scope": "source.e2",
		"prefix": "setEffect",
		"description": "(5 OPS) function effect setEffect()",
		"body": "setEffect()"
	},
	"tuneOverCHRSP(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "tuneOverCHRSP",
		"description": "(7 OPS) function stcontrol tuneOverCHRSP(Nk, Nt, Nl)",
		"body": "tuneOverCHRSP(${1:Nk}, ${2:Nt}, ${3:Nl})"
	},
	"effect(r:n)": {
		"scope": "source.e2",
		"prefix": "effect",
		"description": "(5 OPS) function effect effect()",
		"body": "effect()"
	},
	"atan(n)": {
		"scope": "source.e2",
		"prefix": "atan",
		"description": "(2 OPS) function normal atan()",
		"body": "atan()"
	},
	"removeWirelink(r:n)": {
		"scope": "source.e2",
		"prefix": "removeWirelink",
		"description": "(7 OPS) function wirelink removeWirelink()",
		"body": "removeWirelink()"
	},
	"speedLimit()": {
		"scope": "source.e2",
		"prefix": "speedLimit",
		"description": "(1 OPS) function normal speedLimit()",
		"body": "speedLimit()"
	},
	"unshiftWirelink(r:xwl)": {
		"scope": "source.e2",
		"prefix": "unshiftWirelink",
		"description": "(7 OPS) function wirelink unshiftWirelink()",
		"body": "unshiftWirelink()"
	},
	"pushWirelink(r:xwl)": {
		"scope": "source.e2",
		"prefix": "pushWirelink",
		"description": "(7 OPS) function wirelink pushWirelink()",
		"body": "pushWirelink()"
	},
	"setWirelink(r:nxwl)": {
		"scope": "source.e2",
		"prefix": "setWirelink",
		"description": "(5 OPS) function wirelink setWirelink()",
		"body": "setWirelink()"
	},
	"op:ass(xft)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(20 OPS) function ftrace op:ass()",
		"body": "op:ass()"
	},
	"startSolid(xrd:)": {
		"scope": "source.e2",
		"prefix": "startSolid",
		"description": "(2 OPS) function normal startSolid(This)",
		"body": "startSolid(${1:This})"
	},
	"tsShapeAng(na)": {
		"scope": "source.e2",
		"prefix": "tsShapeAng",
		"description": "(20 OPS) function string tsShapeAng(Index, Ang)",
		"body": "tsShapeAng(${1:Index}, ${2:Ang})"
	},
	"op:idx(xwl=rnxwl)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"wirelink(r:n)": {
		"scope": "source.e2",
		"prefix": "wirelink",
		"description": "(5 OPS) function wirelink wirelink()",
		"body": "wirelink()"
	},
	"op:mul(qq)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(9 OPS) function quaternion op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"op:idx(m=tsm)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix op:idx()",
		"body": "op:idx()"
	},
	"min(nnnn)": {
		"scope": "source.e2",
		"prefix": "min",
		"description": "(1 OPS) function normal min()",
		"body": "min()"
	},
	"lastSaidTeam(e:)": {
		"scope": "source.e2",
		"prefix": "lastSaidTeam",
		"description": "(3 OPS) function normal lastSaidTeam(This)",
		"body": "lastSaidTeam(${1:This})"
	},
	"egpGlobalVertices(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpGlobalVertices",
		"description": "(20 OPS) function array egpGlobalVertices(Index)",
		"body": "egpGlobalVertices(${1:Index})"
	},
	"forward(b:)": {
		"scope": "source.e2",
		"prefix": "forward",
		"description": "(1 OPS) function vector forward(This)",
		"body": "forward(${1:This})"
	},
	"insertMatrix(r:nm)": {
		"scope": "source.e2",
		"prefix": "insertMatrix",
		"description": "(7 OPS) function matrix insertMatrix()",
		"body": "insertMatrix()"
	},
	"minVec(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "minVec",
		"description": "(4 OPS) function vector2 minVec()",
		"body": "minVec()"
	},
	"getTimeBench(xsc:)": {
		"scope": "source.e2",
		"prefix": "getTimeBench",
		"description": "(3 OPS) function normal getTimeBench(This)",
		"body": "getTimeBench(${1:This})"
	},
	"dsGetVector()": {
		"scope": "source.e2",
		"prefix": "dsGetVector",
		"description": "(5 OPS) function vector dsGetVector()",
		"body": "dsGetVector()"
	},
	"op:idx(c=rnc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"op:fea(nxrdr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"shiftRanger(r:)": {
		"scope": "source.e2",
		"prefix": "shiftRanger",
		"description": "(7 OPS) function ranger shiftRanger()",
		"body": "shiftRanger()"
	},
	"unshiftRanger(r:xrd)": {
		"scope": "source.e2",
		"prefix": "unshiftRanger",
		"description": "(7 OPS) function ranger unshiftRanger()",
		"body": "unshiftRanger()"
	},
	"popRanger(r:)": {
		"scope": "source.e2",
		"prefix": "popRanger",
		"description": "(7 OPS) function ranger popRanger()",
		"body": "popRanger()"
	},
	"sec(c)": {
		"scope": "source.e2",
		"prefix": "sec",
		"description": "(3 OPS) function complex sec(Z)",
		"body": "sec(${1:Z})"
	},
	"pushRanger(r:xrd)": {
		"scope": "source.e2",
		"prefix": "pushRanger",
		"description": "(7 OPS) function ranger pushRanger()",
		"body": "pushRanger()"
	},
	"egpSaveFrame(xwl:s)": {
		"scope": "source.e2",
		"prefix": "egpSaveFrame",
		"description": "(15 OPS) function void egpSaveFrame(Index)",
		"body": "egpSaveFrame(${1:Index})"
	},
	"getCopy(xft:en)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Ee, Nl)",
		"body": "getCopy(${1:Ee}, ${2:Nl})"
	},
	"op:idx(xrd=rnxrd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"op:fea(sct)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"egpParent(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpParent",
		"description": "(10 OPS) function void egpParent(Index, Parentindex)",
		"body": "egpParent(${1:Index}, ${2:Parentindex})"
	},
	"op:idx(xrd=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"op:fea(nxtdr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"matrix4(m)": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(5 OPS) function matrix4 matrix4(Rv1)",
		"body": "matrix4(${1:Rv1})"
	},
	"toRad(v)": {
		"scope": "source.e2",
		"prefix": "toRad",
		"description": "(3 OPS) function vector toRad(Rv1)",
		"body": "toRad(${1:Rv1})"
	},
	"op:add(cc)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(2 OPS) function complex op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"shiftTracedata(r:)": {
		"scope": "source.e2",
		"prefix": "shiftTracedata",
		"description": "(7 OPS) function tracedata shiftTracedata()",
		"body": "shiftTracedata()"
	},
	"popTracedata(r:)": {
		"scope": "source.e2",
		"prefix": "popTracedata",
		"description": "(7 OPS) function tracedata popTracedata()",
		"body": "popTracedata()"
	},
	"propCanCreate()": {
		"scope": "source.e2",
		"prefix": "propCanCreate",
		"description": "(1 OPS) function normal propCanCreate()",
		"body": "propCanCreate()"
	},
	"op:fea(sbt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"min(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "min",
		"description": "(4 OPS) function vector2 min()",
		"body": "min()"
	},
	"tuneProcCC(xsc:nnn)": {
		"scope": "source.e2",
		"prefix": "tuneProcCC",
		"description": "(7 OPS) function stcontrol tuneProcCC(Nk, Nt, Nl)",
		"body": "tuneProcCC(${1:Nk}, ${2:Nt}, ${3:Nl})"
	},
	"toTable(xgt:)": {
		"scope": "source.e2",
		"prefix": "toTable",
		"description": "(5 OPS) function table toTable(This)",
		"body": "toTable(${1:This})"
	},
	"op:div(qn)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(9 OPS) function quaternion op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"select(nm...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function matrix select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"select(nxm2...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function matrix2 select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"select(nb...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function bone select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"randvec2(nn)": {
		"scope": "source.e2",
		"prefix": "randvec2",
		"description": "(5 OPS) function vector2 randvec2(Min, Max)",
		"body": "randvec2(${1:Min}, ${2:Max})"
	},
	"smpLocal(xft:v)": {
		"scope": "source.e2",
		"prefix": "smpLocal",
		"description": "(12 OPS) function ftrace smpLocal(Vp)",
		"body": "smpLocal(${1:Vp})"
	},
	"op:fea(smt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"dsSend(sss)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"select(nv...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function vector select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"setMagnitude(xef:n)": {
		"scope": "source.e2",
		"prefix": "setMagnitude",
		"description": "(1 OPS) function effect setMagnitude(Mag)",
		"body": "setMagnitude(${1:Mag})"
	},
	"rayOBBoxIntersection(vvvva)": {
		"scope": "source.e2",
		"prefix": "rayOBBoxIntersection",
		"description": "(20 OPS) function vector rayOBBoxIntersection(Start, Dir, Pos, Size, Ang)",
		"body": "rayOBBoxIntersection(${1:Start}, ${2:Dir}, ${3:Pos}, ${4:Size}, ${5:Ang})"
	},
	"select(na...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function angle select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"select(nn...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function normal select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"select(nq...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function quaternion select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"addHitSkip(xft:ss)": {
		"scope": "source.e2",
		"prefix": "addHitSkip",
		"description": "(3 OPS) function ftrace addHitSkip(Sm, Vs)",
		"body": "addHitSkip(${1:Sm}, ${2:Vs})"
	},
	"select(nr...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function array select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"select(nxft...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function ftrace select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"cpuUsage()": {
		"scope": "source.e2",
		"prefix": "cpuUsage",
		"description": "(1 OPS) function normal cpuUsage()",
		"body": "cpuUsage()"
	},
	"egpMaterialFromScreen(xwl:ne)": {
		"scope": "source.e2",
		"prefix": "egpMaterialFromScreen",
		"description": "(10 OPS) function void egpMaterialFromScreen(Index, Gpu)",
		"body": "egpMaterialFromScreen(${1:Index}, ${2:Gpu})"
	},
	"select(nxsc...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function stcontrol select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"select(nxv2...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function vector2 select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"inGodMode(e:)": {
		"scope": "source.e2",
		"prefix": "inGodMode",
		"description": "(5 OPS) function normal inGodMode(This)",
		"body": "inGodMode(${1:This})"
	},
	"findClipFromModel(s)": {
		"scope": "source.e2",
		"prefix": "findClipFromModel",
		"description": "(5 OPS) function normal findClipFromModel(Model)",
		"body": "findClipFromModel(${1:Model})"
	},
	"setGain(xsc:r)": {
		"scope": "source.e2",
		"prefix": "setGain",
		"description": "(7 OPS) function stcontrol setGain(Aa)",
		"body": "setGain(${1:Aa})"
	},
	"select(nxv4...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function vector4 select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"getColor(e:)": {
		"scope": "source.e2",
		"prefix": "getColor",
		"description": "(2 OPS) function vector getColor(This)",
		"body": "getColor(${1:This})"
	},
	"steamFriends(e:)": {
		"scope": "source.e2",
		"prefix": "steamFriends",
		"description": "(15 OPS) function array steamFriends(This)",
		"body": "steamFriends(${1:This})"
	},
	"select(nt...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function table select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"hasConstraints(e:)": {
		"scope": "source.e2",
		"prefix": "hasConstraints",
		"description": "(5 OPS) function normal hasConstraints(This)",
		"body": "hasConstraints(${1:This})"
	},
	"select(ns...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function string select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"select(nxef...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function effect select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"select(nxwl...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function wirelink select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"isInverted(xsc:)": {
		"scope": "source.e2",
		"prefix": "isInverted",
		"description": "(3 OPS) function normal isInverted(This)",
		"body": "isInverted(${1:This})"
	},
	"op:idx(e=tne)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function entity op:idx()",
		"body": "op:idx()"
	},
	"holoCreate(nvvavs)": {
		"scope": "source.e2",
		"prefix": "holoCreate",
		"description": "(30 OPS) function entity holoCreate(Index, Position, Scale, Ang, Color, Model)",
		"body": "holoCreate(${1:Index}, ${2:Position}, ${3:Scale}, ${4:Ang}, ${5:Color}, ${6:Model})"
	},
	"select(nxrd...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function ranger select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"getPosWorld(xft:va)": {
		"scope": "source.e2",
		"prefix": "getPosWorld",
		"description": "(7 OPS) function vector getPosWorld(Vp, Va)",
		"body": "getPosWorld(${1:Vp}, ${2:Va})"
	},
	"op:add(vn)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(2 OPS) function vector op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"soundPitch(nn)": {
		"scope": "source.e2",
		"prefix": "soundPitch",
		"description": "(5 OPS) function void soundPitch(Index, Pitch)",
		"body": "soundPitch(${1:Index}, ${2:Pitch})"
	},
	"isHiSpeed(xwl:)": {
		"scope": "source.e2",
		"prefix": "isHiSpeed",
		"description": "(2 OPS) function normal isHiSpeed(This)",
		"body": "isHiSpeed(${1:This})"
	},
	"holoPos(nv)": {
		"scope": "source.e2",
		"prefix": "holoPos",
		"description": "(15 OPS) function void holoPos(Index, Position)",
		"body": "holoPos(${1:Index}, ${2:Position})"
	},
	"createWire(e:ess)": {
		"scope": "source.e2",
		"prefix": "createWire",
		"description": "(30 OPS) function normal createWire(Ent2, Inputname, Outputname)",
		"body": "createWire(${1:Ent2}, ${2:Inputname}, ${3:Outputname})"
	},
	"owner(xtd:n)": {
		"scope": "source.e2",
		"prefix": "owner",
		"description": "(20 OPS) function entity owner(Index)",
		"body": "owner(${1:Index})"
	},
	"propNotSolid(e:n)": {
		"scope": "source.e2",
		"prefix": "propNotSolid",
		"description": "(10 OPS) function void propNotSolid(Notsolid)",
		"body": "propNotSolid(${1:Notsolid})"
	},
	"op:ass(c)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(2 OPS) function complex op:ass()",
		"body": "op:ass()"
	},
	"cpuUsage(e:)": {
		"scope": "source.e2",
		"prefix": "cpuUsage",
		"description": "(1 OPS) function normal cpuUsage(This)",
		"body": "cpuUsage(${1:This})"
	},
	"entity(xtd:n)": {
		"scope": "source.e2",
		"prefix": "entity",
		"description": "(20 OPS) function entity entity(Index)",
		"body": "entity(${1:Index})"
	},
	"parent(xtd:)": {
		"scope": "source.e2",
		"prefix": "parent",
		"description": "(20 OPS) function entity parent(This)",
		"body": "parent(${1:This})"
	},
	"op:fea(nxscr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"vonDecodeTable(s)": {
		"scope": "source.e2",
		"prefix": "vonDecodeTable",
		"description": "(25 OPS) function table vonDecodeTable(Data)",
		"body": "vonDecodeTable(${1:Data})"
	},
	"printColorDriver(e:r)": {
		"scope": "source.e2",
		"prefix": "printColorDriver",
		"description": "(100 OPS) function void printColorDriver(Arr)",
		"body": "printColorDriver(${1:Arr})"
	},
	"op:mul(nxv4)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(4 OPS) function vector4 op:mul()",
		"body": "op:mul()"
	},
	"hitNormal(xtd:n)": {
		"scope": "source.e2",
		"prefix": "hitNormal",
		"description": "(20 OPS) function vector hitNormal(Index)",
		"body": "hitNormal(${1:Index})"
	},
	"op:add(nn)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(1 OPS) function normal op:add()",
		"body": "op:add()"
	},
	"holoAnim(nnnn)": {
		"scope": "source.e2",
		"prefix": "holoAnim",
		"description": "(20 OPS) function void holoAnim(Index, Animation, Frame, Rate)",
		"body": "holoAnim(${1:Index}, ${2:Animation}, ${3:Frame}, ${4:Rate})"
	},
	"findClearWhiteList()": {
		"scope": "source.e2",
		"prefix": "findClearWhiteList",
		"description": "(10 OPS) function void findClearWhiteList()",
		"body": "findClearWhiteList()"
	},
	"setX(xv4:n)": {
		"scope": "source.e2",
		"prefix": "setX",
		"description": "(3 OPS) function vector4 setX()",
		"body": "setX()"
	},
	"pos(xtd:n)": {
		"scope": "source.e2",
		"prefix": "pos",
		"description": "(20 OPS) function vector pos(Index)",
		"body": "pos(${1:Index})"
	},
	"hitPos(xtd:n)": {
		"scope": "source.e2",
		"prefix": "hitPos",
		"description": "(20 OPS) function vector hitPos(Index)",
		"body": "hitPos(${1:Index})"
	},
	"smpWorld(xft:ev)": {
		"scope": "source.e2",
		"prefix": "smpWorld",
		"description": "(12 OPS) function ftrace smpWorld(Ve, Vp)",
		"body": "smpWorld(${1:Ve}, ${2:Vp})"
	},
	"hitPos(xtd:)": {
		"scope": "source.e2",
		"prefix": "hitPos",
		"description": "(20 OPS) function vector hitPos(This)",
		"body": "hitPos(${1:This})"
	},
	"model(xtd:n)": {
		"scope": "source.e2",
		"prefix": "model",
		"description": "(20 OPS) function string model(Index)",
		"body": "model(${1:Index})"
	},
	"model(xtd:)": {
		"scope": "source.e2",
		"prefix": "model",
		"description": "(20 OPS) function string model(This)",
		"body": "model(${1:This})"
	},
	"radius(xtd:n)": {
		"scope": "source.e2",
		"prefix": "radius",
		"description": "(20 OPS) function normal radius(Index)",
		"body": "radius(${1:Index})"
	},
	"op:ass(xsc)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(20 OPS) function stcontrol op:ass()",
		"body": "op:ass()"
	},
	"quat()": {
		"scope": "source.e2",
		"prefix": "quat",
		"description": "(1 OPS) function quaternion quat()",
		"body": "quat()"
	},
	"printColorDriver(e:...)": {
		"scope": "source.e2",
		"prefix": "printColorDriver",
		"description": "(100 OPS) function void printColorDriver(This)",
		"body": "printColorDriver(${1:This})"
	},
	"opcounter()": {
		"scope": "source.e2",
		"prefix": "opcounter",
		"description": "(1 OPS) function normal opcounter()",
		"body": "opcounter()"
	},
	"aimEntity(e:)": {
		"scope": "source.e2",
		"prefix": "aimEntity",
		"description": "(10 OPS) function entity aimEntity(This)",
		"body": "aimEntity(${1:This})"
	},
	"sin(n)": {
		"scope": "source.e2",
		"prefix": "sin",
		"description": "(2 OPS) function normal sin()",
		"body": "sin()"
	},
	"egpQueueScreenWirelink()": {
		"scope": "source.e2",
		"prefix": "egpQueueScreenWirelink",
		"description": "(10 OPS) function wirelink egpQueueScreenWirelink()",
		"body": "egpQueueScreenWirelink()"
	},
	"ballsocket(eve)": {
		"scope": "source.e2",
		"prefix": "ballsocket",
		"description": "(30 OPS) function void ballsocket(Ent1, V, Ent2)",
		"body": "ballsocket(${1:Ent1}, ${2:V}, ${3:Ent2})"
	},
	"massCenterL(b:)": {
		"scope": "source.e2",
		"prefix": "massCenterL",
		"description": "(1 OPS) function vector massCenterL(This)",
		"body": "massCenterL(${1:This})"
	},
	"httpData()": {
		"scope": "source.e2",
		"prefix": "httpData",
		"description": "(5 OPS) function string httpData()",
		"body": "httpData()"
	},
	"addHitSkip(xft:sn)": {
		"scope": "source.e2",
		"prefix": "addHitSkip",
		"description": "(3 OPS) function ftrace addHitSkip(Sm, Vn)",
		"body": "addHitSkip(${1:Sm}, ${2:Vn})"
	},
	"op:leq(aa)": {
		"scope": "source.e2",
		"prefix": "op:leq",
		"description": "(3 OPS) function normal op:leq(Rv1, Rv2)",
		"body": "op:leq(${1:Rv1}, ${2:Rv2})"
	},
	"removeVector(t:s)": {
		"scope": "source.e2",
		"prefix": "removeVector",
		"description": "(8 OPS) function vector removeVector()",
		"body": "removeVector()"
	},
	"removeWirelink(t:s)": {
		"scope": "source.e2",
		"prefix": "removeWirelink",
		"description": "(8 OPS) function wirelink removeWirelink()",
		"body": "removeWirelink()"
	},
	"setGainI(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setGainI",
		"description": "(7 OPS) function stcontrol setGainI(Ni)",
		"body": "setGainI(${1:Ni})"
	},
	"hitAngle(xtd:n)": {
		"scope": "source.e2",
		"prefix": "hitAngle",
		"description": "(20 OPS) function normal hitAngle(Index)",
		"body": "hitAngle(${1:Index})"
	},
	"hit(xtd:)": {
		"scope": "source.e2",
		"prefix": "hit",
		"description": "(20 OPS) function normal hit(This)",
		"body": "hit(${1:This})"
	},
	"tsConeSphereIntersection(vvn)": {
		"scope": "source.e2",
		"prefix": "tsConeSphereIntersection",
		"description": "(20 OPS) function tracedata tsConeSphereIntersection(Start, Dir, Angle)",
		"body": "tsConeSphereIntersection(${1:Start}, ${2:Dir}, ${3:Angle})"
	},
	"tsRaySphereIntersection(vv)": {
		"scope": "source.e2",
		"prefix": "tsRaySphereIntersection",
		"description": "(20 OPS) function tracedata tsRaySphereIntersection(Start, Dir)",
		"body": "tsRaySphereIntersection(${1:Start}, ${2:Dir})"
	},
	"dsSend(ssns)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"keyForward(e:)": {
		"scope": "source.e2",
		"prefix": "keyForward",
		"description": "(2 OPS) function normal keyForward(This)",
		"body": "keyForward(${1:This})"
	},
	"applyAngForce(a)": {
		"scope": "source.e2",
		"prefix": "applyAngForce",
		"description": "(30 OPS) function void applyAngForce(Angforce)",
		"body": "applyAngForce(${1:Angforce})"
	},
	"tsRayPolygonIntersection(vv)": {
		"scope": "source.e2",
		"prefix": "tsRayPolygonIntersection",
		"description": "(20 OPS) function tracedata tsRayPolygonIntersection(Start, Dir)",
		"body": "tsRayPolygonIntersection(${1:Start}, ${2:Dir})"
	},
	"op:fea(set)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"dsSend(ssnxsc)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"entity(xwl:)": {
		"scope": "source.e2",
		"prefix": "entity",
		"description": "(2 OPS) function entity entity(This)",
		"body": "entity(${1:This})"
	},
	"tsShapeParent(ne)": {
		"scope": "source.e2",
		"prefix": "tsShapeParent",
		"description": "(20 OPS) function string tsShapeParent(Index, Parent)",
		"body": "tsShapeParent(${1:Index}, ${2:Parent})"
	},
	"clkName()": {
		"scope": "source.e2",
		"prefix": "clkName",
		"description": "(1 OPS) function string clkName()",
		"body": "clkName()"
	},
	"health(e:)": {
		"scope": "source.e2",
		"prefix": "health",
		"description": "(5 OPS) function normal health(This)",
		"body": "health(${1:This})"
	},
	"egpPolyOutline(xwl:nr)": {
		"scope": "source.e2",
		"prefix": "egpPolyOutline",
		"description": "(20 OPS) function void egpPolyOutline(Index, Args)",
		"body": "egpPolyOutline(${1:Index}, ${2:Args})"
	},
	"tsShapeSize(nv)": {
		"scope": "source.e2",
		"prefix": "tsShapeSize",
		"description": "(20 OPS) function string tsShapeSize(Index, Size)",
		"body": "tsShapeSize(${1:Index}, ${2:Size})"
	},
	"tsShapeNormal(nv)": {
		"scope": "source.e2",
		"prefix": "tsShapeNormal",
		"description": "(20 OPS) function string tsShapeNormal(Index, Normal)",
		"body": "tsShapeNormal(${1:Index}, ${2:Normal})"
	},
	"dsSendDirect(sexv2)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"e()": {
		"scope": "source.e2",
		"prefix": "e",
		"description": "(2 OPS) function normal e()",
		"body": "e()"
	},
	"tsShapePos(nv)": {
		"scope": "source.e2",
		"prefix": "tsShapePos",
		"description": "(20 OPS) function string tsShapePos(Index, Pos)",
		"body": "tsShapePos(${1:Index}, ${2:Pos})"
	},
	"matrix(a)": {
		"scope": "source.e2",
		"prefix": "matrix",
		"description": "(5 OPS) function matrix matrix(Ang)",
		"body": "matrix(${1:Ang})"
	},
	"vehicle(e:)": {
		"scope": "source.e2",
		"prefix": "vehicle",
		"description": "(5 OPS) function entity vehicle(This)",
		"body": "vehicle(${1:This})"
	},
	"getControlTermD(xsc:)": {
		"scope": "source.e2",
		"prefix": "getControlTermD",
		"description": "(3 OPS) function normal getControlTermD(This)",
		"body": "getControlTermD(${1:This})"
	},
	"op:fea(nxtdt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:ass(e)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(5 OPS) function entity op:ass()",
		"body": "op:ass()"
	},
	"ioSetOutput(sxwl)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function wirelink ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"isWorld(e:)": {
		"scope": "source.e2",
		"prefix": "isWorld",
		"description": "(10 OPS) function normal isWorld(This)",
		"body": "isWorld(${1:This})"
	},
	"row(xm2:n)": {
		"scope": "source.e2",
		"prefix": "row",
		"description": "(5 OPS) function vector2 row(Rv2)",
		"body": "row(${1:Rv2})"
	},
	"perf()": {
		"scope": "source.e2",
		"prefix": "perf",
		"description": "(1 OPS) function normal perf()",
		"body": "perf()"
	},
	"conj(q)": {
		"scope": "source.e2",
		"prefix": "conj",
		"description": "(4 OPS) function quaternion conj(Q)",
		"body": "conj(${1:Q})"
	},
	"mass(e:)": {
		"scope": "source.e2",
		"prefix": "mass",
		"description": "(10 OPS) function normal mass(This)",
		"body": "mass(${1:This})"
	},
	"findClearWhiteClassList()": {
		"scope": "source.e2",
		"prefix": "findClearWhiteClassList",
		"description": "(10 OPS) function void findClearWhiteClassList()",
		"body": "findClearWhiteClassList()"
	},
	"rangerPersist(n)": {
		"scope": "source.e2",
		"prefix": "rangerPersist",
		"description": "(1 OPS) function void rangerPersist(Persist)",
		"body": "rangerPersist(${1:Persist})"
	},
	"op:ass(s)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(3 OPS) function string op:ass()",
		"body": "op:ass()"
	},
	"length(s:)": {
		"scope": "source.e2",
		"prefix": "length",
		"description": "(20 OPS) function normal length()",
		"body": "length()"
	},
	"find()": {
		"scope": "source.e2",
		"prefix": "find",
		"description": "(2 OPS) function entity find()",
		"body": "find()"
	},
	"entity(xwl:s)": {
		"scope": "source.e2",
		"prefix": "entity",
		"description": "(5 OPS) function entity entity()",
		"body": "entity()"
	},
	"propMakePersistent(e:n)": {
		"scope": "source.e2",
		"prefix": "propMakePersistent",
		"description": "(10 OPS) function void propMakePersistent(Persistent)",
		"body": "propMakePersistent(${1:Persistent})"
	},
	"perf(n)": {
		"scope": "source.e2",
		"prefix": "perf",
		"description": "(1 OPS) function normal perf(N)",
		"body": "perf(${1:N})"
	},
	"rotate(v:a)": {
		"scope": "source.e2",
		"prefix": "rotate",
		"description": "(5 OPS) function vector rotate(Ang)",
		"body": "rotate(${1:Ang})"
	},
	"npcStop(e:)": {
		"scope": "source.e2",
		"prefix": "npcStop",
		"description": "(5 OPS) function void npcStop(This)",
		"body": "npcStop(${1:This})"
	},
	"npcGiveWeapon(e:s)": {
		"scope": "source.e2",
		"prefix": "npcGiveWeapon",
		"description": "(5 OPS) function void npcGiveWeapon(Rv2)",
		"body": "npcGiveWeapon(${1:Rv2})"
	},
	"npcGoRun(e:v)": {
		"scope": "source.e2",
		"prefix": "npcGoRun",
		"description": "(5 OPS) function void npcGoRun(Rv2)",
		"body": "npcGoRun(${1:Rv2})"
	},
	"primaryAmmoType(e:)": {
		"scope": "source.e2",
		"prefix": "primaryAmmoType",
		"description": "(2 OPS) function string primaryAmmoType(This)",
		"body": "primaryAmmoType(${1:This})"
	},
	"floor(a)": {
		"scope": "source.e2",
		"prefix": "floor",
		"description": "(5 OPS) function angle floor(Rv1)",
		"body": "floor(${1:Rv1})"
	},
	"ang(n)": {
		"scope": "source.e2",
		"prefix": "ang",
		"description": "(2 OPS) function angle ang(Rv1)",
		"body": "ang(${1:Rv1})"
	},
	"matrix(e)": {
		"scope": "source.e2",
		"prefix": "matrix",
		"description": "(5 OPS) function matrix matrix(Rv1)",
		"body": "matrix(${1:Rv1})"
	},
	"chatClk()": {
		"scope": "source.e2",
		"prefix": "chatClk",
		"description": "(3 OPS) function normal chatClk()",
		"body": "chatClk()"
	},
	"toRad(n)": {
		"scope": "source.e2",
		"prefix": "toRad",
		"description": "(2 OPS) function normal toRad()",
		"body": "toRad()"
	},
	"op:div(nn)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(1 OPS) function normal op:div()",
		"body": "op:div()"
	},
	"rangerFlags()": {
		"scope": "source.e2",
		"prefix": "rangerFlags",
		"description": "(1 OPS) function string rangerFlags()",
		"body": "rangerFlags()"
	},
	"holoAnimLength(n)": {
		"scope": "source.e2",
		"prefix": "holoAnimLength",
		"description": "(20 OPS) function normal holoAnimLength(Index)",
		"body": "holoAnimLength(${1:Index})"
	},
	"op:eq(xwlxwl)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(2 OPS) function normal op:eq(Lhs, Rhs)",
		"body": "op:eq(${1:Lhs}, ${2:Rhs})"
	},
	"vec(xv4)": {
		"scope": "source.e2",
		"prefix": "vec",
		"description": "(2 OPS) function vector vec(V4)",
		"body": "vec(${1:V4})"
	},
	"egpAngle(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpAngle",
		"description": "(5 OPS) function normal egpAngle(Index)",
		"body": "egpAngle(${1:Index})"
	},
	"gamemode()": {
		"scope": "source.e2",
		"prefix": "gamemode",
		"description": "(1 OPS) function string gamemode()",
		"body": "gamemode()"
	},
	"concat(t:snn)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(Delimiter, Startindex, Endindex)",
		"body": "concat(${1:Delimiter}, ${2:Startindex}, ${3:Endindex})"
	},
	"setRow(xm2:nnn)": {
		"scope": "source.e2",
		"prefix": "setRow",
		"description": "(5 OPS) function matrix2 setRow(Rv2, Rv3, Rv4)",
		"body": "setRow(${1:Rv2}, ${2:Rv3}, ${3:Rv4})"
	},
	"rangerOffsetHull(vvv)": {
		"scope": "source.e2",
		"prefix": "rangerOffsetHull",
		"description": "(20 OPS) function ranger rangerOffsetHull(Startpos, Endpos, Size)",
		"body": "rangerOffsetHull(${1:Startpos}, ${2:Endpos}, ${3:Size})"
	},
	"setColumn(m:nnnn)": {
		"scope": "source.e2",
		"prefix": "setColumn",
		"description": "(5 OPS) function matrix setColumn(Rv2, Rv3, Rv4, Rv5)",
		"body": "setColumn(${1:Rv2}, ${2:Rv3}, ${3:Rv4}, ${4:Rv5})"
	},
	"ceil(xv2n)": {
		"scope": "source.e2",
		"prefix": "ceil",
		"description": "(4 OPS) function vector2 ceil(Rv1, Decimals)",
		"body": "ceil(${1:Rv1}, ${2:Decimals})"
	},
	"unshiftFtrace(r:xft)": {
		"scope": "source.e2",
		"prefix": "unshiftFtrace",
		"description": "(7 OPS) function ftrace unshiftFtrace()",
		"body": "unshiftFtrace()"
	},
	"op:kvtable()": {
		"scope": "source.e2",
		"prefix": "op:kvtable",
		"description": "(20 OPS) function table op:kvtable()",
		"body": "op:kvtable()"
	},
	"popStcontrol(r:)": {
		"scope": "source.e2",
		"prefix": "popStcontrol",
		"description": "(7 OPS) function stcontrol popStcontrol()",
		"body": "popStcontrol()"
	},
	"gGetShare()": {
		"scope": "source.e2",
		"prefix": "gGetShare",
		"description": "(1 OPS) function normal gGetShare()",
		"body": "gGetShare()"
	},
	"remTimeSample(xsc:)": {
		"scope": "source.e2",
		"prefix": "remTimeSample",
		"description": "(3 OPS) function stcontrol remTimeSample(This)",
		"body": "remTimeSample(${1:This})"
	},
	"hostname()": {
		"scope": "source.e2",
		"prefix": "hostname",
		"description": "(1 OPS) function string hostname()",
		"body": "hostname()"
	},
	"setGainPD(xsc:r)": {
		"scope": "source.e2",
		"prefix": "setGainPD",
		"description": "(7 OPS) function stcontrol setGainPD(Aa)",
		"body": "setGainPD(${1:Aa})"
	},
	"soundStop(s)": {
		"scope": "source.e2",
		"prefix": "soundStop",
		"description": "(5 OPS) function void soundStop(Index)",
		"body": "soundStop(${1:Index})"
	},
	"fileLoad(s)": {
		"scope": "source.e2",
		"prefix": "fileLoad",
		"description": "(20 OPS) function void fileLoad(Filename)",
		"body": "fileLoad(${1:Filename})"
	},
	"setColor(e:nnnn)": {
		"scope": "source.e2",
		"prefix": "setColor",
		"description": "(2 OPS) function void setColor(R, G, B, A)",
		"body": "setColor(${1:R}, ${2:G}, ${3:B}, ${4:A})"
	},
	"teamScore(n:)": {
		"scope": "source.e2",
		"prefix": "teamScore",
		"description": "(10 OPS) function normal teamScore(This)",
		"body": "teamScore(${1:This})"
	},
	"numPlayers()": {
		"scope": "source.e2",
		"prefix": "numPlayers",
		"description": "(1 OPS) function normal numPlayers()",
		"body": "numPlayers()"
	},
	"assert(ns)": {
		"scope": "source.e2",
		"prefix": "assert",
		"description": "(2 OPS) function void assert(Condition, Reason)",
		"body": "assert(${1:Condition}, ${2:Reason})"
	},
	"bone(xwl:s)": {
		"scope": "source.e2",
		"prefix": "bone",
		"description": "(5 OPS) function bone bone()",
		"body": "bone()"
	},
	"mix(aan)": {
		"scope": "source.e2",
		"prefix": "mix",
		"description": "(5 OPS) function angle mix(Rv1, Rv2, Rv3)",
		"body": "mix(${1:Rv1}, ${2:Rv2}, ${3:Rv3})"
	},
	"pointContentsArray(v)": {
		"scope": "source.e2",
		"prefix": "pointContentsArray",
		"description": "(15 OPS) function array pointContentsArray(Point)",
		"body": "pointContentsArray(${1:Point})"
	},
	"soundVolume(sn)": {
		"scope": "source.e2",
		"prefix": "soundVolume",
		"description": "(5 OPS) function void soundVolume(Index, Volume)",
		"body": "soundVolume(${1:Index}, ${2:Volume})"
	},
	"egpAngle(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpAngle",
		"description": "(10 OPS) function void egpAngle(Index, Angle)",
		"body": "egpAngle(${1:Index}, ${2:Angle})"
	},
	"pushMatrix4(r:xm4)": {
		"scope": "source.e2",
		"prefix": "pushMatrix4",
		"description": "(7 OPS) function matrix4 pushMatrix4()",
		"body": "pushMatrix4()"
	},
	"rangerHull(nnnv)": {
		"scope": "source.e2",
		"prefix": "rangerHull",
		"description": "(20 OPS) function ranger rangerHull(Distance, Xskew, Yskew, Size)",
		"body": "rangerHull(${1:Distance}, ${2:Xskew}, ${3:Yskew}, ${4:Size})"
	},
	"clone(t:)": {
		"scope": "source.e2",
		"prefix": "clone",
		"description": "(10 OPS) function table clone(This)",
		"body": "clone(${1:This})"
	},
	"tsRayPlaneIntersection(vv)": {
		"scope": "source.e2",
		"prefix": "tsRayPlaneIntersection",
		"description": "(20 OPS) function tracedata tsRayPlaneIntersection(Start, Dir)",
		"body": "tsRayPlaneIntersection(${1:Start}, ${2:Dir})"
	},
	"getCopy(xsc:n)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function stcontrol getCopy(Nt)",
		"body": "getCopy(${1:Nt})"
	},
	"findDisallowPlayer(e)": {
		"scope": "source.e2",
		"prefix": "findDisallowPlayer",
		"description": "(10 OPS) function void findDisallowPlayer(Ent)",
		"body": "findDisallowPlayer(${1:Ent})"
	},
	"normalized(xv2:)": {
		"scope": "source.e2",
		"prefix": "normalized",
		"description": "(3 OPS) function vector2 normalized()",
		"body": "normalized()"
	},
	"stress(e:)": {
		"scope": "source.e2",
		"prefix": "stress",
		"description": "(10 OPS) function normal stress(This)",
		"body": "stress(${1:This})"
	},
	"upper(s:)": {
		"scope": "source.e2",
		"prefix": "upper",
		"description": "(20 OPS) function string upper()",
		"body": "upper()"
	},
	"time(t)": {
		"scope": "source.e2",
		"prefix": "time",
		"description": "(2 OPS) function normal time(Data)",
		"body": "time(${1:Data})"
	},
	"selfDestructAll()": {
		"scope": "source.e2",
		"prefix": "selfDestructAll",
		"description": "(5 OPS) function void selfDestructAll()",
		"body": "selfDestructAll()"
	},
	"gRemoveAllMatrixs(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllMatrixs",
		"description": "(5 OPS) function void gRemoveAllMatrixs()",
		"body": "gRemoveAllMatrixs()"
	},
	"setColor(xef:n)": {
		"scope": "source.e2",
		"prefix": "setColor",
		"description": "(1 OPS) function effect setColor(Index)",
		"body": "setColor(${1:Index})"
	},
	"y(v:)": {
		"scope": "source.e2",
		"prefix": "y",
		"description": "(1 OPS) function normal y(This)",
		"body": "y(${1:This})"
	},
	"op:fea(nbr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"runOnSpawn(n)": {
		"scope": "source.e2",
		"prefix": "runOnSpawn",
		"description": "(5 OPS) function void runOnSpawn(Activate)",
		"body": "runOnSpawn(${1:Activate})"
	},
	"removeVector4(t:s)": {
		"scope": "source.e2",
		"prefix": "removeVector4",
		"description": "(8 OPS) function vector4 removeVector4()",
		"body": "removeVector4()"
	},
	"egpAngle(xwl:nxv2xv2n)": {
		"scope": "source.e2",
		"prefix": "egpAngle",
		"description": "(10 OPS) function void egpAngle(Index, Worldpos, Axispos, Angle)",
		"body": "egpAngle(${1:Index}, ${2:Worldpos}, ${3:Axispos}, ${4:Angle})"
	},
	"egpOrder(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpOrder",
		"description": "(15 OPS) function normal egpOrder(Index)",
		"body": "egpOrder(${1:Index})"
	},
	"op:neg(v)": {
		"scope": "source.e2",
		"prefix": "op:neg",
		"description": "(2 OPS) function vector op:neg(This)",
		"body": "op:neg(${1:This})"
	},
	"random(nn)": {
		"scope": "source.e2",
		"prefix": "random",
		"description": "(2 OPS) function normal random()",
		"body": "random()"
	},
	"ballsocket(even)": {
		"scope": "source.e2",
		"prefix": "ballsocket",
		"description": "(30 OPS) function void ballsocket(Ent1, V, Ent2, Friction)",
		"body": "ballsocket(${1:Ent1}, ${2:V}, ${3:Ent2}, ${4:Friction})"
	},
	"rotateAroundAxis(v:vn)": {
		"scope": "source.e2",
		"prefix": "rotateAroundAxis",
		"description": "(15 OPS) function vector rotateAroundAxis(Axis, Degrees)",
		"body": "rotateAroundAxis(${1:Axis}, ${2:Degrees})"
	},
	"op:fea(nmr)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"runOnFile(n)": {
		"scope": "source.e2",
		"prefix": "runOnFile",
		"description": "(5 OPS) function void runOnFile(Active)",
		"body": "runOnFile(${1:Active})"
	},
	"fileReadList()": {
		"scope": "source.e2",
		"prefix": "fileReadList",
		"description": "(5 OPS) function array fileReadList()",
		"body": "fileReadList()"
	},
	"fileStatus()": {
		"scope": "source.e2",
		"prefix": "fileStatus",
		"description": "(5 OPS) function normal fileStatus()",
		"body": "fileStatus()"
	},
	"propSpawn(svn)": {
		"scope": "source.e2",
		"prefix": "propSpawn",
		"description": "(40 OPS) function entity propSpawn(Model, Pos, Frozen)",
		"body": "propSpawn(${1:Model}, ${2:Pos}, ${3:Frozen})"
	},
	"positionLeftSolid(xrd:)": {
		"scope": "source.e2",
		"prefix": "positionLeftSolid",
		"description": "(2 OPS) function vector positionLeftSolid(This)",
		"body": "positionLeftSolid(${1:This})"
	},
	"egpClearQueue()": {
		"scope": "source.e2",
		"prefix": "egpClearQueue",
		"description": "(5 OPS) function normal egpClearQueue()",
		"body": "egpClearQueue()"
	},
	"setPowerPD(xsc:nn)": {
		"scope": "source.e2",
		"prefix": "setPowerPD",
		"description": "(8 OPS) function stcontrol setPowerPD(Np, Nd)",
		"body": "setPowerPD(${1:Np}, ${2:Nd})"
	},
	"soundPlay(snsn)": {
		"scope": "source.e2",
		"prefix": "soundPlay",
		"description": "(25 OPS) function void soundPlay(Index, Duration, Path, Fade)",
		"body": "soundPlay(${1:Index}, ${2:Duration}, ${3:Path}, ${4:Fade})"
	},
	"steamID(e:)": {
		"scope": "source.e2",
		"prefix": "steamID",
		"description": "(5 OPS) function string steamID(This)",
		"body": "steamID(${1:This})"
	},
	"getMatType(xft:)": {
		"scope": "source.e2",
		"prefix": "getMatType",
		"description": "(3 OPS) function normal getMatType(This)",
		"body": "getMatType(${1:This})"
	},
	"runOnUse(n)": {
		"scope": "source.e2",
		"prefix": "runOnUse",
		"description": "(50 OPS) function void runOnUse(Value)",
		"body": "runOnUse(${1:Value})"
	},
	"map()": {
		"scope": "source.e2",
		"prefix": "map",
		"description": "(1 OPS) function string map()",
		"body": "map()"
	},
	"inputClk()": {
		"scope": "source.e2",
		"prefix": "inputClk",
		"description": "(1 OPS) function normal inputClk()",
		"body": "inputClk()"
	},
	"op:fea(nxm4r)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"ioSetOutput(ss)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function string ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"rangerDefaultZero(n)": {
		"scope": "source.e2",
		"prefix": "rangerDefaultZero",
		"description": "(1 OPS) function void rangerDefaultZero(Defaultzero)",
		"body": "rangerDefaultZero(${1:Defaultzero})"
	},
	"op:fea(ner)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(0 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"diagonal(xm4)": {
		"scope": "source.e2",
		"prefix": "diagonal",
		"description": "(5 OPS) function vector4 diagonal(Rv1)",
		"body": "diagonal(${1:Rv1})"
	},
	"max(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "max",
		"description": "(4 OPS) function vector2 max()",
		"body": "max()"
	},
	"ranger(nnn)": {
		"scope": "source.e2",
		"prefix": "ranger",
		"description": "(20 OPS) function ranger ranger(Distance, Xskew, Yskew)",
		"body": "ranger(${1:Distance}, ${2:Xskew}, ${3:Yskew})"
	},
	"trusts(e:e)": {
		"scope": "source.e2",
		"prefix": "trusts",
		"description": "(2 OPS) function normal trusts(Whom)",
		"body": "trusts(${1:Whom})"
	},
	"toString(e)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(5 OPS) function string toString(Ent)",
		"body": "toString(${1:Ent})"
	},
	"clamp(vnn)": {
		"scope": "source.e2",
		"prefix": "clamp",
		"description": "(5 OPS) function vector clamp(Input, Min, Max)",
		"body": "clamp(${1:Input}, ${2:Min}, ${3:Max})"
	},
	"invert(r)": {
		"scope": "source.e2",
		"prefix": "invert",
		"description": "(5 OPS) function table invert(Arr)",
		"body": "invert(${1:Arr})"
	},
	"ioSetOutput(sxrd)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function ranger ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"toString(t:)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(5 OPS) function string toString(This)",
		"body": "toString(${1:This})"
	},
	"setDiagonal(xm4:xv4)": {
		"scope": "source.e2",
		"prefix": "setDiagonal",
		"description": "(5 OPS) function matrix4 setDiagonal(Rv2)",
		"body": "setDiagonal(${1:Rv2})"
	},
	"shiftR(v)": {
		"scope": "source.e2",
		"prefix": "shiftR",
		"description": "(2 OPS) function vector shiftR(Vec)",
		"body": "shiftR(${1:Vec})"
	},
	"randvec(vv)": {
		"scope": "source.e2",
		"prefix": "randvec",
		"description": "(5 OPS) function vector randvec(Min, Max)",
		"body": "randvec(${1:Min}, ${2:Max})"
	},
	"holoCreate(nvv)": {
		"scope": "source.e2",
		"prefix": "holoCreate",
		"description": "(30 OPS) function entity holoCreate(Index, Position, Scale)",
		"body": "holoCreate(${1:Index}, ${2:Position}, ${3:Scale})"
	},
	"vec2(v)": {
		"scope": "source.e2",
		"prefix": "vec2",
		"description": "(2 OPS) function vector2 vec2()",
		"body": "vec2()"
	},
	"maxIndex(r:)": {
		"scope": "source.e2",
		"prefix": "maxIndex",
		"description": "(1 OPS) function normal maxIndex(This)",
		"body": "maxIndex(${1:This})"
	},
	"toWorld(vava)": {
		"scope": "source.e2",
		"prefix": "toWorld",
		"description": "(15 OPS) function vector toWorld(Localpos, Localang, Worldpos, Worldang)",
		"body": "toWorld(${1:Localpos}, ${2:Localang}, ${3:Worldpos}, ${4:Worldang})"
	},
	"swapElements(xm4:nnnn)": {
		"scope": "source.e2",
		"prefix": "swapElements",
		"description": "(5 OPS) function matrix4 swapElements(Rv2, Rv3, Rv4, Rv5)",
		"body": "swapElements(${1:Rv2}, ${2:Rv3}, ${3:Rv4}, ${4:Rv5})"
	},
	"distance(xv2:xv2)": {
		"scope": "source.e2",
		"prefix": "distance",
		"description": "(3 OPS) function normal distance()",
		"body": "distance()"
	},
	"axis(evevnv)": {
		"scope": "source.e2",
		"prefix": "axis",
		"description": "(30 OPS) function void axis(Ent1, V1, Ent2, V2, Friction, Localaxis)",
		"body": "axis(${1:Ent1}, ${2:V1}, ${3:Ent2}, ${4:V2}, ${5:Friction}, ${6:Localaxis})"
	},
	"bShr(nn)": {
		"scope": "source.e2",
		"prefix": "bShr",
		"description": "(2 OPS) function normal bShr(A, B)",
		"body": "bShr(${1:A}, ${2:B})"
	},
	"keyWalk(e:)": {
		"scope": "source.e2",
		"prefix": "keyWalk",
		"description": "(2 OPS) function normal keyWalk(This)",
		"body": "keyWalk(${1:This})"
	},
	"toUnicodeByte(s:nn)": {
		"scope": "source.e2",
		"prefix": "toUnicodeByte",
		"description": "(1 OPS) function array toUnicodeByte(Startpos, Endpos)",
		"body": "toUnicodeByte(${1:Startpos}, ${2:Endpos})"
	},
	"egpPolyOutline(xwl:n...)": {
		"scope": "source.e2",
		"prefix": "egpPolyOutline",
		"description": "(20 OPS) function void egpPolyOutline(Index)",
		"body": "egpPolyOutline(${1:Index})"
	},
	"positive(xv4)": {
		"scope": "source.e2",
		"prefix": "positive",
		"description": "(4 OPS) function vector4 positive()",
		"body": "positive()"
	},
	"elevation(b:v)": {
		"scope": "source.e2",
		"prefix": "elevation",
		"description": "(1 OPS) function normal elevation(Pos)",
		"body": "elevation(${1:Pos})"
	},
	"gRemoveAllNumbers(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllNumbers",
		"description": "(5 OPS) function void gRemoveAllNumbers()",
		"body": "gRemoveAllNumbers()"
	},
	"findInCone(vvnn)": {
		"scope": "source.e2",
		"prefix": "findInCone",
		"description": "(30 OPS) function normal findInCone(Position, Direction, Length, Degrees)",
		"body": "findInCone(${1:Position}, ${2:Direction}, ${3:Length}, ${4:Degrees})"
	},
	"getControlTermI(xsc:)": {
		"scope": "source.e2",
		"prefix": "getControlTermI",
		"description": "(3 OPS) function normal getControlTermI(This)",
		"body": "getControlTermI(${1:This})"
	},
	"egpRadius(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpRadius",
		"description": "(15 OPS) function void egpRadius(Index, Radius)",
		"body": "egpRadius(${1:Index}, ${2:Radius})"
	},
	"egpOrderAbove(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "egpOrderAbove",
		"description": "(15 OPS) function void egpOrderAbove(Index, Abovethis)",
		"body": "egpOrderAbove(${1:Index}, ${2:Abovethis})"
	},
	"op:neg(q)": {
		"scope": "source.e2",
		"prefix": "op:neg",
		"description": "(4 OPS) function quaternion op:neg(Q)",
		"body": "op:neg(${1:Q})"
	},
	"convar(s)": {
		"scope": "source.e2",
		"prefix": "convar",
		"description": "(5 OPS) function string convar(Cvar)",
		"body": "convar(${1:Cvar})"
	},
	"findDisallowEntities(r)": {
		"scope": "source.e2",
		"prefix": "findDisallowEntities",
		"description": "(10 OPS) function void findDisallowEntities(Arr)",
		"body": "findDisallowEntities(${1:Arr})"
	},
	"weapon(e:s)": {
		"scope": "source.e2",
		"prefix": "weapon",
		"description": "(2 OPS) function entity weapon(Weaponclassname)",
		"body": "weapon(${1:Weaponclassname})"
	},
	"setYaw(a:n)": {
		"scope": "source.e2",
		"prefix": "setYaw",
		"description": "(2 OPS) function angle setYaw(Rv2)",
		"body": "setYaw(${1:Rv2})"
	},
	"writeString(xwl:snn)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y})"
	},
	"heading(b:v)": {
		"scope": "source.e2",
		"prefix": "heading",
		"description": "(1 OPS) function angle heading(Pos)",
		"body": "heading(${1:Pos})"
	},
	"rayNudge(xft:v)": {
		"scope": "source.e2",
		"prefix": "rayNudge",
		"description": "(3 OPS) function ftrace rayNudge(Vv)",
		"body": "rayNudge(${1:Vv})"
	},
	"op:idx(v=xwlnv)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(20 OPS) function vector op:idx(Address, Value)",
		"body": "op:idx(${1:Address}, ${2:Value})"
	},
	"velL(b:)": {
		"scope": "source.e2",
		"prefix": "velL",
		"description": "(1 OPS) function vector velL(This)",
		"body": "velL(${1:This})"
	},
	"cameraPos(n)": {
		"scope": "source.e2",
		"prefix": "cameraPos",
		"description": "(2 OPS) function vector cameraPos(Index)",
		"body": "cameraPos(${1:Index})"
	},
	"holoCreate(nvvaxv4)": {
		"scope": "source.e2",
		"prefix": "holoCreate",
		"description": "(30 OPS) function entity holoCreate(Index, Position, Scale, Ang, Color)",
		"body": "holoCreate(${1:Index}, ${2:Position}, ${3:Scale}, ${4:Ang}, ${5:Color})"
	},
	"op:ass(xef)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(1 OPS) function effect op:ass()",
		"body": "op:ass()"
	},
	"hsl2rgb(v)": {
		"scope": "source.e2",
		"prefix": "hsl2rgb",
		"description": "(2 OPS) function vector hsl2rgb(Hsl)",
		"body": "hsl2rgb(${1:Hsl})"
	},
	"op:idx(xtd=xwlsxtd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"op:ass(xwl)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(2 OPS) function wirelink op:ass()",
		"body": "op:ass()"
	},
	"date()": {
		"scope": "source.e2",
		"prefix": "date",
		"description": "(10 OPS) function table date()",
		"body": "date()"
	},
	"holoScale(nv)": {
		"scope": "source.e2",
		"prefix": "holoScale",
		"description": "(15 OPS) function void holoScale(Index, Scale)",
		"body": "holoScale(${1:Index}, ${2:Scale})"
	},
	"element(xm4:nn)": {
		"scope": "source.e2",
		"prefix": "element",
		"description": "(5 OPS) function normal element(Rv2, Rv3)",
		"body": "element(${1:Rv2}, ${2:Rv3})"
	},
	"signalSenderId()": {
		"scope": "source.e2",
		"prefix": "signalSenderId",
		"description": "(4 OPS) function normal signalSenderId()",
		"body": "signalSenderId()"
	},
	"asin(n)": {
		"scope": "source.e2",
		"prefix": "asin",
		"description": "(2 OPS) function normal asin()",
		"body": "asin()"
	},
	"ranger(n)": {
		"scope": "source.e2",
		"prefix": "ranger",
		"description": "(20 OPS) function ranger ranger(Distance)",
		"body": "ranger(${1:Distance})"
	},
	"curtime()": {
		"scope": "source.e2",
		"prefix": "curtime",
		"description": "(1 OPS) function normal curtime()",
		"body": "curtime()"
	},
	"toWorld(e:a)": {
		"scope": "source.e2",
		"prefix": "toWorld",
		"description": "(15 OPS) function angle toWorld(Localangle)",
		"body": "toWorld(${1:Localangle})"
	},
	"clk()": {
		"scope": "source.e2",
		"prefix": "clk",
		"description": "(1 OPS) function normal clk()",
		"body": "clk()"
	},
	"hash(s)": {
		"scope": "source.e2",
		"prefix": "hash",
		"description": "(5 OPS) function normal hash(Str)",
		"body": "hash(${1:Str})"
	},
	"aimBone(e:)": {
		"scope": "source.e2",
		"prefix": "aimBone",
		"description": "(10 OPS) function bone aimBone(This)",
		"body": "aimBone(${1:This})"
	},
	"max(r:)": {
		"scope": "source.e2",
		"prefix": "max",
		"description": "(1 OPS) function normal max(This)",
		"body": "max(${1:This})"
	},
	"vonEncode(r)": {
		"scope": "source.e2",
		"prefix": "vonEncode",
		"description": "(10 OPS) function string vonEncode(Data)",
		"body": "vonEncode(${1:Data})"
	},
	"real(q:)": {
		"scope": "source.e2",
		"prefix": "real",
		"description": "(1 OPS) function normal real(This)",
		"body": "real(${1:This})"
	},
	"op:exp(qn)": {
		"scope": "source.e2",
		"prefix": "op:exp",
		"description": "(4 OPS) function quaternion op:exp(Lhs, Rhs)",
		"body": "op:exp(${1:Lhs}, ${2:Rhs})"
	},
	"randint(n)": {
		"scope": "source.e2",
		"prefix": "randint",
		"description": "(2 OPS) function normal randint()",
		"body": "randint()"
	},
	"forward(q:)": {
		"scope": "source.e2",
		"prefix": "forward",
		"description": "(7 OPS) function vector forward(This)",
		"body": "forward(${1:This})"
	},
	"tan(n)": {
		"scope": "source.e2",
		"prefix": "tan",
		"description": "(2 OPS) function normal tan()",
		"body": "tan()"
	},
	"elevation(e:v)": {
		"scope": "source.e2",
		"prefix": "elevation",
		"description": "(15 OPS) function normal elevation(Pos)",
		"body": "elevation(${1:Pos})"
	},
	"dsClkName()": {
		"scope": "source.e2",
		"prefix": "dsClkName",
		"description": "(1 OPS) function string dsClkName()",
		"body": "dsClkName()"
	},
	"setVector2(r:nxv2)": {
		"scope": "source.e2",
		"prefix": "setVector2",
		"description": "(5 OPS) function vector2 setVector2()",
		"body": "setVector2()"
	},
	"qi(n)": {
		"scope": "source.e2",
		"prefix": "qi",
		"description": "(1 OPS) function quaternion qi(N)",
		"body": "qi(${1:N})"
	},
	"keyClkPressed()": {
		"scope": "source.e2",
		"prefix": "keyClkPressed",
		"description": "(1 OPS) function string keyClkPressed()",
		"body": "keyClkPressed()"
	},
	"op:and(nn)": {
		"scope": "source.e2",
		"prefix": "op:and",
		"description": "(1 OPS) function normal op:and()",
		"body": "op:and()"
	},
	"op:idx(v=rnv)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function vector op:idx()",
		"body": "op:idx()"
	},
	"ang(nnn)": {
		"scope": "source.e2",
		"prefix": "ang",
		"description": "(2 OPS) function angle ang(Rv1, Rv2, Rv3)",
		"body": "ang(${1:Rv1}, ${2:Rv2}, ${3:Rv3})"
	},
	"op:whl()": {
		"scope": "source.e2",
		"prefix": "op:whl",
		"description": "(0 OPS) function void op:whl()",
		"body": "op:whl()"
	},
	"qj(n)": {
		"scope": "source.e2",
		"prefix": "qj",
		"description": "(1 OPS) function quaternion qj(N)",
		"body": "qj(${1:N})"
	},
	"op:neg(c)": {
		"scope": "source.e2",
		"prefix": "op:neg",
		"description": "(2 OPS) function complex op:neg(Z)",
		"body": "op:neg(${1:Z})"
	},
	"log10(n)": {
		"scope": "source.e2",
		"prefix": "log10",
		"description": "(2 OPS) function normal log10()",
		"body": "log10()"
	},
	"op:add(mm)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(5 OPS) function matrix op:add(Rv1, Rv2)",
		"body": "op:add(${1:Rv1}, ${2:Rv2})"
	},
	"floor(nn)": {
		"scope": "source.e2",
		"prefix": "floor",
		"description": "(2 OPS) function normal floor(Value, Decimals)",
		"body": "floor(${1:Value}, ${2:Decimals})"
	},
	"cbrt(n)": {
		"scope": "source.e2",
		"prefix": "cbrt",
		"description": "(2 OPS) function normal cbrt()",
		"body": "cbrt()"
	},
	"printDriver(e:ns)": {
		"scope": "source.e2",
		"prefix": "printDriver",
		"description": "(100 OPS) function normal printDriver(Print_type, Text)",
		"body": "printDriver(${1:Print_type}, ${2:Text})"
	},
	"op:ass(xv2)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(2 OPS) function vector2 op:ass()",
		"body": "op:ass()"
	},
	"getPosLocal(xft:)": {
		"scope": "source.e2",
		"prefix": "getPosLocal",
		"description": "(3 OPS) function vector getPosLocal(This)",
		"body": "getPosLocal(${1:This})"
	},
	"egpSaveFrame(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpSaveFrame",
		"description": "(15 OPS) function void egpSaveFrame(Index)",
		"body": "egpSaveFrame(${1:Index})"
	},
	"setRow(m:nnnn)": {
		"scope": "source.e2",
		"prefix": "setRow",
		"description": "(5 OPS) function matrix setRow(Rv2, Rv3, Rv4, Rv5)",
		"body": "setRow(${1:Rv2}, ${2:Rv3}, ${3:Rv4}, ${4:Rv5})"
	},
	"findAllowEntities(r)": {
		"scope": "source.e2",
		"prefix": "findAllowEntities",
		"description": "(10 OPS) function void findAllowEntities(Arr)",
		"body": "findAllowEntities(${1:Arr})"
	},
	"printColorC(...)": {
		"scope": "source.e2",
		"prefix": "printColorC",
		"description": "(100 OPS) function void printColorC()",
		"body": "printColorC()"
	},
	"date(n)": {
		"scope": "source.e2",
		"prefix": "date",
		"description": "(10 OPS) function table date(Time)",
		"body": "date(${1:Time})"
	},
	"bAnd(nn)": {
		"scope": "source.e2",
		"prefix": "bAnd",
		"description": "(2 OPS) function normal bAnd(A, B)",
		"body": "bAnd(${1:A}, ${2:B})"
	},
	"op:geq(nn)": {
		"scope": "source.e2",
		"prefix": "op:geq",
		"description": "(1.25 OPS) function normal op:geq()",
		"body": "op:geq()"
	},
	"swapColumns(xm2:)": {
		"scope": "source.e2",
		"prefix": "swapColumns",
		"description": "(5 OPS) function matrix2 swapColumns(This)",
		"body": "swapColumns(${1:This})"
	},
	"op:idx(xm4=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function matrix4 op:idx()",
		"body": "op:idx()"
	},
	"getGainP(xsc:)": {
		"scope": "source.e2",
		"prefix": "getGainP",
		"description": "(3 OPS) function normal getGainP(This)",
		"body": "getGainP(${1:This})"
	},
	"getFractionLen(xft:)": {
		"scope": "source.e2",
		"prefix": "getFractionLen",
		"description": "(3 OPS) function normal getFractionLen(This)",
		"body": "getFractionLen(${1:This})"
	},
	"setLength(e:nn)": {
		"scope": "source.e2",
		"prefix": "setLength",
		"description": "(5 OPS) function void setLength(Index, Length)",
		"body": "setLength(${1:Index}, ${2:Length})"
	},
	"removeStcontrol(t:n)": {
		"scope": "source.e2",
		"prefix": "removeStcontrol",
		"description": "(8 OPS) function stcontrol removeStcontrol()",
		"body": "removeStcontrol()"
	},
	"lastSpawnTime(e)": {
		"scope": "source.e2",
		"prefix": "lastSpawnTime",
		"description": "(5 OPS) function normal lastSpawnTime(Ply)",
		"body": "lastSpawnTime(${1:Ply})"
	},
	"unshiftVector4(r:xv4)": {
		"scope": "source.e2",
		"prefix": "unshiftVector4",
		"description": "(7 OPS) function vector4 unshiftVector4()",
		"body": "unshiftVector4()"
	},
	"csc(n)": {
		"scope": "source.e2",
		"prefix": "csc",
		"description": "(2 OPS) function normal csc()",
		"body": "csc()"
	},
	"time(s)": {
		"scope": "source.e2",
		"prefix": "time",
		"description": "(10 OPS) function normal time(Component)",
		"body": "time(${1:Component})"
	},
	"random(n)": {
		"scope": "source.e2",
		"prefix": "random",
		"description": "(2 OPS) function normal random()",
		"body": "random()"
	},
	"op:owc()": {
		"scope": "source.e2",
		"prefix": "op:owc",
		"description": "(1 OPS) function normal op:owc()",
		"body": "op:owc()"
	},
	"findClipToEntities(r)": {
		"scope": "source.e2",
		"prefix": "findClipToEntities",
		"description": "(5 OPS) function normal findClipToEntities(Entities)",
		"body": "findClipToEntities(${1:Entities})"
	},
	"cscr(n)": {
		"scope": "source.e2",
		"prefix": "cscr",
		"description": "(2 OPS) function normal cscr()",
		"body": "cscr()"
	},
	"rowMatrix(vvv)": {
		"scope": "source.e2",
		"prefix": "rowMatrix",
		"description": "(5 OPS) function matrix rowMatrix(Rv1, Rv2, Rv3)",
		"body": "rowMatrix(${1:Rv1}, ${2:Rv2}, ${3:Rv3})"
	},
	"dsClearGroups()": {
		"scope": "source.e2",
		"prefix": "dsClearGroups",
		"description": "(10 OPS) function void dsClearGroups()",
		"body": "dsClearGroups()"
	},
	"op:sub(cc)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(2 OPS) function complex op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"ioSetOutput(sxef)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function effect ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"toString(c)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(15 OPS) function string toString(Z)",
		"body": "toString(${1:Z})"
	},
	"setEffect(xwl:sxef)": {
		"scope": "source.e2",
		"prefix": "setEffect",
		"description": "(5 OPS) function effect setEffect()",
		"body": "setEffect()"
	},
	"getHitBox(xft:)": {
		"scope": "source.e2",
		"prefix": "getHitBox",
		"description": "(3 OPS) function normal getHitBox(This)",
		"body": "getHitBox(${1:This})"
	},
	"gTable(sn)": {
		"scope": "source.e2",
		"prefix": "gTable",
		"description": "(1 OPS) function gtable gTable(Groupname, Shared)",
		"body": "gTable(${1:Groupname}, ${2:Shared})"
	},
	"concat(r:sn)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(Delimiter, Startindex)",
		"body": "concat(${1:Delimiter}, ${2:Startindex})"
	},
	"insertEffect(r:nxef)": {
		"scope": "source.e2",
		"prefix": "insertEffect",
		"description": "(7 OPS) function effect insertEffect()",
		"body": "insertEffect()"
	},
	"cameraCreate(n)": {
		"scope": "source.e2",
		"prefix": "cameraCreate",
		"description": "(25 OPS) function void cameraCreate(Index)",
		"body": "cameraCreate(${1:Index})"
	},
	"dsGetHash()": {
		"scope": "source.e2",
		"prefix": "dsGetHash",
		"description": "(1 OPS) function normal dsGetHash()",
		"body": "dsGetHash()"
	},
	"op:idx(t=xgtn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function table op:idx()",
		"body": "op:idx()"
	},
	"runOnKeys(rn)": {
		"scope": "source.e2",
		"prefix": "runOnKeys",
		"description": "(20 OPS) function void runOnKeys(Plys, On)",
		"body": "runOnKeys(${1:Plys}, ${2:On})"
	},
	"op:neq(tt)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(1 OPS) function normal op:neq(Rv1, Rv2)",
		"body": "op:neq(${1:Rv1}, ${2:Rv2})"
	},
	"concat(t:nn)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(Startindex, Endindex)",
		"body": "concat(${1:Startindex}, ${2:Endindex})"
	},
	"writeCell(xwl:nn)": {
		"scope": "source.e2",
		"prefix": "writeCell",
		"description": "(5 OPS) function normal writeCell(Address, Value)",
		"body": "writeCell(${1:Address}, ${2:Value})"
	},
	"egpBytesLeft()": {
		"scope": "source.e2",
		"prefix": "egpBytesLeft",
		"description": "(10 OPS) function normal egpBytesLeft()",
		"body": "egpBytesLeft()"
	},
	"op:idx(xwlnn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx(Address, Value)",
		"body": "op:idx(${1:Address}, ${2:Value})"
	},
	"toString(e:)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(5 OPS) function string toString(Ent)",
		"body": "toString(${1:Ent})"
	},
	"egpCanSendUmsg()": {
		"scope": "source.e2",
		"prefix": "egpCanSendUmsg",
		"description": "(5 OPS) function normal egpCanSendUmsg()",
		"body": "egpCanSendUmsg()"
	},
	"soundPlay(sns)": {
		"scope": "source.e2",
		"prefix": "soundPlay",
		"description": "(25 OPS) function void soundPlay(Index, Duration, Path)",
		"body": "soundPlay(${1:Index}, ${2:Duration}, ${3:Path})"
	},
	"setSubMaterial(e:ns)": {
		"scope": "source.e2",
		"prefix": "setSubMaterial",
		"description": "(10 OPS) function void setSubMaterial(Index, Material)",
		"body": "setSubMaterial(${1:Index}, ${2:Material})"
	},
	"holoShadow(nn)": {
		"scope": "source.e2",
		"prefix": "holoShadow",
		"description": "(10 OPS) function void holoShadow(Index, Has_shadow)",
		"body": "holoShadow(${1:Index}, ${2:Has_shadow})"
	},
	"op:add(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(4 OPS) function vector4 op:add()",
		"body": "op:add()"
	},
	"dsSendDirect(ser)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"length2(xv2:)": {
		"scope": "source.e2",
		"prefix": "length2",
		"description": "(3 OPS) function normal length2()",
		"body": "length2()"
	},
	"gDeleteNum(n)": {
		"scope": "source.e2",
		"prefix": "gDeleteNum",
		"description": "(8 OPS) function normal gDeleteNum()",
		"body": "gDeleteNum()"
	},
	"op:idx(s=ess)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"dehomogenized(xv4:)": {
		"scope": "source.e2",
		"prefix": "dehomogenized",
		"description": "(3 OPS) function vector dehomogenized()",
		"body": "dehomogenized()"
	},
	"holoParent(nn)": {
		"scope": "source.e2",
		"prefix": "holoParent",
		"description": "(40 OPS) function void holoParent(Index, Otherindex)",
		"body": "holoParent(${1:Index}, ${2:Otherindex})"
	},
	"index(b:)": {
		"scope": "source.e2",
		"prefix": "index",
		"description": "(1 OPS) function normal index(This)",
		"body": "index(${1:This})"
	},
	"setIsIgnoreWorld(xft:n)": {
		"scope": "source.e2",
		"prefix": "setIsIgnoreWorld",
		"description": "(3 OPS) function ftrace setIsIgnoreWorld(Nn)",
		"body": "setIsIgnoreWorld(${1:Nn})"
	},
	"distance2(v:v)": {
		"scope": "source.e2",
		"prefix": "distance2",
		"description": "(5 OPS) function normal distance2(Other)",
		"body": "distance2(${1:Other})"
	},
	"fileWrite(ss)": {
		"scope": "source.e2",
		"prefix": "fileWrite",
		"description": "(20 OPS) function void fileWrite(Filename, Data)",
		"body": "fileWrite(${1:Filename}, ${2:Data})"
	},
	"randvec2(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "randvec2",
		"description": "(5 OPS) function vector2 randvec2(Min, Max)",
		"body": "randvec2(${1:Min}, ${2:Max})"
	},
	"setPitch(a:n)": {
		"scope": "source.e2",
		"prefix": "setPitch",
		"description": "(2 OPS) function angle setPitch(Rv2)",
		"body": "setPitch(${1:Rv2})"
	},
	"keyClkPressedBind()": {
		"scope": "source.e2",
		"prefix": "keyClkPressedBind",
		"description": "(1 OPS) function string keyClkPressedBind()",
		"body": "keyClkPressedBind()"
	},
	"attachmentPos(e:n)": {
		"scope": "source.e2",
		"prefix": "attachmentPos",
		"description": "(15 OPS) function vector attachmentPos(Attachmentid)",
		"body": "attachmentPos(${1:Attachmentid})"
	},
	"sub(s:nn)": {
		"scope": "source.e2",
		"prefix": "sub",
		"description": "(20 OPS) function string sub()",
		"body": "sub()"
	},
	"findClipToRegion(vv)": {
		"scope": "source.e2",
		"prefix": "findClipToRegion",
		"description": "(5 OPS) function normal findClipToRegion(Origin, Perpendicular)",
		"body": "findClipToRegion(${1:Origin}, ${2:Perpendicular})"
	},
	"rotationAngle(q)": {
		"scope": "source.e2",
		"prefix": "rotationAngle",
		"description": "(9 OPS) function normal rotationAngle(Q)",
		"body": "rotationAngle(${1:Q})"
	},
	"select(nc...)": {
		"scope": "source.e2",
		"prefix": "select",
		"description": "(5 OPS) function complex select(Index, Argument1)",
		"body": "select(${1:Index}, ${2:Argument1})"
	},
	"setPowerD(xsc:n)": {
		"scope": "source.e2",
		"prefix": "setPowerD",
		"description": "(8 OPS) function stcontrol setPowerD(Nd)",
		"body": "setPowerD(${1:Nd})"
	},
	"egpMaterial(xwl:ns)": {
		"scope": "source.e2",
		"prefix": "egpMaterial",
		"description": "(10 OPS) function void egpMaterial(Index, Material)",
		"body": "egpMaterial(${1:Index}, ${2:Material})"
	},
	"vonError()": {
		"scope": "source.e2",
		"prefix": "vonError",
		"description": "(1 OPS) function string vonError()",
		"body": "vonError()"
	},
	"dsGetString()": {
		"scope": "source.e2",
		"prefix": "dsGetString",
		"description": "(5 OPS) function string dsGetString()",
		"body": "dsGetString()"
	},
	"convarnum(s)": {
		"scope": "source.e2",
		"prefix": "convarnum",
		"description": "(5 OPS) function normal convarnum(Cvar)",
		"body": "convarnum(${1:Cvar})"
	},
	"signalSender()": {
		"scope": "source.e2",
		"prefix": "signalSender",
		"description": "(4 OPS) function entity signalSender()",
		"body": "signalSender()"
	},
	"ioSetOutput(sm)": {
		"scope": "source.e2",
		"prefix": "ioSetOutput",
		"description": "(5 OPS) function matrix ioSetOutput()",
		"body": "ioSetOutput()"
	},
	"pitch(a:)": {
		"scope": "source.e2",
		"prefix": "pitch",
		"description": "(1 OPS) function normal pitch(This)",
		"body": "pitch(${1:This})"
	},
	"distance2(xv2:xv2)": {
		"scope": "source.e2",
		"prefix": "distance2",
		"description": "(3 OPS) function normal distance2()",
		"body": "distance2()"
	},
	"isActive(xsc:)": {
		"scope": "source.e2",
		"prefix": "isActive",
		"description": "(3 OPS) function normal isActive(This)",
		"body": "isActive(${1:This})"
	},
	"dsSend(ssnc)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"concat(r:s)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(Delimiter)",
		"body": "concat(${1:Delimiter})"
	},
	"matchFirst(s:sn)": {
		"scope": "source.e2",
		"prefix": "matchFirst",
		"description": "(10 OPS) function string matchFirst(Pattern, Position)",
		"body": "matchFirst(${1:Pattern}, ${2:Position})"
	},
	"popWirelink(t:)": {
		"scope": "source.e2",
		"prefix": "popWirelink",
		"description": "(10 OPS) function wirelink popWirelink()",
		"body": "popWirelink()"
	},
	"shiftEffect(r:)": {
		"scope": "source.e2",
		"prefix": "shiftEffect",
		"description": "(7 OPS) function effect shiftEffect()",
		"body": "shiftEffect()"
	},
	"isinf(n)": {
		"scope": "source.e2",
		"prefix": "isinf",
		"description": "(2 OPS) function normal isinf(Value)",
		"body": "isinf(${1:Value})"
	},
	"log(q)": {
		"scope": "source.e2",
		"prefix": "log",
		"description": "(7 OPS) function quaternion log(Q)",
		"body": "log(${1:Q})"
	},
	"egpQueuePlayer()": {
		"scope": "source.e2",
		"prefix": "egpQueuePlayer",
		"description": "(10 OPS) function entity egpQueuePlayer()",
		"body": "egpQueuePlayer()"
	},
	"op:ass(xgt)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(1 OPS) function gtable op:ass()",
		"body": "op:ass()"
	},
	"op:idx(xrd=xwlsxrd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ranger op:idx()",
		"body": "op:idx()"
	},
	"y(xv4:)": {
		"scope": "source.e2",
		"prefix": "y",
		"description": "(2 OPS) function normal y()",
		"body": "y()"
	},
	"findAllowPlayerProps(s)": {
		"scope": "source.e2",
		"prefix": "findAllowPlayerProps",
		"description": "(10 OPS) function void findAllowPlayerProps(Name)",
		"body": "findAllowPlayerProps(${1:Name})"
	},
	"printTable(t)": {
		"scope": "source.e2",
		"prefix": "printTable",
		"description": "(5 OPS) function void printTable(Tbl)",
		"body": "printTable(${1:Tbl})"
	},
	"reset()": {
		"scope": "source.e2",
		"prefix": "reset",
		"description": "(100 OPS) function void reset()",
		"body": "reset()"
	},
	"op:idx(v=xwln)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(20 OPS) function vector op:idx(Address)",
		"body": "op:idx(${1:Address})"
	},
	"min(t:)": {
		"scope": "source.e2",
		"prefix": "min",
		"description": "(5 OPS) function normal min(This)",
		"body": "min(${1:This})"
	},
	"slerp(qqn)": {
		"scope": "source.e2",
		"prefix": "slerp",
		"description": "(13 OPS) function quaternion slerp(Q0, Q1, T)",
		"body": "slerp(${1:Q0}, ${2:Q1}, ${3:T})"
	},
	"rayNudge(xft:n)": {
		"scope": "source.e2",
		"prefix": "rayNudge",
		"description": "(3 OPS) function ftrace rayNudge(Nl)",
		"body": "rayNudge(${1:Nl})"
	},
	"op:mul(nq)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(4 OPS) function quaternion op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"setComplex(r:nc)": {
		"scope": "source.e2",
		"prefix": "setComplex",
		"description": "(5 OPS) function complex setComplex()",
		"body": "setComplex()"
	},
	"printColor(...)": {
		"scope": "source.e2",
		"prefix": "printColor",
		"description": "(100 OPS) function void printColor()",
		"body": "printColor()"
	},
	"remove(r:n)": {
		"scope": "source.e2",
		"prefix": "remove",
		"description": "(2 OPS) function normal remove(Index)",
		"body": "remove(${1:Index})"
	},
	"matrix(vvv)": {
		"scope": "source.e2",
		"prefix": "matrix",
		"description": "(5 OPS) function matrix matrix(Rv1, Rv2, Rv3)",
		"body": "matrix(${1:Rv1}, ${2:Rv2}, ${3:Rv3})"
	},
	"findIncludePlayer(e)": {
		"scope": "source.e2",
		"prefix": "findIncludePlayer",
		"description": "(10 OPS) function void findIncludePlayer(Ent)",
		"body": "findIncludePlayer(${1:Ent})"
	},
	"setVector(xwl:sv)": {
		"scope": "source.e2",
		"prefix": "setVector",
		"description": "(5 OPS) function vector setVector()",
		"body": "setVector()"
	},
	"inputType(xwl:s)": {
		"scope": "source.e2",
		"prefix": "inputType",
		"description": "(15 OPS) function string inputType(Input)",
		"body": "inputType(${1:Input})"
	},
	"quat(c)": {
		"scope": "source.e2",
		"prefix": "quat",
		"description": "(1 OPS) function quaternion quat(C)",
		"body": "quat(${1:C})"
	},
	"npcGoWalk(e:v)": {
		"scope": "source.e2",
		"prefix": "npcGoWalk",
		"description": "(5 OPS) function void npcGoWalk(Rv2)",
		"body": "npcGoWalk(${1:Rv2})"
	},
	"bone(e:n)": {
		"scope": "source.e2",
		"prefix": "bone",
		"description": "(3 OPS) function bone bone(Index)",
		"body": "bone(${1:Index})"
	},
	"op:is(b)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(1 OPS) function normal op:is(B)",
		"body": "op:is(${1:B})"
	},
	"isLan()": {
		"scope": "source.e2",
		"prefix": "isLan",
		"description": "(1 OPS) function normal isLan()",
		"body": "isLan()"
	},
	"op:ass(b)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(1 OPS) function bone op:ass()",
		"body": "op:ass()"
	},
	"fileClk()": {
		"scope": "source.e2",
		"prefix": "fileClk",
		"description": "(5 OPS) function normal fileClk()",
		"body": "fileClk()"
	},
	"op:idx(xef=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"mod(vv)": {
		"scope": "source.e2",
		"prefix": "mod",
		"description": "(10 OPS) function vector mod(Rv1, Rv2)",
		"body": "mod(${1:Rv1}, ${2:Rv2})"
	},
	"toDeg(xv2)": {
		"scope": "source.e2",
		"prefix": "toDeg",
		"description": "(2 OPS) function vector2 toDeg(Xv2)",
		"body": "toDeg(${1:Xv2})"
	},
	"randvec4(nn)": {
		"scope": "source.e2",
		"prefix": "randvec4",
		"description": "(7 OPS) function vector4 randvec4(Min, Max)",
		"body": "randvec4(${1:Min}, ${2:Max})"
	},
	"conj(c)": {
		"scope": "source.e2",
		"prefix": "conj",
		"description": "(2 OPS) function complex conj(Z)",
		"body": "conj(${1:Z})"
	},
	"op:add(sv)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(10 OPS) function string op:add()",
		"body": "op:add()"
	},
	"isSinglePlayer()": {
		"scope": "source.e2",
		"prefix": "isSinglePlayer",
		"description": "(1 OPS) function normal isSinglePlayer()",
		"body": "isSinglePlayer()"
	},
	"gResetGroup()": {
		"scope": "source.e2",
		"prefix": "gResetGroup",
		"description": "(1 OPS) function void gResetGroup()",
		"body": "gResetGroup()"
	},
	"isSteamFriend(e:e)": {
		"scope": "source.e2",
		"prefix": "isSteamFriend",
		"description": "(15 OPS) function normal isSteamFriend(Friend)",
		"body": "isSteamFriend(${1:Friend})"
	},
	"op:eq(cc)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(2 OPS) function normal op:eq(Lhs, Rhs)",
		"body": "op:eq(${1:Lhs}, ${2:Rhs})"
	},
	"up(q:)": {
		"scope": "source.e2",
		"prefix": "up",
		"description": "(7 OPS) function vector up(This)",
		"body": "up(${1:This})"
	},
	"op:fea(sqt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"trimRight(s:)": {
		"scope": "source.e2",
		"prefix": "trimRight",
		"description": "(20 OPS) function string trimRight()",
		"body": "trimRight()"
	},
	"isAlive(e:)": {
		"scope": "source.e2",
		"prefix": "isAlive",
		"description": "(5 OPS) function normal isAlive(This)",
		"body": "isAlive(${1:This})"
	},
	"findInBox(vv)": {
		"scope": "source.e2",
		"prefix": "findInBox",
		"description": "(30 OPS) function normal findInBox(Min, Max)",
		"body": "findInBox(${1:Min}, ${2:Max})"
	},
	"findRE(s:s)": {
		"scope": "source.e2",
		"prefix": "findRE",
		"description": "(20 OPS) function normal findRE(Pattern)",
		"body": "findRE(${1:Pattern})"
	},
	"op:add(nq)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(4 OPS) function quaternion op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"findExcludeEntities(r)": {
		"scope": "source.e2",
		"prefix": "findExcludeEntities",
		"description": "(10 OPS) function void findExcludeEntities(Arr)",
		"body": "findExcludeEntities(${1:Arr})"
	},
	"writeTableSimple(xwl:nt)": {
		"scope": "source.e2",
		"prefix": "writeTableSimple",
		"description": "(20 OPS) function normal writeTableSimple(Address, Data)",
		"body": "writeTableSimple(${1:Address}, ${2:Data})"
	},
	"op:idx(s=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"hitWorld(xrd:)": {
		"scope": "source.e2",
		"prefix": "hitWorld",
		"description": "(2 OPS) function normal hitWorld(This)",
		"body": "hitWorld(${1:This})"
	},
	"egpTextLayout(xwl:nsxv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpTextLayout",
		"description": "(15 OPS) function void egpTextLayout(Index, Text, Pos, Size)",
		"body": "egpTextLayout(${1:Index}, ${2:Text}, ${3:Pos}, ${4:Size})"
	},
	"ceil(xv4n)": {
		"scope": "source.e2",
		"prefix": "ceil",
		"description": "(8 OPS) function vector4 ceil(Rv1, Decimals)",
		"body": "ceil(${1:Rv1}, ${2:Decimals})"
	},
	"setWindup(xsc:xv2)": {
		"scope": "source.e2",
		"prefix": "setWindup",
		"description": "(3 OPS) function stcontrol setWindup(Vv)",
		"body": "setWindup(${1:Vv})"
	},
	"signalGroup()": {
		"scope": "source.e2",
		"prefix": "signalGroup",
		"description": "(4 OPS) function string signalGroup()",
		"body": "signalGroup()"
	},
	"op:div(vn)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function vector op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"keyAttack1(e:)": {
		"scope": "source.e2",
		"prefix": "keyAttack1",
		"description": "(2 OPS) function normal keyAttack1(This)",
		"body": "keyAttack1(${1:This})"
	},
	"creationTime(e:)": {
		"scope": "source.e2",
		"prefix": "creationTime",
		"description": "(5 OPS) function normal creationTime(This)",
		"body": "creationTime(${1:This})"
	},
	"x(xm4:)": {
		"scope": "source.e2",
		"prefix": "x",
		"description": "(5 OPS) function vector x(This)",
		"body": "x(${1:This})"
	},
	"soundPlay(e:nnsn)": {
		"scope": "source.e2",
		"prefix": "soundPlay",
		"description": "(25 OPS) function void soundPlay(Index, Duration, Path, Fade)",
		"body": "soundPlay(${1:Index}, ${2:Duration}, ${3:Path}, ${4:Fade})"
	},
	"realtime()": {
		"scope": "source.e2",
		"prefix": "realtime",
		"description": "(1 OPS) function normal realtime()",
		"body": "realtime()"
	},
	"op:idx(s=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"setName(e:s)": {
		"scope": "source.e2",
		"prefix": "setName",
		"description": "(5 OPS) function void setName(Name)",
		"body": "setName(${1:Name})"
	},
	"typeidsArray(t:)": {
		"scope": "source.e2",
		"prefix": "typeidsArray",
		"description": "(5 OPS) function array typeidsArray(This)",
		"body": "typeidsArray(${1:This})"
	},
	"velL(e:)": {
		"scope": "source.e2",
		"prefix": "velL",
		"description": "(5 OPS) function vector velL(This)",
		"body": "velL(${1:This})"
	},
	"holoScale(n)": {
		"scope": "source.e2",
		"prefix": "holoScale",
		"description": "(15 OPS) function vector holoScale(Index)",
		"body": "holoScale(${1:Index})"
	},
	"vec4(vn)": {
		"scope": "source.e2",
		"prefix": "vec4",
		"description": "(4 OPS) function vector4 vec4()",
		"body": "vec4()"
	},
	"shiftBone(r:)": {
		"scope": "source.e2",
		"prefix": "shiftBone",
		"description": "(7 OPS) function bone shiftBone()",
		"body": "shiftBone()"
	},
	"rangerOffsetHull(nvvv)": {
		"scope": "source.e2",
		"prefix": "rangerOffsetHull",
		"description": "(20 OPS) function ranger rangerOffsetHull(Distance, Startpos, Direction, Size)",
		"body": "rangerOffsetHull(${1:Distance}, ${2:Startpos}, ${3:Direction}, ${4:Size})"
	},
	"op:add(na)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(2 OPS) function angle op:add(Rv1, Rv2)",
		"body": "op:add(${1:Rv1}, ${2:Rv2})"
	},
	"findUpdateRate()": {
		"scope": "source.e2",
		"prefix": "findUpdateRate",
		"description": "(2 OPS) function normal findUpdateRate()",
		"body": "findUpdateRate()"
	},
	"op:idx(xtd=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"soundVolume(nnn)": {
		"scope": "source.e2",
		"prefix": "soundVolume",
		"description": "(5 OPS) function void soundVolume(Index, Volume, Fadetime)",
		"body": "soundVolume(${1:Index}, ${2:Volume}, ${3:Fadetime})"
	},
	"propSpawnEffect(n)": {
		"scope": "source.e2",
		"prefix": "propSpawnEffect",
		"description": "(1 OPS) function void propSpawnEffect(On)",
		"body": "propSpawnEffect(${1:On})"
	},
	"friends(e:)": {
		"scope": "source.e2",
		"prefix": "friends",
		"description": "(2 OPS) function array friends(This)",
		"body": "friends(${1:This})"
	},
	"pos(xrd:)": {
		"scope": "source.e2",
		"prefix": "pos",
		"description": "(2 OPS) function vector pos(This)",
		"body": "pos(${1:This})"
	},
	"rayMul(xft:nnn)": {
		"scope": "source.e2",
		"prefix": "rayMul",
		"description": "(3 OPS) function ftrace rayMul(Nx, Ny, Nz)",
		"body": "rayMul(${1:Nx}, ${2:Ny}, ${3:Nz})"
	},
	"dsSendDirect(see)": {
		"scope": "source.e2",
		"prefix": "dsSendDirect",
		"description": "(10 OPS) function normal dsSendDirect()",
		"body": "dsSendDirect()"
	},
	"op:neq(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(2 OPS) function normal op:neq()",
		"body": "op:neq()"
	},
	"toDeg(a)": {
		"scope": "source.e2",
		"prefix": "toDeg",
		"description": "(5 OPS) function angle toDeg(Rv1)",
		"body": "toDeg(${1:Rv1})"
	},
	"signalSetGroup(s)": {
		"scope": "source.e2",
		"prefix": "signalSetGroup",
		"description": "(5 OPS) function void signalSetGroup(Group)",
		"body": "signalSetGroup(${1:Group})"
	},
	"op:ass(xm4)": {
		"scope": "source.e2",
		"prefix": "op:ass",
		"description": "(5 OPS) function matrix4 op:ass()",
		"body": "op:ass()"
	},
	"rgb2hsl(v)": {
		"scope": "source.e2",
		"prefix": "rgb2hsl",
		"description": "(2 OPS) function vector rgb2hsl(Rgb)",
		"body": "rgb2hsl(${1:Rgb})"
	},
	"setTable(xwl:st)": {
		"scope": "source.e2",
		"prefix": "setTable",
		"description": "(5 OPS) function table setTable()",
		"body": "setTable()"
	},
	"vec(a)": {
		"scope": "source.e2",
		"prefix": "vec",
		"description": "(2 OPS) function vector vec(Ang)",
		"body": "vec(${1:Ang})"
	},
	"keyZoom(e:)": {
		"scope": "source.e2",
		"prefix": "keyZoom",
		"description": "(2 OPS) function normal keyZoom(This)",
		"body": "keyZoom(${1:This})"
	},
	"outerProduct(xv4:xv4)": {
		"scope": "source.e2",
		"prefix": "outerProduct",
		"description": "(15 OPS) function matrix4 outerProduct()",
		"body": "outerProduct()"
	},
	"hitNormal(xrd:)": {
		"scope": "source.e2",
		"prefix": "hitNormal",
		"description": "(2 OPS) function vector hitNormal(This)",
		"body": "hitNormal(${1:This})"
	},
	"unshiftMatrix(t:m)": {
		"scope": "source.e2",
		"prefix": "unshiftMatrix",
		"description": "(10 OPS) function void unshiftMatrix()",
		"body": "unshiftMatrix()"
	},
	"findClearBlackPlayerPropList()": {
		"scope": "source.e2",
		"prefix": "findClearBlackPlayerPropList",
		"description": "(10 OPS) function void findClearBlackPlayerPropList()",
		"body": "findClearBlackPlayerPropList()"
	},
	"toLocalAng(vava)": {
		"scope": "source.e2",
		"prefix": "toLocalAng",
		"description": "(15 OPS) function angle toLocalAng(Localpos, Localang, Worldpos, Worldang)",
		"body": "toLocalAng(${1:Localpos}, ${2:Localang}, ${3:Worldpos}, ${4:Worldang})"
	},
	"model(e:)": {
		"scope": "source.e2",
		"prefix": "model",
		"description": "(5 OPS) function string model(This)",
		"body": "model(${1:This})"
	},
	"op:fea(nvt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"isConstrained(e:)": {
		"scope": "source.e2",
		"prefix": "isConstrained",
		"description": "(5 OPS) function normal isConstrained(This)",
		"body": "isConstrained(${1:This})"
	},
	"op:is(xtd)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(20 OPS) function normal op:is(Walker)",
		"body": "op:is(${1:Walker})"
	},
	"soundPlay(nns)": {
		"scope": "source.e2",
		"prefix": "soundPlay",
		"description": "(25 OPS) function void soundPlay(Index, Duration, Path)",
		"body": "soundPlay(${1:Index}, ${2:Duration}, ${3:Path})"
	},
	"explodeRE(s:s)": {
		"scope": "source.e2",
		"prefix": "explodeRE",
		"description": "(5 OPS) function array explodeRE(Delim)",
		"body": "explodeRE(${1:Delim})"
	},
	"writeString(xwl:snnvvn)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y, Textcolor, Bgcolor, Flash)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor}, ${6:Flash})"
	},
	"matrix4(av)": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(5 OPS) function matrix4 matrix4(Ang, Pos)",
		"body": "matrix4(${1:Ang}, ${2:Pos})"
	},
	"acosr(n)": {
		"scope": "source.e2",
		"prefix": "acosr",
		"description": "(2 OPS) function normal acosr()",
		"body": "acosr()"
	},
	"min(nnn)": {
		"scope": "source.e2",
		"prefix": "min",
		"description": "(1 OPS) function normal min()",
		"body": "min()"
	},
	"op:add(qc)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(4 OPS) function quaternion op:add(Lhs, Rhs)",
		"body": "op:add(${1:Lhs}, ${2:Rhs})"
	},
	"gmatch(s:s)": {
		"scope": "source.e2",
		"prefix": "gmatch",
		"description": "(10 OPS) function table gmatch(Pattern)",
		"body": "gmatch(${1:Pattern})"
	},
	"trace(m)": {
		"scope": "source.e2",
		"prefix": "trace",
		"description": "(5 OPS) function normal trace(Rv1)",
		"body": "trace(${1:Rv1})"
	},
	"maxHealth(e:)": {
		"scope": "source.e2",
		"prefix": "maxHealth",
		"description": "(5 OPS) function normal maxHealth(This)",
		"body": "maxHealth(${1:This})"
	},
	"bone(r:n)": {
		"scope": "source.e2",
		"prefix": "bone",
		"description": "(5 OPS) function bone bone()",
		"body": "bone()"
	},
	"frags(e:)": {
		"scope": "source.e2",
		"prefix": "frags",
		"description": "(5 OPS) function normal frags(This)",
		"body": "frags(${1:This})"
	},
	"getSubMaterial(e:n)": {
		"scope": "source.e2",
		"prefix": "getSubMaterial",
		"description": "(10 OPS) function string getSubMaterial(Index)",
		"body": "getSubMaterial(${1:Index})"
	},
	"op:is(c)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(2 OPS) function normal op:is(Z)",
		"body": "op:is(${1:Z})"
	},
	"cotr(n)": {
		"scope": "source.e2",
		"prefix": "cotr",
		"description": "(2 OPS) function normal cotr()",
		"body": "cotr()"
	},
	"fileLoading()": {
		"scope": "source.e2",
		"prefix": "fileLoading",
		"description": "(5 OPS) function normal fileLoading()",
		"body": "fileLoading()"
	},
	"op:add(sa)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(10 OPS) function string op:add()",
		"body": "op:add()"
	},
	"op:mul(vv)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function vector op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"creationID(e:)": {
		"scope": "source.e2",
		"prefix": "creationID",
		"description": "(5 OPS) function normal creationID(This)",
		"body": "creationID(${1:This})"
	},
	"setFlags(xef:n)": {
		"scope": "source.e2",
		"prefix": "setFlags",
		"description": "(1 OPS) function effect setFlags(Flags)",
		"body": "setFlags(${1:Flags})"
	},
	"keyLeft(e:)": {
		"scope": "source.e2",
		"prefix": "keyLeft",
		"description": "(2 OPS) function normal keyLeft(This)",
		"body": "keyLeft(${1:This})"
	},
	"hintDriver(e:sn)": {
		"scope": "source.e2",
		"prefix": "hintDriver",
		"description": "(100 OPS) function normal hintDriver(Text, Duration)",
		"body": "hintDriver(${1:Text}, ${2:Duration})"
	},
	"op:idx(xef=xwls)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"rotate(v:nnn)": {
		"scope": "source.e2",
		"prefix": "rotate",
		"description": "(5 OPS) function vector rotate(Pitch, Yaw, Roll)",
		"body": "rotate(${1:Pitch}, ${2:Yaw}, ${3:Roll})"
	},
	"abs(q)": {
		"scope": "source.e2",
		"prefix": "abs",
		"description": "(4 OPS) function normal abs(Q)",
		"body": "abs(${1:Q})"
	},
	"op:exp(xm4n)": {
		"scope": "source.e2",
		"prefix": "op:exp",
		"description": "(5 OPS) function matrix4 op:exp(Lhs, Rhs)",
		"body": "op:exp(${1:Lhs}, ${2:Rhs})"
	},
	"findAllowClass(s)": {
		"scope": "source.e2",
		"prefix": "findAllowClass",
		"description": "(10 OPS) function void findAllowClass(Class)",
		"body": "findAllowClass(${1:Class})"
	},
	"holoDisableShading(nn)": {
		"scope": "source.e2",
		"prefix": "holoDisableShading",
		"description": "(10 OPS) function void holoDisableShading(Index, Disable)",
		"body": "holoDisableShading(${1:Index}, ${2:Disable})"
	},
	"egp3DTracker(xwl:nv)": {
		"scope": "source.e2",
		"prefix": "egp3DTracker",
		"description": "(15 OPS) function void egp3DTracker(Index, Pos)",
		"body": "egp3DTracker(${1:Index}, ${2:Pos})"
	},
	"wrap(nn)": {
		"scope": "source.e2",
		"prefix": "wrap",
		"description": "(2 OPS) function normal wrap()",
		"body": "wrap()"
	},
	"setRow(xm4:nnnnn)": {
		"scope": "source.e2",
		"prefix": "setRow",
		"description": "(5 OPS) function matrix4 setRow(Rv2, Rv3, Rv4, Rv5, Rv6)",
		"body": "setRow(${1:Rv2}, ${2:Rv3}, ${3:Rv4}, ${4:Rv5}, ${5:Rv6})"
	},
	"matrix(xm2)": {
		"scope": "source.e2",
		"prefix": "matrix",
		"description": "(5 OPS) function matrix matrix(Rv1)",
		"body": "matrix(${1:Rv1})"
	},
	"newFTrace(vv)": {
		"scope": "source.e2",
		"prefix": "newFTrace",
		"description": "(20 OPS) function ftrace newFTrace(Vp, Vd)",
		"body": "newFTrace(${1:Vp}, ${2:Vd})"
	},
	"op:mul(nxm2)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function matrix2 op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"int(n)": {
		"scope": "source.e2",
		"prefix": "int",
		"description": "(2 OPS) function normal int(Rv1)",
		"body": "int(${1:Rv1})"
	},
	"op:fea(nst)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"soundPlay(e:snsn)": {
		"scope": "source.e2",
		"prefix": "soundPlay",
		"description": "(25 OPS) function void soundPlay(Index, Duration, Path, Fade)",
		"body": "soundPlay(${1:Index}, ${2:Duration}, ${3:Path}, ${4:Fade})"
	},
	"getPosWorld(xft:)": {
		"scope": "source.e2",
		"prefix": "getPosWorld",
		"description": "(3 OPS) function vector getPosWorld(This)",
		"body": "getPosWorld(${1:This})"
	},
	"randint(nn)": {
		"scope": "source.e2",
		"prefix": "randint",
		"description": "(2 OPS) function normal randint()",
		"body": "randint()"
	},
	"setDiagonal(xm4:nnnn)": {
		"scope": "source.e2",
		"prefix": "setDiagonal",
		"description": "(5 OPS) function matrix4 setDiagonal(Rv2, Rv3, Rv4, Rv5)",
		"body": "setDiagonal(${1:Rv2}, ${2:Rv3}, ${3:Rv4}, ${4:Rv5})"
	},
	"op:sub(qc)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(4 OPS) function quaternion op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"passenger(e:)": {
		"scope": "source.e2",
		"prefix": "passenger",
		"description": "(5 OPS) function entity passenger(This)",
		"body": "passenger(${1:This})"
	},
	"writeUnicodeString(xwl:snnvv)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y, Textcolor, Bgcolor)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor})"
	},
	"z(xm4:)": {
		"scope": "source.e2",
		"prefix": "z",
		"description": "(5 OPS) function vector z(This)",
		"body": "z(${1:This})"
	},
	"op:fea(stt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"wirelink(e:)": {
		"scope": "source.e2",
		"prefix": "wirelink",
		"description": "(5 OPS) function wirelink wirelink(This)",
		"body": "wirelink(${1:This})"
	},
	"changed(xm4)": {
		"scope": "source.e2",
		"prefix": "changed",
		"description": "(5 OPS) function normal changed()",
		"body": "changed()"
	},
	"matrix4(xm2xm2xm2xm2)": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(5 OPS) function matrix4 matrix4(Rv1, Rv2, Rv3, Rv4)",
		"body": "matrix4(${1:Rv1}, ${2:Rv2}, ${3:Rv3}, ${4:Rv4})"
	},
	"op:neg(xv2)": {
		"scope": "source.e2",
		"prefix": "op:neg",
		"description": "(2 OPS) function vector2 op:neg()",
		"body": "op:neg()"
	},
	"aabbMin(e:)": {
		"scope": "source.e2",
		"prefix": "aabbMin",
		"description": "(10 OPS) function vector aabbMin(This)",
		"body": "aabbMin(${1:This})"
	},
	"op:mul(nxv2)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function vector2 op:mul()",
		"body": "op:mul()"
	},
	"op:mul(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function vector2 op:mul()",
		"body": "op:mul()"
	},
	"op:div(nxv2)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function vector2 op:div()",
		"body": "op:div()"
	},
	"outerProduct(xv2:xv2)": {
		"scope": "source.e2",
		"prefix": "outerProduct",
		"description": "(3 OPS) function matrix2 outerProduct()",
		"body": "outerProduct()"
	},
	"rotate(xv2:n)": {
		"scope": "source.e2",
		"prefix": "rotate",
		"description": "(3 OPS) function vector2 rotate()",
		"body": "rotate()"
	},
	"lightCreate(nvvn)": {
		"scope": "source.e2",
		"prefix": "lightCreate",
		"description": "(25 OPS) function void lightCreate(Index, Position, Color, Distance)",
		"body": "lightCreate(${1:Index}, ${2:Position}, ${3:Color}, ${4:Distance})"
	},
	"lastDisconnectedPlayer()": {
		"scope": "source.e2",
		"prefix": "lastDisconnectedPlayer",
		"description": "(3 OPS) function entity lastDisconnectedPlayer()",
		"body": "lastDisconnectedPlayer()"
	},
	"printTable(r)": {
		"scope": "source.e2",
		"prefix": "printTable",
		"description": "(100 OPS) function void printTable(Arr)",
		"body": "printTable(${1:Arr})"
	},
	"clone(r:)": {
		"scope": "source.e2",
		"prefix": "clone",
		"description": "(1 OPS) function array clone(This)",
		"body": "clone(${1:This})"
	},
	"mod(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "mod",
		"description": "(4 OPS) function vector2 mod()",
		"body": "mod()"
	},
	"shiftVector(r:)": {
		"scope": "source.e2",
		"prefix": "shiftVector",
		"description": "(7 OPS) function vector shiftVector()",
		"body": "shiftVector()"
	},
	"vec4(v)": {
		"scope": "source.e2",
		"prefix": "vec4",
		"description": "(4 OPS) function vector4 vec4()",
		"body": "vec4()"
	},
	"op:mul(vq)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(9 OPS) function quaternion op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"raySphereIntersection(vvvn)": {
		"scope": "source.e2",
		"prefix": "raySphereIntersection",
		"description": "(20 OPS) function vector raySphereIntersection(Start, Dir, Pos, Radius)",
		"body": "raySphereIntersection(${1:Start}, ${2:Dir}, ${3:Pos}, ${4:Radius})"
	},
	"op:neq(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(4 OPS) function normal op:neq()",
		"body": "op:neq()"
	},
	"keyvalues(e:)": {
		"scope": "source.e2",
		"prefix": "keyvalues",
		"description": "(20 OPS) function table keyvalues(This)",
		"body": "keyvalues(${1:This})"
	},
	"removeBone(t:s)": {
		"scope": "source.e2",
		"prefix": "removeBone",
		"description": "(8 OPS) function bone removeBone()",
		"body": "removeBone()"
	},
	"op:sub(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(4 OPS) function vector4 op:sub()",
		"body": "op:sub()"
	},
	"flip(t:)": {
		"scope": "source.e2",
		"prefix": "flip",
		"description": "(5 OPS) function table flip(This)",
		"body": "flip(${1:This})"
	},
	"op:mul(xv4n)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(4 OPS) function vector4 op:mul()",
		"body": "op:mul()"
	},
	"op:div(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(4 OPS) function vector4 op:div()",
		"body": "op:div()"
	},
	"op:neq(xm2xm2)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(5 OPS) function normal op:neq(Rv1, Rv2)",
		"body": "op:neq(${1:Rv1}, ${2:Rv2})"
	},
	"elevation(vav)": {
		"scope": "source.e2",
		"prefix": "elevation",
		"description": "(15 OPS) function normal elevation(Originpos, Originangle, Pos)",
		"body": "elevation(${1:Originpos}, ${2:Originangle}, ${3:Pos})"
	},
	"op:var()": {
		"scope": "source.e2",
		"prefix": "op:var",
		"description": "(2 OPS) function void op:var()",
		"body": "op:var()"
	},
	"dsGetSender()": {
		"scope": "source.e2",
		"prefix": "dsGetSender",
		"description": "(1 OPS) function entity dsGetSender()",
		"body": "dsGetSender()"
	},
	"transpose(xm2)": {
		"scope": "source.e2",
		"prefix": "transpose",
		"description": "(5 OPS) function matrix2 transpose(Rv1)",
		"body": "transpose(${1:Rv1})"
	},
	"distance2(xv4:xv4)": {
		"scope": "source.e2",
		"prefix": "distance2",
		"description": "(7 OPS) function normal distance2()",
		"body": "distance2()"
	},
	"op:function()": {
		"scope": "source.e2",
		"prefix": "op:function",
		"description": "(1 OPS) function void op:function()",
		"body": "op:function()"
	},
	"op:not(n)": {
		"scope": "source.e2",
		"prefix": "op:not",
		"description": "(1 OPS) function normal op:not()",
		"body": "op:not()"
	},
	"w(xv4:)": {
		"scope": "source.e2",
		"prefix": "w",
		"description": "(2 OPS) function normal w()",
		"body": "w()"
	},
	"hitNormal(xtd:)": {
		"scope": "source.e2",
		"prefix": "hitNormal",
		"description": "(20 OPS) function vector hitNormal(This)",
		"body": "hitNormal(${1:This})"
	},
	"angnorm(a)": {
		"scope": "source.e2",
		"prefix": "angnorm",
		"description": "(5 OPS) function angle angnorm(Rv1)",
		"body": "angnorm(${1:Rv1})"
	},
	"round(nn)": {
		"scope": "source.e2",
		"prefix": "round",
		"description": "(2 OPS) function normal round(Value, Decimals)",
		"body": "round(${1:Value}, ${2:Decimals})"
	},
	"remoteSetCode(e:s)": {
		"scope": "source.e2",
		"prefix": "remoteSetCode",
		"description": "(250 OPS) function void remoteSetCode(Code)",
		"body": "remoteSetCode(${1:Code})"
	},
	"setColumn(xm4:nxv4)": {
		"scope": "source.e2",
		"prefix": "setColumn",
		"description": "(5 OPS) function matrix4 setColumn(Rv2, Rv3)",
		"body": "setColumn(${1:Rv2}, ${2:Rv3})"
	},
	"ceil(vn)": {
		"scope": "source.e2",
		"prefix": "ceil",
		"description": "(6 OPS) function vector ceil(Rv1, Decimals)",
		"body": "ceil(${1:Rv1}, ${2:Decimals})"
	},
	"y(xm4:)": {
		"scope": "source.e2",
		"prefix": "y",
		"description": "(5 OPS) function vector y(This)",
		"body": "y(${1:This})"
	},
	"holoMaxAmount()": {
		"scope": "source.e2",
		"prefix": "holoMaxAmount",
		"description": "(2 OPS) function normal holoMaxAmount()",
		"body": "holoMaxAmount()"
	},
	"clamp(xv4nn)": {
		"scope": "source.e2",
		"prefix": "clamp",
		"description": "(13 OPS) function vector4 clamp(Input, Min, Max)",
		"body": "clamp(${1:Input}, ${2:Min}, ${3:Max})"
	},
	"npcShoot(e:)": {
		"scope": "source.e2",
		"prefix": "npcShoot",
		"description": "(5 OPS) function void npcShoot(This)",
		"body": "npcShoot(${1:This})"
	},
	"signalGetGroup()": {
		"scope": "source.e2",
		"prefix": "signalGetGroup",
		"description": "(5 OPS) function string signalGetGroup()",
		"body": "signalGetGroup()"
	},
	"rangerOffsetHull(evv)": {
		"scope": "source.e2",
		"prefix": "rangerOffsetHull",
		"description": "(20 OPS) function ranger rangerOffsetHull(Ent, From, To)",
		"body": "rangerOffsetHull(${1:Ent}, ${2:From}, ${3:To})"
	},
	"maxPlayers()": {
		"scope": "source.e2",
		"prefix": "maxPlayers",
		"description": "(1 OPS) function normal maxPlayers()",
		"body": "maxPlayers()"
	},
	"op:is(v)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(2 OPS) function normal op:is(This)",
		"body": "op:is(${1:This})"
	},
	"lower(s:)": {
		"scope": "source.e2",
		"prefix": "lower",
		"description": "(20 OPS) function string lower()",
		"body": "lower()"
	},
	"runOnPlayerDisconnect(n)": {
		"scope": "source.e2",
		"prefix": "runOnPlayerDisconnect",
		"description": "(3 OPS) function void runOnPlayerDisconnect(Activate)",
		"body": "runOnPlayerDisconnect(${1:Activate})"
	},
	"vonDecode(s)": {
		"scope": "source.e2",
		"prefix": "vonDecode",
		"description": "(10 OPS) function array vonDecode(Data)",
		"body": "vonDecode(${1:Data})"
	},
	"op:exp(cc)": {
		"scope": "source.e2",
		"prefix": "op:exp",
		"description": "(2 OPS) function complex op:exp(Lhs, Rhs)",
		"body": "op:exp(${1:Lhs}, ${2:Rhs})"
	},
	"parent(e:)": {
		"scope": "source.e2",
		"prefix": "parent",
		"description": "(5 OPS) function entity parent(This)",
		"body": "parent(${1:This})"
	},
	"teamFrags(n:)": {
		"scope": "source.e2",
		"prefix": "teamFrags",
		"description": "(10 OPS) function normal teamFrags(This)",
		"body": "teamFrags(${1:This})"
	},
	"newFTrace(n)": {
		"scope": "source.e2",
		"prefix": "newFTrace",
		"description": "(20 OPS) function ftrace newFTrace(Nl)",
		"body": "newFTrace(${1:Nl})"
	},
	"timeConnected(e:)": {
		"scope": "source.e2",
		"prefix": "timeConnected",
		"description": "(5 OPS) function normal timeConnected(This)",
		"body": "timeConnected(${1:This})"
	},
	"round(n)": {
		"scope": "source.e2",
		"prefix": "round",
		"description": "(2 OPS) function normal round(Rv1)",
		"body": "round(${1:Rv1})"
	},
	"mass(b:)": {
		"scope": "source.e2",
		"prefix": "mass",
		"description": "(1 OPS) function normal mass(This)",
		"body": "mass(${1:This})"
	},
	"radius(xtd:)": {
		"scope": "source.e2",
		"prefix": "radius",
		"description": "(20 OPS) function normal radius(This)",
		"body": "radius(${1:This})"
	},
	"ioGetInputTracedata(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputTracedata",
		"description": "(5 OPS) function tracedata ioGetInputTracedata()",
		"body": "ioGetInputTracedata()"
	},
	"applyForce(b:v)": {
		"scope": "source.e2",
		"prefix": "applyForce",
		"description": "(30 OPS) function void applyForce(Force)",
		"body": "applyForce(${1:Force})"
	},
	"holoAnim(nsnn)": {
		"scope": "source.e2",
		"prefix": "holoAnim",
		"description": "(20 OPS) function void holoAnim(Index, Animation, Frame, Rate)",
		"body": "holoAnim(${1:Index}, ${2:Animation}, ${3:Frame}, ${4:Rate})"
	},
	"boneGravity(b:n)": {
		"scope": "source.e2",
		"prefix": "boneGravity",
		"description": "(10 OPS) function void boneGravity(Gravity)",
		"body": "boneGravity(${1:Gravity})"
	},
	"writeString(xwl:snnnnn)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y, Textcolor, Bgcolor, Flash)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor}, ${6:Flash})"
	},
	"heading(e:v)": {
		"scope": "source.e2",
		"prefix": "heading",
		"description": "(15 OPS) function angle heading(Pos)",
		"body": "heading(${1:Pos})"
	},
	"distanceLeftSolid(xrd:)": {
		"scope": "source.e2",
		"prefix": "distanceLeftSolid",
		"description": "(2 OPS) function normal distanceLeftSolid(This)",
		"body": "distanceLeftSolid(${1:This})"
	},
	"lightUnparent(n)": {
		"scope": "source.e2",
		"prefix": "lightUnparent",
		"description": "(10 OPS) function void lightUnparent(Index)",
		"body": "lightUnparent(${1:Index})"
	},
	"match(s:sn)": {
		"scope": "source.e2",
		"prefix": "match",
		"description": "(10 OPS) function array match(Pattern, Position)",
		"body": "match(${1:Pattern}, ${2:Position})"
	},
	"tuneAutoZN(xsc:nn)": {
		"scope": "source.e2",
		"prefix": "tuneAutoZN",
		"description": "(7 OPS) function stcontrol tuneAutoZN(Uk, Ut)",
		"body": "tuneAutoZN(${1:Uk}, ${2:Ut})"
	},
	"remoteUpload(e:s)": {
		"scope": "source.e2",
		"prefix": "remoteUpload",
		"description": "(1000 OPS) function void remoteUpload(Filepath)",
		"body": "remoteUpload(${1:Filepath})"
	},
	"holoDeleteAll()": {
		"scope": "source.e2",
		"prefix": "holoDeleteAll",
		"description": "(20 OPS) function void holoDeleteAll()",
		"body": "holoDeleteAll()"
	},
	"rayDiv(xft:nnn)": {
		"scope": "source.e2",
		"prefix": "rayDiv",
		"description": "(3 OPS) function ftrace rayDiv(Nx, Ny, Nz)",
		"body": "rayDiv(${1:Nx}, ${2:Ny}, ${3:Nz})"
	},
	"egpCircleOutline(xwl:nxv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpCircleOutline",
		"description": "(15 OPS) function void egpCircleOutline(Index, Pos, Size)",
		"body": "egpCircleOutline(${1:Index}, ${2:Pos}, ${3:Size})"
	},
	"getSkinCount(e:)": {
		"scope": "source.e2",
		"prefix": "getSkinCount",
		"description": "(10 OPS) function normal getSkinCount(This)",
		"body": "getSkinCount(${1:This})"
	},
	"op:idx(a=tn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function angle op:idx()",
		"body": "op:idx()"
	},
	"clamp(ann)": {
		"scope": "source.e2",
		"prefix": "clamp",
		"description": "(5 OPS) function angle clamp(Rv1, Rv2, Rv3)",
		"body": "clamp(${1:Rv1}, ${2:Rv2}, ${3:Rv3})"
	},
	"op:div(xm4n)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(5 OPS) function matrix4 op:div(Rv1, Rv2)",
		"body": "op:div(${1:Rv1}, ${2:Rv2})"
	},
	"setWindup(xsc:nn)": {
		"scope": "source.e2",
		"prefix": "setWindup",
		"description": "(3 OPS) function stcontrol setWindup(Nd, Nu)",
		"body": "setWindup(${1:Nd}, ${2:Nu})"
	},
	"eyeTraceCursor(e:)": {
		"scope": "source.e2",
		"prefix": "eyeTraceCursor",
		"description": "(20 OPS) function ranger eyeTraceCursor(This)",
		"body": "eyeTraceCursor(${1:This})"
	},
	"inrange(vvv)": {
		"scope": "source.e2",
		"prefix": "inrange",
		"description": "(5 OPS) function normal inrange(Vec, Min, Max)",
		"body": "inrange(${1:Vec}, ${2:Min}, ${3:Max})"
	},
	"op:idx(an)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(2 OPS) function normal op:idx(Index)",
		"body": "op:idx(${1:Index})"
	},
	"vec4(nnnn)": {
		"scope": "source.e2",
		"prefix": "vec4",
		"description": "(4 OPS) function vector4 vec4()",
		"body": "vec4()"
	},
	"max(t:)": {
		"scope": "source.e2",
		"prefix": "max",
		"description": "(5 OPS) function normal max(This)",
		"body": "max(${1:This})"
	},
	"ceil(n)": {
		"scope": "source.e2",
		"prefix": "ceil",
		"description": "(2 OPS) function normal ceil(Rv1)",
		"body": "ceil(${1:Rv1})"
	},
	"op:mul(na)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function angle op:mul(Rv1, Rv2)",
		"body": "op:mul(${1:Rv1}, ${2:Rv2})"
	},
	"getName(e:)": {
		"scope": "source.e2",
		"prefix": "getName",
		"description": "(5 OPS) function string getName(This)",
		"body": "getName(${1:This})"
	},
	"concat(t:s)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(Delimiter)",
		"body": "concat(${1:Delimiter})"
	},
	"concat(t:sn)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(Delimiter, Startindex)",
		"body": "concat(${1:Delimiter}, ${2:Startindex})"
	},
	"concat(t:n)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(Startindex)",
		"body": "concat(${1:Startindex})"
	},
	"writeUnicodeString(xwl:snn)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y})"
	},
	"setColor(nnn)": {
		"scope": "source.e2",
		"prefix": "setColor",
		"description": "(10 OPS) function void setColor(R, G, B)",
		"body": "setColor(${1:R}, ${2:G}, ${3:B})"
	},
	"findClearBlackModelList()": {
		"scope": "source.e2",
		"prefix": "findClearBlackModelList",
		"description": "(10 OPS) function void findClearBlackModelList()",
		"body": "findClearBlackModelList()"
	},
	"propSetVelocityInstant(e:v)": {
		"scope": "source.e2",
		"prefix": "propSetVelocityInstant",
		"description": "(10 OPS) function void propSetVelocityInstant(Velocity)",
		"body": "propSetVelocityInstant(${1:Velocity})"
	},
	"id(t:)": {
		"scope": "source.e2",
		"prefix": "id",
		"description": "(1 OPS) function string id(This)",
		"body": "id(${1:This})"
	},
	"setPowerID(xsc:xv2)": {
		"scope": "source.e2",
		"prefix": "setPowerID",
		"description": "(8 OPS) function stcontrol setPowerID(Vv)",
		"body": "setPowerID(${1:Vv})"
	},
	"op:idx(c=xgtsc)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function complex op:idx()",
		"body": "op:idx()"
	},
	"holoDeleteAll(n)": {
		"scope": "source.e2",
		"prefix": "holoDeleteAll",
		"description": "(20 OPS) function void holoDeleteAll(All)",
		"body": "holoDeleteAll(${1:All})"
	},
	"runOnTick(n)": {
		"scope": "source.e2",
		"prefix": "runOnTick",
		"description": "(1 OPS) function void runOnTick(Activate)",
		"body": "runOnTick(${1:Activate})"
	},
	"dsGetType()": {
		"scope": "source.e2",
		"prefix": "dsGetType",
		"description": "(1 OPS) function string dsGetType()",
		"body": "dsGetType()"
	},
	"comp(nn)": {
		"scope": "source.e2",
		"prefix": "comp",
		"description": "(2 OPS) function complex comp(A, B)",
		"body": "comp(${1:A}, ${2:B})"
	},
	"egpMaterial(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpMaterial",
		"description": "(5 OPS) function string egpMaterial(Index)",
		"body": "egpMaterial(${1:Index})"
	},
	"holoBoneScale(ns)": {
		"scope": "source.e2",
		"prefix": "holoBoneScale",
		"description": "(15 OPS) function vector holoBoneScale(Index, Bone)",
		"body": "holoBoneScale(${1:Index}, ${2:Bone})"
	},
	"holoClip(nvvn)": {
		"scope": "source.e2",
		"prefix": "holoClip",
		"description": "(15 OPS) function void holoClip(Index, Origin, Normal, Isglobal)",
		"body": "holoClip(${1:Index}, ${2:Origin}, ${3:Normal}, ${4:Isglobal})"
	},
	"rangerHull(nvv)": {
		"scope": "source.e2",
		"prefix": "rangerHull",
		"description": "(20 OPS) function ranger rangerHull(Distance, Mins, Maxs)",
		"body": "rangerHull(${1:Distance}, ${2:Mins}, ${3:Maxs})"
	},
	"ejectPod(e:)": {
		"scope": "source.e2",
		"prefix": "ejectPod",
		"description": "(10 OPS) function void ejectPod(This)",
		"body": "ejectPod(${1:This})"
	},
	"httpSuccess()": {
		"scope": "source.e2",
		"prefix": "httpSuccess",
		"description": "(5 OPS) function normal httpSuccess()",
		"body": "httpSuccess()"
	},
	"dsProbe(sn)": {
		"scope": "source.e2",
		"prefix": "dsProbe",
		"description": "(20 OPS) function array dsProbe(Groupname, Scope)",
		"body": "dsProbe(${1:Groupname}, ${2:Scope})"
	},
	"cameraToggle(n)": {
		"scope": "source.e2",
		"prefix": "cameraToggle",
		"description": "(2 OPS) function normal cameraToggle(Index)",
		"body": "cameraToggle(${1:Index})"
	},
	"dumpItem(xft:ss)": {
		"scope": "source.e2",
		"prefix": "dumpItem",
		"description": "(15 OPS) function ftrace dumpItem(Nt, Sn)",
		"body": "dumpItem(${1:Nt}, ${2:Sn})"
	},
	"round(a)": {
		"scope": "source.e2",
		"prefix": "round",
		"description": "(5 OPS) function angle round(Rv1)",
		"body": "round(${1:Rv1})"
	},
	"mod(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "mod",
		"description": "(13 OPS) function vector4 mod()",
		"body": "mod()"
	},
	"holoModel(nsn)": {
		"scope": "source.e2",
		"prefix": "holoModel",
		"description": "(10 OPS) function void holoModel(Index, Model, Skin)",
		"body": "holoModel(${1:Index}, ${2:Model}, ${3:Skin})"
	},
	"holoMaterial(ns)": {
		"scope": "source.e2",
		"prefix": "holoMaterial",
		"description": "(10 OPS) function void holoMaterial(Index, Material)",
		"body": "holoMaterial(${1:Index}, ${2:Material})"
	},
	"egpColor(xwl:nnnnn)": {
		"scope": "source.e2",
		"prefix": "egpColor",
		"description": "(10 OPS) function void egpColor(Index, R, G, B, A)",
		"body": "egpColor(${1:Index}, ${2:R}, ${3:G}, ${4:B}, ${5:A})"
	},
	"holoBodygroup(nnn)": {
		"scope": "source.e2",
		"prefix": "holoBodygroup",
		"description": "(10 OPS) function void holoBodygroup(Index, Bgrp_id, Bgrp_subid)",
		"body": "holoBodygroup(${1:Index}, ${2:Bgrp_id}, ${3:Bgrp_subid})"
	},
	"holoVisible(nen)": {
		"scope": "source.e2",
		"prefix": "holoVisible",
		"description": "(10 OPS) function void holoVisible(Index, Ply, Visible)",
		"body": "holoVisible(${1:Index}, ${2:Ply}, ${3:Visible})"
	},
	"killPod(e:)": {
		"scope": "source.e2",
		"prefix": "killPod",
		"description": "(10 OPS) function void killPod(This)",
		"body": "killPod(${1:This})"
	},
	"writeUnicodeString(xwl:snnnv)": {
		"scope": "source.e2",
		"prefix": "writeUnicodeString",
		"description": "(20 OPS) function void writeUnicodeString(Text, X, Y, Textcolor, Bgcolor)",
		"body": "writeUnicodeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor})"
	},
	"ioGetInputFtrace(s)": {
		"scope": "source.e2",
		"prefix": "ioGetInputFtrace",
		"description": "(5 OPS) function ftrace ioGetInputFtrace()",
		"body": "ioGetInputFtrace()"
	},
	"clamp(xv4xv4xv4)": {
		"scope": "source.e2",
		"prefix": "clamp",
		"description": "(13 OPS) function vector4 clamp()",
		"body": "clamp()"
	},
	"op:eq(nc)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(2 OPS) function normal op:eq(Lhs, Rhs)",
		"body": "op:eq(${1:Lhs}, ${2:Rhs})"
	},
	"i(q:)": {
		"scope": "source.e2",
		"prefix": "i",
		"description": "(1 OPS) function normal i(This)",
		"body": "i(${1:This})"
	},
	"concat(t:)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(This)",
		"body": "concat(${1:This})"
	},
	"writeString(xwl:snnvnn)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y, Textcolor, Bgcolor, Flash)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor}, ${5:Bgcolor}, ${6:Flash})"
	},
	"isFrozen(e:)": {
		"scope": "source.e2",
		"prefix": "isFrozen",
		"description": "(10 OPS) function normal isFrozen(This)",
		"body": "isFrozen(${1:This})"
	},
	"bone(xrd:)": {
		"scope": "source.e2",
		"prefix": "bone",
		"description": "(2 OPS) function bone bone(This)",
		"body": "bone(${1:This})"
	},
	"concat(r:)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(This)",
		"body": "concat(${1:This})"
	},
	"toString(nn)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(25 OPS) function string toString(Number, Base)",
		"body": "toString(${1:Number}, ${2:Base})"
	},
	"egpAlpha(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpAlpha",
		"description": "(5 OPS) function normal egpAlpha(Index)",
		"body": "egpAlpha(${1:Index})"
	},
	"sign(n)": {
		"scope": "source.e2",
		"prefix": "sign",
		"description": "(2 OPS) function normal sign()",
		"body": "sign()"
	},
	"op:div(xv2xv2)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function vector2 op:div()",
		"body": "op:div()"
	},
	"real(c)": {
		"scope": "source.e2",
		"prefix": "real",
		"description": "(2 OPS) function normal real(Z)",
		"body": "real(${1:Z})"
	},
	"vec2(n)": {
		"scope": "source.e2",
		"prefix": "vec2",
		"description": "(2 OPS) function vector2 vec2()",
		"body": "vec2()"
	},
	"lightCreate(nvvnn)": {
		"scope": "source.e2",
		"prefix": "lightCreate",
		"description": "(25 OPS) function void lightCreate(Index, Position, Color, Distance, Brightness)",
		"body": "lightCreate(${1:Index}, ${2:Position}, ${3:Color}, ${4:Distance}, ${5:Brightness})"
	},
	"log(cc)": {
		"scope": "source.e2",
		"prefix": "log",
		"description": "(2 OPS) function complex log(Base, Z)",
		"body": "log(${1:Base}, ${2:Z})"
	},
	"mod(nn)": {
		"scope": "source.e2",
		"prefix": "mod",
		"description": "(2 OPS) function normal mod()",
		"body": "mod()"
	},
	"boxMin(e:)": {
		"scope": "source.e2",
		"prefix": "boxMin",
		"description": "(10 OPS) function vector boxMin(This)",
		"body": "boxMin(${1:This})"
	},
	"log10(c)": {
		"scope": "source.e2",
		"prefix": "log10",
		"description": "(2 OPS) function complex log10(Z)",
		"body": "log10(${1:Z})"
	},
	"sqrt(c)": {
		"scope": "source.e2",
		"prefix": "sqrt",
		"description": "(2 OPS) function complex sqrt(Z)",
		"body": "sqrt(${1:Z})"
	},
	"setDamageType(xef:n)": {
		"scope": "source.e2",
		"prefix": "setDamageType",
		"description": "(1 OPS) function effect setDamageType(Index)",
		"body": "setDamageType(${1:Index})"
	},
	"ceil(v)": {
		"scope": "source.e2",
		"prefix": "ceil",
		"description": "(6 OPS) function vector ceil(Rv1)",
		"body": "ceil(${1:Rv1})"
	},
	"cosh(c)": {
		"scope": "source.e2",
		"prefix": "cosh",
		"description": "(3 OPS) function complex cosh(Z)",
		"body": "cosh(${1:Z})"
	},
	"atan2(c)": {
		"scope": "source.e2",
		"prefix": "atan2",
		"description": "(2 OPS) function normal atan2(Z)",
		"body": "atan2(${1:Z})"
	},
	"op:idx(xtd=rnxtd)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function tracedata op:idx()",
		"body": "op:idx()"
	},
	"roll(a:)": {
		"scope": "source.e2",
		"prefix": "roll",
		"description": "(1 OPS) function normal roll(This)",
		"body": "roll(${1:This})"
	},
	"position(xrd:)": {
		"scope": "source.e2",
		"prefix": "position",
		"description": "(2 OPS) function vector position(This)",
		"body": "position(${1:This})"
	},
	"findAllowPlayer(s)": {
		"scope": "source.e2",
		"prefix": "findAllowPlayer",
		"description": "(10 OPS) function void findAllowPlayer(Name)",
		"body": "findAllowPlayer(${1:Name})"
	},
	"sech(c)": {
		"scope": "source.e2",
		"prefix": "sech",
		"description": "(3 OPS) function complex sech(Z)",
		"body": "sech(${1:Z})"
	},
	"floor(n)": {
		"scope": "source.e2",
		"prefix": "floor",
		"description": "(2 OPS) function normal floor(Rv1)",
		"body": "floor(${1:Rv1})"
	},
	"round(xv2)": {
		"scope": "source.e2",
		"prefix": "round",
		"description": "(4 OPS) function vector2 round(Rv1)",
		"body": "round(${1:Rv1})"
	},
	"merge(r:r)": {
		"scope": "source.e2",
		"prefix": "merge",
		"description": "(1 OPS) function array merge(Other)",
		"body": "merge(${1:Other})"
	},
	"printColor(r)": {
		"scope": "source.e2",
		"prefix": "printColor",
		"description": "(100 OPS) function void printColor(Arr)",
		"body": "printColor(${1:Arr})"
	},
	"op:try()": {
		"scope": "source.e2",
		"prefix": "op:try",
		"description": "(3 OPS) function void op:try()",
		"body": "op:try()"
	},
	"op:bshr(nn)": {
		"scope": "source.e2",
		"prefix": "op:bshr",
		"description": "(2 OPS) function normal op:bshr(A, B)",
		"body": "op:bshr(${1:A}, ${2:B})"
	},
	"tickInterval()": {
		"scope": "source.e2",
		"prefix": "tickInterval",
		"description": "(1 OPS) function normal tickInterval()",
		"body": "tickInterval()"
	},
	"setRanger(r:nxrd)": {
		"scope": "source.e2",
		"prefix": "setRanger",
		"description": "(5 OPS) function ranger setRanger()",
		"body": "setRanger()"
	},
	"rayFaceIntersection(vvvvvn)": {
		"scope": "source.e2",
		"prefix": "rayFaceIntersection",
		"description": "(20 OPS) function vector rayFaceIntersection(Start, Dir, Pos, Normal, Size, Ang)",
		"body": "rayFaceIntersection(${1:Start}, ${2:Dir}, ${3:Pos}, ${4:Normal}, ${5:Size}, ${6:Ang})"
	},
	"atan(c)": {
		"scope": "source.e2",
		"prefix": "atan",
		"description": "(5 OPS) function complex atan(Z)",
		"body": "atan(${1:Z})"
	},
	"gRemoveAllWirelinks(s)": {
		"scope": "source.e2",
		"prefix": "gRemoveAllWirelinks",
		"description": "(5 OPS) function void gRemoveAllWirelinks()",
		"body": "gRemoveAllWirelinks()"
	},
	"column(xm4:n)": {
		"scope": "source.e2",
		"prefix": "column",
		"description": "(5 OPS) function vector4 column(Rv2)",
		"body": "column(${1:Rv2})"
	},
	"op:eq(xv4xv4)": {
		"scope": "source.e2",
		"prefix": "op:eq",
		"description": "(4 OPS) function normal op:eq()",
		"body": "op:eq()"
	},
	"toAngle(xv2:)": {
		"scope": "source.e2",
		"prefix": "toAngle",
		"description": "(2 OPS) function normal toAngle()",
		"body": "toAngle()"
	},
	"op:mul(qn)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(4 OPS) function quaternion op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"op:idx(xwl=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function wirelink op:idx()",
		"body": "op:idx()"
	},
	"pop(r:)": {
		"scope": "source.e2",
		"prefix": "pop",
		"description": "(2 OPS) function normal pop(This)",
		"body": "pop(${1:This})"
	},
	"egpPos(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpPos",
		"description": "(5 OPS) function vector2 egpPos(Index)",
		"body": "egpPos(${1:Index})"
	},
	"remove(t:s)": {
		"scope": "source.e2",
		"prefix": "remove",
		"description": "(5 OPS) function normal remove(Index)",
		"body": "remove(${1:Index})"
	},
	"remGainPD(xsc:)": {
		"scope": "source.e2",
		"prefix": "remGainPD",
		"description": "(7 OPS) function stcontrol remGainPD(This)",
		"body": "remGainPD(${1:This})"
	},
	"runOnKeys(enr)": {
		"scope": "source.e2",
		"prefix": "runOnKeys",
		"description": "(20 OPS) function void runOnKeys(Ply, On, Filter)",
		"body": "runOnKeys(${1:Ply}, ${2:On}, ${3:Filter})"
	},
	"getCopy(xft:vn)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Vp, Nl)",
		"body": "getCopy(${1:Vp}, ${2:Nl})"
	},
	"op:div(cq)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(9 OPS) function quaternion op:div(Lhs, Rhs)",
		"body": "op:div(${1:Lhs}, ${2:Rhs})"
	},
	"remGainID(xsc:)": {
		"scope": "source.e2",
		"prefix": "remGainID",
		"description": "(7 OPS) function stcontrol remGainID(This)",
		"body": "remGainID(${1:This})"
	},
	"op:mul(cn)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(2 OPS) function complex op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"op:leq(ss)": {
		"scope": "source.e2",
		"prefix": "op:leq",
		"description": "(3 OPS) function normal op:leq()",
		"body": "op:leq()"
	},
	"dumpItem(xsc:n)": {
		"scope": "source.e2",
		"prefix": "dumpItem",
		"description": "(15 OPS) function stcontrol dumpItem(Nn)",
		"body": "dumpItem(${1:Nn})"
	},
	"j(q:)": {
		"scope": "source.e2",
		"prefix": "j",
		"description": "(1 OPS) function normal j(This)",
		"body": "j(${1:This})"
	},
	"boxSize(e:)": {
		"scope": "source.e2",
		"prefix": "boxSize",
		"description": "(10 OPS) function vector boxSize(This)",
		"body": "boxSize(${1:This})"
	},
	"getStartPos(xft:)": {
		"scope": "source.e2",
		"prefix": "getStartPos",
		"description": "(8 OPS) function vector getStartPos(This)",
		"body": "getStartPos(${1:This})"
	},
	"shootPos(e:)": {
		"scope": "source.e2",
		"prefix": "shootPos",
		"description": "(8 OPS) function vector shootPos(This)",
		"body": "shootPos(${1:This})"
	},
	"propInertia(e:v)": {
		"scope": "source.e2",
		"prefix": "propInertia",
		"description": "(10 OPS) function void propInertia(Inertia)",
		"body": "propInertia(${1:Inertia})"
	},
	"op:sub(cq)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(4 OPS) function quaternion op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"toString(v:)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(5 OPS) function string toString(V)",
		"body": "toString(${1:V})"
	},
	"op:include()": {
		"scope": "source.e2",
		"prefix": "op:include",
		"description": "(3 OPS) function void op:include()",
		"body": "op:include()"
	},
	"dot(q:q)": {
		"scope": "source.e2",
		"prefix": "dot",
		"description": "(15 OPS) function normal dot(Q1)",
		"body": "dot(${1:Q1})"
	},
	"egpFont(xwl:ns)": {
		"scope": "source.e2",
		"prefix": "egpFont",
		"description": "(10 OPS) function void egpFont(Index, Font)",
		"body": "egpFont(${1:Index}, ${2:Font})"
	},
	"toNumber(s:)": {
		"scope": "source.e2",
		"prefix": "toNumber",
		"description": "(20 OPS) function normal toNumber(This)",
		"body": "toNumber(${1:This})"
	},
	"print(ns)": {
		"scope": "source.e2",
		"prefix": "print",
		"description": "(100 OPS) function void print(Print_type, Text)",
		"body": "print(${1:Print_type}, ${2:Text})"
	},
	"lastSaid(e:)": {
		"scope": "source.e2",
		"prefix": "lastSaid",
		"description": "(3 OPS) function string lastSaid(This)",
		"body": "lastSaid(${1:This})"
	},
	"shiftR(a)": {
		"scope": "source.e2",
		"prefix": "shiftR",
		"description": "(2 OPS) function angle shiftR(Rv1)",
		"body": "shiftR(${1:Rv1})"
	},
	"egpToWorld(xwl:xv2)": {
		"scope": "source.e2",
		"prefix": "egpToWorld",
		"description": "(20 OPS) function vector egpToWorld(Pos)",
		"body": "egpToWorld(${1:Pos})"
	},
	"op:mul(xm4xm4)": {
		"scope": "source.e2",
		"prefix": "op:mul",
		"description": "(5 OPS) function matrix4 op:mul(Lhs, Rhs)",
		"body": "op:mul(${1:Lhs}, ${2:Rhs})"
	},
	"holoEntity(n)": {
		"scope": "source.e2",
		"prefix": "holoEntity",
		"description": "(2 OPS) function entity holoEntity(Index)",
		"body": "holoEntity(${1:Index})"
	},
	"tanh(c)": {
		"scope": "source.e2",
		"prefix": "tanh",
		"description": "(4 OPS) function complex tanh(Z)",
		"body": "tanh(${1:Z})"
	},
	"findInSphere(vn)": {
		"scope": "source.e2",
		"prefix": "findInSphere",
		"description": "(30 OPS) function normal findInSphere(Center, Radius)",
		"body": "findInSphere(${1:Center}, ${2:Radius})"
	},
	"findClipFromEntities(r)": {
		"scope": "source.e2",
		"prefix": "findClipFromEntities",
		"description": "(5 OPS) function normal findClipFromEntities(Entities)",
		"body": "findClipFromEntities(${1:Entities})"
	},
	"ang()": {
		"scope": "source.e2",
		"prefix": "ang",
		"description": "(1 OPS) function angle ang()",
		"body": "ang()"
	},
	"findRE(s:sn)": {
		"scope": "source.e2",
		"prefix": "findRE",
		"description": "(20 OPS) function normal findRE(Pattern, Start)",
		"body": "findRE(${1:Pattern}, ${2:Start})"
	},
	"hsv2rgb(v)": {
		"scope": "source.e2",
		"prefix": "hsv2rgb",
		"description": "(2 OPS) function vector hsv2rgb(Hsv)",
		"body": "hsv2rgb(${1:Hsv})"
	},
	"applyForce(v)": {
		"scope": "source.e2",
		"prefix": "applyForce",
		"description": "(30 OPS) function void applyForce(Force)",
		"body": "applyForce(${1:Force})"
	},
	"op:idx(xef=es)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function effect op:idx()",
		"body": "op:idx()"
	},
	"count(r:)": {
		"scope": "source.e2",
		"prefix": "count",
		"description": "(3 OPS) function normal count(This)",
		"body": "count(${1:This})"
	},
	"dsClk(s)": {
		"scope": "source.e2",
		"prefix": "dsClk",
		"description": "(1 OPS) function normal dsClk(Name)",
		"body": "dsClk(${1:Name})"
	},
	"rotationVector(q)": {
		"scope": "source.e2",
		"prefix": "rotationVector",
		"description": "(9 OPS) function vector rotationVector(Q)",
		"body": "rotationVector(${1:Q})"
	},
	"swapColumns(xm4:nn)": {
		"scope": "source.e2",
		"prefix": "swapColumns",
		"description": "(5 OPS) function matrix4 swapColumns(Rv2, Rv3)",
		"body": "swapColumns(${1:Rv2}, ${2:Rv3})"
	},
	"log(nn)": {
		"scope": "source.e2",
		"prefix": "log",
		"description": "(2 OPS) function normal log()",
		"body": "log()"
	},
	"quat(nnnn)": {
		"scope": "source.e2",
		"prefix": "quat",
		"description": "(1 OPS) function quaternion quat(Real, I, J, K)",
		"body": "quat(${1:Real}, ${2:I}, ${3:J}, ${4:K})"
	},
	"egpOrigin(xwl:)": {
		"scope": "source.e2",
		"prefix": "egpOrigin",
		"description": "(10 OPS) function vector2 egpOrigin(This)",
		"body": "egpOrigin(${1:This})"
	},
	"egpLoadFrame(xwl:s)": {
		"scope": "source.e2",
		"prefix": "egpLoadFrame",
		"description": "(15 OPS) function void egpLoadFrame(Index)",
		"body": "egpLoadFrame(${1:Index})"
	},
	"op:idx(xv2nn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(2 OPS) function normal op:idx(Index, Value)",
		"body": "op:idx(${1:Index}, ${2:Value})"
	},
	"op:sub(xm2xm2)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(5 OPS) function matrix2 op:sub(Rv1, Rv2)",
		"body": "op:sub(${1:Rv1}, ${2:Rv2})"
	},
	"minquota()": {
		"scope": "source.e2",
		"prefix": "minquota",
		"description": "(1 OPS) function normal minquota()",
		"body": "minquota()"
	},
	"egpBox(xwl:nxv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpBox",
		"description": "(15 OPS) function void egpBox(Index, Pos, Size)",
		"body": "egpBox(${1:Index}, ${2:Pos}, ${3:Size})"
	},
	"bearing(b:v)": {
		"scope": "source.e2",
		"prefix": "bearing",
		"description": "(1 OPS) function normal bearing(Pos)",
		"body": "bearing(${1:Pos})"
	},
	"toString(xv4)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(7 OPS) function string toString(V)",
		"body": "toString(${1:V})"
	},
	"distance(xrd:)": {
		"scope": "source.e2",
		"prefix": "distance",
		"description": "(2 OPS) function normal distance(This)",
		"body": "distance(${1:This})"
	},
	"pointContents(v)": {
		"scope": "source.e2",
		"prefix": "pointContents",
		"description": "(15 OPS) function string pointContents(Point)",
		"body": "pointContents(${1:Point})"
	},
	"removing()": {
		"scope": "source.e2",
		"prefix": "removing",
		"description": "(1 OPS) function normal removing()",
		"body": "removing()"
	},
	"setCollideGroup(xft:n)": {
		"scope": "source.e2",
		"prefix": "setCollideGroup",
		"description": "(3 OPS) function ftrace setCollideGroup(Nn)",
		"body": "setCollideGroup(${1:Nn})"
	},
	"findClearBlackEntityList()": {
		"scope": "source.e2",
		"prefix": "findClearBlackEntityList",
		"description": "(10 OPS) function void findClearBlackEntityList()",
		"body": "findClearBlackEntityList()"
	},
	"egpWedge(xwl:nxv2xv2)": {
		"scope": "source.e2",
		"prefix": "egpWedge",
		"description": "(15 OPS) function void egpWedge(Index, Pos, Size)",
		"body": "egpWedge(${1:Index}, ${2:Pos}, ${3:Size})"
	},
	"softQuota()": {
		"scope": "source.e2",
		"prefix": "softQuota",
		"description": "(1 OPS) function normal softQuota()",
		"body": "softQuota()"
	},
	"egpPos(xwl:nxv2)": {
		"scope": "source.e2",
		"prefix": "egpPos",
		"description": "(10 OPS) function void egpPos(Index, Pos)",
		"body": "egpPos(${1:Index}, ${2:Pos})"
	},
	"applyTorque(v)": {
		"scope": "source.e2",
		"prefix": "applyTorque",
		"description": "(30 OPS) function void applyTorque(Torque)",
		"body": "applyTorque(${1:Torque})"
	},
	"egpColor(xwl:nv)": {
		"scope": "source.e2",
		"prefix": "egpColor",
		"description": "(10 OPS) function void egpColor(Index, Color)",
		"body": "egpColor(${1:Index}, ${2:Color})"
	},
	"getDirLocal(xft:e)": {
		"scope": "source.e2",
		"prefix": "getDirLocal",
		"description": "(3 OPS) function vector getDirLocal(Ve)",
		"body": "getDirLocal(${1:Ve})"
	},
	"op:sub(qq)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(4 OPS) function quaternion op:sub(Lhs, Rhs)",
		"body": "op:sub(${1:Lhs}, ${2:Rhs})"
	},
	"egpSizeNum(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpSizeNum",
		"description": "(5 OPS) function normal egpSizeNum(Index)",
		"body": "egpSizeNum(${1:Index})"
	},
	"egpHasObject(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpHasObject",
		"description": "(15 OPS) function normal egpHasObject(Index)",
		"body": "egpHasObject(${1:Index})"
	},
	"toString(xv2)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(5 OPS) function string toString(V)",
		"body": "toString(${1:V})"
	},
	"egpParentToCursor(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpParentToCursor",
		"description": "(10 OPS) function void egpParentToCursor(Index)",
		"body": "egpParentToCursor(${1:Index})"
	},
	"op:mod(nn)": {
		"scope": "source.e2",
		"prefix": "op:mod",
		"description": "(1 OPS) function normal op:mod()",
		"body": "op:mod()"
	},
	"max(vv)": {
		"scope": "source.e2",
		"prefix": "max",
		"description": "(10 OPS) function vector max(Rv1, Rv2)",
		"body": "max(${1:Rv1}, ${2:Rv2})"
	},
	"playerConnectClk()": {
		"scope": "source.e2",
		"prefix": "playerConnectClk",
		"description": "(3 OPS) function normal playerConnectClk()",
		"body": "playerConnectClk()"
	},
	"soundVolume(snn)": {
		"scope": "source.e2",
		"prefix": "soundVolume",
		"description": "(5 OPS) function void soundVolume(Index, Volume, Fadetime)",
		"body": "soundVolume(${1:Index}, ${2:Volume}, ${3:Fadetime})"
	},
	"min(vv)": {
		"scope": "source.e2",
		"prefix": "min",
		"description": "(10 OPS) function vector min(Rv1, Rv2)",
		"body": "min(${1:Rv1}, ${2:Rv2})"
	},
	"qi()": {
		"scope": "source.e2",
		"prefix": "qi",
		"description": "(1 OPS) function quaternion qi()",
		"body": "qi()"
	},
	"writeTable(xwl:nt)": {
		"scope": "source.e2",
		"prefix": "writeTable",
		"description": "(20 OPS) function normal writeTable(Address, Data)",
		"body": "writeTable(${1:Address}, ${2:Data})"
	},
	"holoClipEnabled(nn)": {
		"scope": "source.e2",
		"prefix": "holoClipEnabled",
		"description": "(15 OPS) function void holoClipEnabled(Index, Enabled)",
		"body": "holoClipEnabled(${1:Index}, ${2:Enabled})"
	},
	"smpLocal(xft:a)": {
		"scope": "source.e2",
		"prefix": "smpLocal",
		"description": "(12 OPS) function ftrace smpLocal(Va)",
		"body": "smpLocal(${1:Va})"
	},
	"op:neq(mm)": {
		"scope": "source.e2",
		"prefix": "op:neq",
		"description": "(5 OPS) function normal op:neq(Rv1, Rv2)",
		"body": "op:neq(${1:Rv1}, ${2:Rv2})"
	},
	"toWorld(b:v)": {
		"scope": "source.e2",
		"prefix": "toWorld",
		"description": "(1 OPS) function vector toWorld(Pos)",
		"body": "toWorld(${1:Pos})"
	},
	"toString(c:)": {
		"scope": "source.e2",
		"prefix": "toString",
		"description": "(15 OPS) function string toString(This)",
		"body": "toString(${1:This})"
	},
	"bones(e:)": {
		"scope": "source.e2",
		"prefix": "bones",
		"description": "(3 OPS) function array bones(This)",
		"body": "bones(${1:This})"
	},
	"quat(v)": {
		"scope": "source.e2",
		"prefix": "quat",
		"description": "(1 OPS) function quaternion quat(Imag)",
		"body": "quat(${1:Imag})"
	},
	"op:add(ss)": {
		"scope": "source.e2",
		"prefix": "op:add",
		"description": "(10 OPS) function string op:add()",
		"body": "op:add()"
	},
	"egpRunOnQueue(xwl:n)": {
		"scope": "source.e2",
		"prefix": "egpRunOnQueue",
		"description": "(10 OPS) function void egpRunOnQueue(Yesno)",
		"body": "egpRunOnQueue(${1:Yesno})"
	},
	"keyAttack2(e:)": {
		"scope": "source.e2",
		"prefix": "keyAttack2",
		"description": "(2 OPS) function normal keyAttack2(This)",
		"body": "keyAttack2(${1:This})"
	},
	"op:return()": {
		"scope": "source.e2",
		"prefix": "op:return",
		"description": "(2 OPS) function void op:return()",
		"body": "op:return()"
	},
	"effect(xwl:s)": {
		"scope": "source.e2",
		"prefix": "effect",
		"description": "(5 OPS) function effect effect()",
		"body": "effect()"
	},
	"gTable(s)": {
		"scope": "source.e2",
		"prefix": "gTable",
		"description": "(1 OPS) function gtable gTable(Groupname)",
		"body": "gTable(${1:Groupname})"
	},
	"cameraAng(na)": {
		"scope": "source.e2",
		"prefix": "cameraAng",
		"description": "(10 OPS) function void cameraAng(Index, Ang)",
		"body": "cameraAng(${1:Index}, ${2:Ang})"
	},
	"holoClip(nnvve)": {
		"scope": "source.e2",
		"prefix": "holoClip",
		"description": "(15 OPS) function void holoClip(Index, Clipidx, Origin, Normal, Localent)",
		"body": "holoClip(${1:Index}, ${2:Clipidx}, ${3:Origin}, ${4:Normal}, ${5:Localent})"
	},
	"cameraZoom(n)": {
		"scope": "source.e2",
		"prefix": "cameraZoom",
		"description": "(2 OPS) function normal cameraZoom(Index)",
		"body": "cameraZoom(${1:Index})"
	},
	"weapon(e:)": {
		"scope": "source.e2",
		"prefix": "weapon",
		"description": "(2 OPS) function entity weapon(This)",
		"body": "weapon(${1:This})"
	},
	"comp(n)": {
		"scope": "source.e2",
		"prefix": "comp",
		"description": "(2 OPS) function complex comp(A)",
		"body": "comp(${1:A})"
	},
	"type(e:)": {
		"scope": "source.e2",
		"prefix": "type",
		"description": "(5 OPS) function string type(This)",
		"body": "type(${1:This})"
	},
	"getAlpha(e:)": {
		"scope": "source.e2",
		"prefix": "getAlpha",
		"description": "(2 OPS) function normal getAlpha(This)",
		"body": "getAlpha(${1:This})"
	},
	"owner(xtd:)": {
		"scope": "source.e2",
		"prefix": "owner",
		"description": "(20 OPS) function entity owner(This)",
		"body": "owner(${1:This})"
	},
	"hydraulic(nevevnnsnn)": {
		"scope": "source.e2",
		"prefix": "hydraulic",
		"description": "(30 OPS) function void hydraulic(Index, Ent1, V1, Ent2, V2, Constant, Damping, Mat, Width, Stretch)",
		"body": "hydraulic(${1:Index}, ${2:Ent1}, ${3:V1}, ${4:Ent2}, ${5:V2}, ${6:Constant}, ${7:Damping}, ${8:Mat}, ${9:Width}, ${10:Stretch})"
	},
	"op:idx(xft=xwlsxft)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function ftrace op:idx()",
		"body": "op:idx()"
	},
	"up(e:)": {
		"scope": "source.e2",
		"prefix": "up",
		"description": "(5 OPS) function vector up(This)",
		"body": "up(${1:This})"
	},
	"op:is(r)": {
		"scope": "source.e2",
		"prefix": "op:is",
		"description": "(1 OPS) function normal op:is(Arr)",
		"body": "op:is(${1:Arr})"
	},
	"matrix2(m)": {
		"scope": "source.e2",
		"prefix": "matrix2",
		"description": "(5 OPS) function matrix2 matrix2(Rv1)",
		"body": "matrix2(${1:Rv1})"
	},
	"setHitBox(xef:n)": {
		"scope": "source.e2",
		"prefix": "setHitBox",
		"description": "(1 OPS) function effect setHitBox(Index)",
		"body": "setHitBox(${1:Index})"
	},
	"rangerAngle(nnn)": {
		"scope": "source.e2",
		"prefix": "rangerAngle",
		"description": "(20 OPS) function ranger rangerAngle(Distance, Xangle, Yangle)",
		"body": "rangerAngle(${1:Distance}, ${2:Xangle}, ${3:Yangle})"
	},
	"hostip()": {
		"scope": "source.e2",
		"prefix": "hostip",
		"description": "(1 OPS) function string hostip()",
		"body": "hostip()"
	},
	"concat(r:n)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(Startindex)",
		"body": "concat(${1:Startindex})"
	},
	"teamPlayers(n:)": {
		"scope": "source.e2",
		"prefix": "teamPlayers",
		"description": "(10 OPS) function normal teamPlayers(This)",
		"body": "teamPlayers(${1:This})"
	},
	"array(...)": {
		"scope": "source.e2",
		"prefix": "array",
		"description": "(1 OPS) function array array()",
		"body": "array()"
	},
	"fileList(s)": {
		"scope": "source.e2",
		"prefix": "fileList",
		"description": "(20 OPS) function void fileList(Dir)",
		"body": "fileList(${1:Dir})"
	},
	"op:idx(n=tnn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function normal op:idx()",
		"body": "op:idx()"
	},
	"op:fea(sxwlt)": {
		"scope": "source.e2",
		"prefix": "op:fea",
		"description": "(20 OPS) function void op:fea()",
		"body": "op:fea()"
	},
	"op:dec(n)": {
		"scope": "source.e2",
		"prefix": "op:dec",
		"description": "(1.5 OPS) function void op:dec()",
		"body": "op:dec()"
	},
	"dsSend(ssnxm2)": {
		"scope": "source.e2",
		"prefix": "dsSend",
		"description": "(20 OPS) function normal dsSend()",
		"body": "dsSend()"
	},
	"op:idx(xsc=rn)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function stcontrol op:idx()",
		"body": "op:idx()"
	},
	"popEntity(t:)": {
		"scope": "source.e2",
		"prefix": "popEntity",
		"description": "(10 OPS) function entity popEntity()",
		"body": "popEntity()"
	},
	"isConstrainedTo(e:)": {
		"scope": "source.e2",
		"prefix": "isConstrainedTo",
		"description": "(5 OPS) function entity isConstrainedTo(This)",
		"body": "isConstrainedTo(${1:This})"
	},
	"quat(e)": {
		"scope": "source.e2",
		"prefix": "quat",
		"description": "(15 OPS) function quaternion quat(Ent)",
		"body": "quat(${1:Ent})"
	},
	"addHitOnly(xft:ss)": {
		"scope": "source.e2",
		"prefix": "addHitOnly",
		"description": "(3 OPS) function ftrace addHitOnly(Sm, Vs)",
		"body": "addHitOnly(${1:Sm}, ${2:Vs})"
	},
	"rayNudge(xft:)": {
		"scope": "source.e2",
		"prefix": "rayNudge",
		"description": "(3 OPS) function ftrace rayNudge(This)",
		"body": "rayNudge(${1:This})"
	},
	"pushVector4(r:xv4)": {
		"scope": "source.e2",
		"prefix": "pushVector4",
		"description": "(7 OPS) function vector4 pushVector4()",
		"body": "pushVector4()"
	},
	"rayMul(xft:n)": {
		"scope": "source.e2",
		"prefix": "rayMul",
		"description": "(3 OPS) function ftrace rayMul(Nn)",
		"body": "rayMul(${1:Nn})"
	},
	"signalClk()": {
		"scope": "source.e2",
		"prefix": "signalClk",
		"description": "(1 OPS) function normal signalClk()",
		"body": "signalClk()"
	},
	"getBase(xft:)": {
		"scope": "source.e2",
		"prefix": "getBase",
		"description": "(3 OPS) function entity getBase(This)",
		"body": "getBase(${1:This})"
	},
	"writeString(xwl:snnv)": {
		"scope": "source.e2",
		"prefix": "writeString",
		"description": "(20 OPS) function void writeString(Text, X, Y, Textcolor)",
		"body": "writeString(${1:Text}, ${2:X}, ${3:Y}, ${4:Textcolor})"
	},
	"op:lth(aa)": {
		"scope": "source.e2",
		"prefix": "op:lth",
		"description": "(3 OPS) function normal op:lth(Rv1, Rv2)",
		"body": "op:lth(${1:Rv1}, ${2:Rv2})"
	},
	"setAlpha(e:n)": {
		"scope": "source.e2",
		"prefix": "setAlpha",
		"description": "(2 OPS) function void setAlpha(A)",
		"body": "setAlpha(${1:A})"
	},
	"getPosLocal(xft:e)": {
		"scope": "source.e2",
		"prefix": "getPosLocal",
		"description": "(3 OPS) function vector getPosLocal(Ve)",
		"body": "getPosLocal(${1:Ve})"
	},
	"quat(a)": {
		"scope": "source.e2",
		"prefix": "quat",
		"description": "(6 OPS) function quaternion quat(Ang)",
		"body": "quat(${1:Ang})"
	},
	"getDirWorld(xft:e)": {
		"scope": "source.e2",
		"prefix": "getDirWorld",
		"description": "(3 OPS) function vector getDirWorld(Ve)",
		"body": "getDirWorld(${1:Ve})"
	},
	"vec4(xv2nn)": {
		"scope": "source.e2",
		"prefix": "vec4",
		"description": "(4 OPS) function vector4 vec4()",
		"body": "vec4()"
	},
	"hit(xrd:)": {
		"scope": "source.e2",
		"prefix": "hit",
		"description": "(2 OPS) function normal hit(This)",
		"body": "hit(${1:This})"
	},
	"weldAng(eve)": {
		"scope": "source.e2",
		"prefix": "weldAng",
		"description": "(30 OPS) function void weldAng(Ent1, V, Ent2)",
		"body": "weldAng(${1:Ent1}, ${2:V}, ${3:Ent2})"
	},
	"smpLocal(xft:)": {
		"scope": "source.e2",
		"prefix": "smpLocal",
		"description": "(12 OPS) function ftrace smpLocal(This)",
		"body": "smpLocal(${1:This})"
	},
	"removeTable(xgt:s)": {
		"scope": "source.e2",
		"prefix": "removeTable",
		"description": "(5 OPS) function table removeTable()",
		"body": "removeTable()"
	},
	"getCopy(xft:vv)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Vp, Vd)",
		"body": "getCopy(${1:Vp}, ${2:Vd})"
	},
	"gTableSafe(n)": {
		"scope": "source.e2",
		"prefix": "gTableSafe",
		"description": "(1 OPS) function gtable gTableSafe(Shared)",
		"body": "gTableSafe(${1:Shared})"
	},
	"isHitSky(xft:)": {
		"scope": "source.e2",
		"prefix": "isHitSky",
		"description": "(3 OPS) function normal isHitSky(This)",
		"body": "isHitSky(${1:This})"
	},
	"ceil(a)": {
		"scope": "source.e2",
		"prefix": "ceil",
		"description": "(5 OPS) function angle ceil(Rv1)",
		"body": "ceil(${1:Rv1})"
	},
	"normalized(xv4:)": {
		"scope": "source.e2",
		"prefix": "normalized",
		"description": "(7 OPS) function vector4 normalized()",
		"body": "normalized()"
	},
	"egpQueue()": {
		"scope": "source.e2",
		"prefix": "egpQueue",
		"description": "(10 OPS) function normal egpQueue()",
		"body": "egpQueue()"
	},
	"diagonal(xm2)": {
		"scope": "source.e2",
		"prefix": "diagonal",
		"description": "(5 OPS) function vector2 diagonal(Rv1)",
		"body": "diagonal(${1:Rv1})"
	},
	"playersSuperAdmins()": {
		"scope": "source.e2",
		"prefix": "playersSuperAdmins",
		"description": "(10 OPS) function array playersSuperAdmins()",
		"body": "playersSuperAdmins()"
	},
	"signalClk(ssn)": {
		"scope": "source.e2",
		"prefix": "signalClk",
		"description": "(1 OPS) function normal signalClk(Group, Name, Scope)",
		"body": "signalClk(${1:Group}, ${2:Name}, ${3:Scope})"
	},
	"lightCreate(nvv)": {
		"scope": "source.e2",
		"prefix": "lightCreate",
		"description": "(25 OPS) function void lightCreate(Index, Position, Color)",
		"body": "lightCreate(${1:Index}, ${2:Position}, ${3:Color})"
	},
	"setY(xv2:n)": {
		"scope": "source.e2",
		"prefix": "setY",
		"description": "(1 OPS) function vector2 setY()",
		"body": "setY()"
	},
	"setFTrace(e:vvn)": {
		"scope": "source.e2",
		"prefix": "setFTrace",
		"description": "(20 OPS) function ftrace setFTrace(Vp, Vd, Nl)",
		"body": "setFTrace(${1:Vp}, ${2:Vd}, ${3:Nl})"
	},
	"lightPos(n)": {
		"scope": "source.e2",
		"prefix": "lightPos",
		"description": "(5 OPS) function vector lightPos(Index)",
		"body": "lightPos(${1:Index})"
	},
	"matrix4()": {
		"scope": "source.e2",
		"prefix": "matrix4",
		"description": "(1 OPS) function matrix4 matrix4()",
		"body": "matrix4()"
	},
	"gSetAng(sa)": {
		"scope": "source.e2",
		"prefix": "gSetAng",
		"description": "(8 OPS) function void gSetAng()",
		"body": "gSetAng()"
	},
	"op:idx(s=rns)": {
		"scope": "source.e2",
		"prefix": "op:idx",
		"description": "(5 OPS) function string op:idx()",
		"body": "op:idx()"
	},
	"lockPod(e:n)": {
		"scope": "source.e2",
		"prefix": "lockPod",
		"description": "(10 OPS) function void lockPod(Lock)",
		"body": "lockPod(${1:Lock})"
	},
	"bNot(nn)": {
		"scope": "source.e2",
		"prefix": "bNot",
		"description": "(2 OPS) function normal bNot(N, Bits)",
		"body": "bNot(${1:N}, ${2:Bits})"
	},
	"lightBrightness(n)": {
		"scope": "source.e2",
		"prefix": "lightBrightness",
		"description": "(2 OPS) function normal lightBrightness(Index)",
		"body": "lightBrightness(${1:Index})"
	},
	"gDeleteStr(n)": {
		"scope": "source.e2",
		"prefix": "gDeleteStr",
		"description": "(8 OPS) function string gDeleteStr()",
		"body": "gDeleteStr()"
	},
	"propSpawn(svan)": {
		"scope": "source.e2",
		"prefix": "propSpawn",
		"description": "(40 OPS) function entity propSpawn(Model, Pos, Rot, Frozen)",
		"body": "propSpawn(${1:Model}, ${2:Pos}, ${3:Rot}, ${4:Frozen})"
	},
	"dumpItem(xft:sn)": {
		"scope": "source.e2",
		"prefix": "dumpItem",
		"description": "(15 OPS) function ftrace dumpItem(Nt, Nn)",
		"body": "dumpItem(${1:Nt}, ${2:Nn})"
	},
	"mix(xv4xv4n)": {
		"scope": "source.e2",
		"prefix": "mix",
		"description": "(13 OPS) function vector4 mix()",
		"body": "mix()"
	},
	"concat(r:snn)": {
		"scope": "source.e2",
		"prefix": "concat",
		"description": "(1 OPS) function string concat(Delimiter, Startindex, Endindex)",
		"body": "concat(${1:Delimiter}, ${2:Startindex}, ${3:Endindex})"
	},
	"op:band(nn)": {
		"scope": "source.e2",
		"prefix": "op:band",
		"description": "(2 OPS) function normal op:band(A, B)",
		"body": "op:band(${1:A}, ${2:B})"
	},
	"qk(n)": {
		"scope": "source.e2",
		"prefix": "qk",
		"description": "(1 OPS) function quaternion qk(N)",
		"body": "qk(${1:N})"
	},
	"clamp(vvv)": {
		"scope": "source.e2",
		"prefix": "clamp",
		"description": "(10 OPS) function vector clamp(Value, Min, Max)",
		"body": "clamp(${1:Value}, ${2:Min}, ${3:Max})"
	},
	"cot(c)": {
		"scope": "source.e2",
		"prefix": "cot",
		"description": "(3 OPS) function complex cot(Z)",
		"body": "cot(${1:Z})"
	},
	"setGainPI(xsc:nn)": {
		"scope": "source.e2",
		"prefix": "setGainPI",
		"description": "(7 OPS) function stcontrol setGainPI(Np, Ni)",
		"body": "setGainPI(${1:Np}, ${2:Ni})"
	},
	"setGainPD(xsc:nn)": {
		"scope": "source.e2",
		"prefix": "setGainPD",
		"description": "(7 OPS) function stcontrol setGainPD(Np, Nd)",
		"body": "setGainPD(${1:Np}, ${2:Nd})"
	},
	"printColorC(r)": {
		"scope": "source.e2",
		"prefix": "printColorC",
		"description": "(100 OPS) function void printColorC(Arr)",
		"body": "printColorC(${1:Arr})"
	},
	"remGainPI(xsc:)": {
		"scope": "source.e2",
		"prefix": "remGainPI",
		"description": "(7 OPS) function stcontrol remGainPI(This)",
		"body": "remGainPI(${1:This})"
	},
	"unshiftEntity(r:e)": {
		"scope": "source.e2",
		"prefix": "unshiftEntity",
		"description": "(7 OPS) function entity unshiftEntity()",
		"body": "unshiftEntity()"
	},
	"getType(xsc:)": {
		"scope": "source.e2",
		"prefix": "getType",
		"description": "(3 OPS) function string getType(This)",
		"body": "getType(${1:This})"
	},
	"op:sub(xm4xm4)": {
		"scope": "source.e2",
		"prefix": "op:sub",
		"description": "(5 OPS) function matrix4 op:sub(Rv1, Rv2)",
		"body": "op:sub(${1:Rv1}, ${2:Rv2})"
	},
	"op:div(aa)": {
		"scope": "source.e2",
		"prefix": "op:div",
		"description": "(2 OPS) function angle op:div(Rv1, Rv2)",
		"body": "op:div(${1:Rv1}, ${2:Rv2})"
	},
	"remWindup(xsc:)": {
		"scope": "source.e2",
		"prefix": "remWindup",
		"description": "(3 OPS) function stcontrol remWindup(This)",
		"body": "remWindup(${1:This})"
	},
	"isConstrainedTo(e:s)": {
		"scope": "source.e2",
		"prefix": "isConstrainedTo",
		"description": "(5 OPS) function entity isConstrainedTo(Constrainttype)",
		"body": "isConstrainedTo(${1:Constrainttype})"
	},
	"getControlTermP(xsc:)": {
		"scope": "source.e2",
		"prefix": "getControlTermP",
		"description": "(3 OPS) function normal getControlTermP(This)",
		"body": "getControlTermP(${1:This})"
	},
	"bezier(vvvn)": {
		"scope": "source.e2",
		"prefix": "bezier",
		"description": "(10 OPS) function vector bezier(Startvec, Control, Endvec, Ratio)",
		"body": "bezier(${1:Startvec}, ${2:Control}, ${3:Endvec}, ${4:Ratio})"
	},
	"getCopy(xft:evn)": {
		"scope": "source.e2",
		"prefix": "getCopy",
		"description": "(20 OPS) function ftrace getCopy(Ee, Vp, Nl)",
		"body": "getCopy(${1:Ee}, ${2:Vp}, ${3:Nl})"
	},
	"lightColor(n)": {
		"scope": "source.e2",
		"prefix": "lightColor",
		"description": "(5 OPS) function vector lightColor(Index)",
		"body": "lightColor(${1:Index})"
	}
}