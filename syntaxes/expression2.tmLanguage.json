{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Expression2",
	"patterns": [{
		"include": "#core"
	}],
	"repository": {
		"core": {
			"patterns": [
				{"include": "#preprocessing"},
				{"include": "#statement"},
				{"include": "#expression"},
				{"include": "#invalid_syntax"}
			]
		},
		"expression": {
			"patterns": [
				{"include": "#constants"},

				{"include": "#operators"},
				{"include": "#grammar"},

				{"include": "#identifier"},
				{"include": "#formatcall"},
				{"include": "#call"},
				{"include": "#type"}
			]
		},
		"statement": {
			"patterns": [
				{"include": "#function_def"},
				{"include": "#keyword_stmt"}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "invalid.number",
					"patterns": [
						{
							"name": "constant.numeric.hex",
							"match": "\\b0[xX][0-9a-fA-F]+\\b"
						},
						{
							"name": "constant.numeric.hex",
							"match": "\\b0b[01]+\\b"
						},
						{
							"name": "constant.numeric.hex",
							"match": "\\b\\d*[ijk]\\b"
						},
						{
							"name": "constant.numeric.normal",
							"match": "\\b\\d+(?:[e.]\\d+)?\\b"
						}
					]
				},
				{
					"name": "string.quoted.double",
					"begin": "\"",
					"end": "\"",
					"patterns": [{
						"name": "constant.character.escape",
						"match": "\\\\(a|b|f|n|r|t|v|\\\\|\")"
					}]
				},
				{
					"name": "constant.numeric.language",
					"match": "\\b_[\\w_]*\\b"
				},
				{
					"name": "constant.language.self",
					"match": "\\bThis\\b"
				}
			]
		},
		"preprocessing": {
			"patterns": [
				{
					"name": "meta.preprocessor",
					"match": "#(ifn?def|endif|else|include)"
				},
				{"include": "#comment"},
				{"include": "#directive"}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line",
					"match": "(#)[^\\[].*$\\n?"
				},
				{
					"name": "comment.block",
					"begin": "#\\[",
					"end": "\\]#"
				}
			]
		},
		"directive": {
			"patterns": [{
				"name": "meta.preprocessor.directive",
				"match": "@(name|model|trigger|autoupdate|strict)\\b.*\n?"
			}, {
				"name": "meta.preprocessor.directive",
				"match": "@(inputs|outputs|persist)\\b"
			}]
		},
		"keyword_stmt": {
			"patterns": [{
				"name": "keyword.control.statement",
				"match": "\\b(?:if|while|for(each)?|return|event|switch|case|default|break|local|continue|else(?:if)?|function|try|catch|do)\\b"
			}]
		},
		"type": {
			"name": "entity.name.type",
			"match" : "\\bnumber|string|vector(4|2)?|void|angle|quaternion|table|ranger|coroutine|webaudio|array|wirelink|tracedata|stcontrol|matrix(4|2)?|gtable|ftrace|entity|complex|bone|effect|webmaterial\\b"
		},
		"operators": {
			"name": "keyword.operator",
			"match": "(\\||\\|\\||<<|>>|&&|&|\\$|\\?|!|\\^|\\^\\^|\\+\\+|\\+|\\+=|-=|\\*=|\\/=|\\-|\\-\\-|\\*|\\/|~|%|==|=|!=|<=|>=|<|>)"
		},
		"grammar": {
			"name": "keyword.operator",
			"match": ":|,|\\(|\\)|\\[|\\]|{|}"
		},
		"identifier": {
			"name": "variable.other",
			"match": "\\b([A-Z][\\w]*)\\b"
		},
		"call": {
			"name": "invalid.functioncall",
			"begin": "\\b([a-z]\\w*)(\\()",
			"beginCaptures": {
				"1": {
					"name": "invalid.functionidentifier",
					"patterns": [{"include": "#function_identifier"}]
				},
				"2": {
					"name": "keyword.operator"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "keyword.operator"
				}
			},
			"patterns": [
				{"include": "#expression"},
				{"include": "#comment"}
			]
		},
		"function_def": {
			"name": "entity.function.name",
			"patterns": [
				{
					"name": "invalid.functiondef",
					"begin": "\\b(function)\\s+([a-z]+\\s+)?(?:([a-z]+)(:))?([a-z]\\w*)(\\()([^)]*)(\\))[\\s\\S]*({)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.statement"
						},
						"2": {
							"name": "entity.name.type"
						},
						"3": {
							"name": "entity.name.type.meta"
						},
						"4": {
							"name": "keyword.operator"
						},
						"5": {
							"patterns": [{"include": "#function_identifier"}]
						},
						"6": {
							"name": "keyword.operator"
						},
						"7": {
							"name": "invalid.params",
							"patterns": [{"include": "#function_def_params"}]
						},
						"8": {
							"name": "keyword.operator"
						},
						"9": {
							"name": "keyword.operator"
						}
					},
					"end": "(})",
					"endCaptures": {
						"1": {
							"name": "keyword.operator"
						}
					},
					"patterns": [
						{"include": "#core"}
					]
				}
			]
		},
		"function_identifier": {
			"name": "entity.name.function",
			"match": "[a-z]\\w*"
		},
		"function_def_params": {
			"name": "invalid",
			"patterns": [
				{"include": "#type"},
				{"include": "#grammar"},
				{"include": "#identifier"}
			]
		},
		"invalid_syntax": {
			"patterns": [{
				"name": "invalid.unknown",
				"match": "."
			}]
		}
	},
	"scopeName": "source.e2"
}